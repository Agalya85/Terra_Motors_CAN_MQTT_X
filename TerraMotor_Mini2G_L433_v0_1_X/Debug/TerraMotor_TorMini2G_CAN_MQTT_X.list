
TerraMotor_TorMini2G_CAN_MQTT_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000190  08000800  08000800  00000800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aac0  08000990  08000990  00000990  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac8  0800b450  0800b450  0000b450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf18  0800bf18  00011ac8  2**0
                  CONTENTS
  4 .ARM          00000000  0800bf18  0800bf18  00011ac8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bf18  0800bf18  00011ac8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800bf18  0800bf18  0000bf18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800bf20  0800bf20  0000bf20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001ac8  20000000  0800bf28  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000314c  20001ac8  0800d9f0  00011ac8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004c14  0800d9f0  00014c14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011ac8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00064e78  00000000  00000000  00011af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000087b0  00000000  00000000  00076970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001beeb  00000000  00000000  0007f120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020c8  00000000  00000000  0009b010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002468  00000000  00000000  0009d0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030738  00000000  00000000  0009f540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000426e5  00000000  00000000  000cfc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010639b  00000000  00000000  0011235d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002186f8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000065e0  00000000  00000000  0021874c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000990 <__do_global_dtors_aux>:
 8000990:	b510      	push	{r4, lr}
 8000992:	4c05      	ldr	r4, [pc, #20]	; (80009a8 <__do_global_dtors_aux+0x18>)
 8000994:	7823      	ldrb	r3, [r4, #0]
 8000996:	b933      	cbnz	r3, 80009a6 <__do_global_dtors_aux+0x16>
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <__do_global_dtors_aux+0x1c>)
 800099a:	b113      	cbz	r3, 80009a2 <__do_global_dtors_aux+0x12>
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <__do_global_dtors_aux+0x20>)
 800099e:	f3af 8000 	nop.w
 80009a2:	2301      	movs	r3, #1
 80009a4:	7023      	strb	r3, [r4, #0]
 80009a6:	bd10      	pop	{r4, pc}
 80009a8:	20001ac8 	.word	0x20001ac8
 80009ac:	00000000 	.word	0x00000000
 80009b0:	0800b438 	.word	0x0800b438

080009b4 <frame_dummy>:
 80009b4:	b508      	push	{r3, lr}
 80009b6:	4b03      	ldr	r3, [pc, #12]	; (80009c4 <frame_dummy+0x10>)
 80009b8:	b11b      	cbz	r3, 80009c2 <frame_dummy+0xe>
 80009ba:	4903      	ldr	r1, [pc, #12]	; (80009c8 <frame_dummy+0x14>)
 80009bc:	4803      	ldr	r0, [pc, #12]	; (80009cc <frame_dummy+0x18>)
 80009be:	f3af 8000 	nop.w
 80009c2:	bd08      	pop	{r3, pc}
 80009c4:	00000000 	.word	0x00000000
 80009c8:	20001acc 	.word	0x20001acc
 80009cc:	0800b438 	.word	0x0800b438

080009d0 <strlen>:
 80009d0:	4603      	mov	r3, r0
 80009d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80009d6:	2a00      	cmp	r2, #0
 80009d8:	d1fb      	bne.n	80009d2 <strlen+0x2>
 80009da:	1a18      	subs	r0, r3, r0
 80009dc:	3801      	subs	r0, #1
 80009de:	4770      	bx	lr

080009e0 <memchr>:
 80009e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80009e4:	2a10      	cmp	r2, #16
 80009e6:	db2b      	blt.n	8000a40 <memchr+0x60>
 80009e8:	f010 0f07 	tst.w	r0, #7
 80009ec:	d008      	beq.n	8000a00 <memchr+0x20>
 80009ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80009f2:	3a01      	subs	r2, #1
 80009f4:	428b      	cmp	r3, r1
 80009f6:	d02d      	beq.n	8000a54 <memchr+0x74>
 80009f8:	f010 0f07 	tst.w	r0, #7
 80009fc:	b342      	cbz	r2, 8000a50 <memchr+0x70>
 80009fe:	d1f6      	bne.n	80009ee <memchr+0xe>
 8000a00:	b4f0      	push	{r4, r5, r6, r7}
 8000a02:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000a06:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8000a0a:	f022 0407 	bic.w	r4, r2, #7
 8000a0e:	f07f 0700 	mvns.w	r7, #0
 8000a12:	2300      	movs	r3, #0
 8000a14:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000a18:	3c08      	subs	r4, #8
 8000a1a:	ea85 0501 	eor.w	r5, r5, r1
 8000a1e:	ea86 0601 	eor.w	r6, r6, r1
 8000a22:	fa85 f547 	uadd8	r5, r5, r7
 8000a26:	faa3 f587 	sel	r5, r3, r7
 8000a2a:	fa86 f647 	uadd8	r6, r6, r7
 8000a2e:	faa5 f687 	sel	r6, r5, r7
 8000a32:	b98e      	cbnz	r6, 8000a58 <memchr+0x78>
 8000a34:	d1ee      	bne.n	8000a14 <memchr+0x34>
 8000a36:	bcf0      	pop	{r4, r5, r6, r7}
 8000a38:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000a3c:	f002 0207 	and.w	r2, r2, #7
 8000a40:	b132      	cbz	r2, 8000a50 <memchr+0x70>
 8000a42:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000a46:	3a01      	subs	r2, #1
 8000a48:	ea83 0301 	eor.w	r3, r3, r1
 8000a4c:	b113      	cbz	r3, 8000a54 <memchr+0x74>
 8000a4e:	d1f8      	bne.n	8000a42 <memchr+0x62>
 8000a50:	2000      	movs	r0, #0
 8000a52:	4770      	bx	lr
 8000a54:	3801      	subs	r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	2d00      	cmp	r5, #0
 8000a5a:	bf06      	itte	eq
 8000a5c:	4635      	moveq	r5, r6
 8000a5e:	3803      	subeq	r0, #3
 8000a60:	3807      	subne	r0, #7
 8000a62:	f015 0f01 	tst.w	r5, #1
 8000a66:	d107      	bne.n	8000a78 <memchr+0x98>
 8000a68:	3001      	adds	r0, #1
 8000a6a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000a6e:	bf02      	ittt	eq
 8000a70:	3001      	addeq	r0, #1
 8000a72:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000a76:	3001      	addeq	r0, #1
 8000a78:	bcf0      	pop	{r4, r5, r6, r7}
 8000a7a:	3801      	subs	r0, #1
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <HAL_CAN_MspInit>:
  /* USER CODE END CAN1_Init 2 */

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000a80:	b510      	push	{r4, lr}
 8000a82:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	2300      	movs	r3, #0
 8000a86:	9303      	str	r3, [sp, #12]
 8000a88:	9304      	str	r3, [sp, #16]
 8000a8a:	9305      	str	r3, [sp, #20]
 8000a8c:	9306      	str	r3, [sp, #24]
 8000a8e:	9307      	str	r3, [sp, #28]
  if(canHandle->Instance==CAN1)
 8000a90:	6802      	ldr	r2, [r0, #0]
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <HAL_CAN_MspInit+0xa8>)
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d001      	beq.n	8000a9c <HAL_CAN_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000a98:	b008      	add	sp, #32
 8000a9a:	bd10      	pop	{r4, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a9c:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8000aa0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000aa2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000aa6:	659a      	str	r2, [r3, #88]	; 0x58
 8000aa8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000aaa:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8000aae:	9201      	str	r2, [sp, #4]
 8000ab0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ab4:	f042 0201 	orr.w	r2, r2, #1
 8000ab8:	64da      	str	r2, [r3, #76]	; 0x4c
 8000aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	9302      	str	r3, [sp, #8]
 8000ac2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ac4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ac8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2400      	movs	r4, #0
 8000ad0:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ad6:	2309      	movs	r3, #9
 8000ad8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ada:	a903      	add	r1, sp, #12
 8000adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae0:	f004 fffe 	bl	8005ae0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 4, 0);
 8000ae4:	4622      	mov	r2, r4
 8000ae6:	2104      	movs	r1, #4
 8000ae8:	2013      	movs	r0, #19
 8000aea:	f004 fc83 	bl	80053f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000aee:	2013      	movs	r0, #19
 8000af0:	f004 fcc6 	bl	8005480 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 4, 0);
 8000af4:	4622      	mov	r2, r4
 8000af6:	2104      	movs	r1, #4
 8000af8:	2014      	movs	r0, #20
 8000afa:	f004 fc7b 	bl	80053f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000afe:	2014      	movs	r0, #20
 8000b00:	f004 fcbe 	bl	8005480 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 4, 0);
 8000b04:	4622      	mov	r2, r4
 8000b06:	2104      	movs	r1, #4
 8000b08:	2015      	movs	r0, #21
 8000b0a:	f004 fc73 	bl	80053f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000b0e:	2015      	movs	r0, #21
 8000b10:	f004 fcb6 	bl	8005480 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 4, 0);
 8000b14:	4622      	mov	r2, r4
 8000b16:	2104      	movs	r1, #4
 8000b18:	2016      	movs	r0, #22
 8000b1a:	f004 fc6b 	bl	80053f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000b1e:	2016      	movs	r0, #22
 8000b20:	f004 fcae 	bl	8005480 <HAL_NVIC_EnableIRQ>
}
 8000b24:	e7b8      	b.n	8000a98 <HAL_CAN_MspInit+0x18>
 8000b26:	bf00      	nop
 8000b28:	40006400 	.word	0x40006400

08000b2c <HAL_CAN_MspDeInit>:

void HAL_CAN_MspDeInit(CAN_HandleTypeDef* canHandle)
{
 8000b2c:	b508      	push	{r3, lr}

  if(canHandle->Instance==CAN1)
 8000b2e:	6802      	ldr	r2, [r0, #0]
 8000b30:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <HAL_CAN_MspDeInit+0x3c>)
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d000      	beq.n	8000b38 <HAL_CAN_MspDeInit+0xc>
    HAL_NVIC_DisableIRQ(CAN1_SCE_IRQn);
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }
}
 8000b36:	bd08      	pop	{r3, pc}
    __HAL_RCC_CAN1_CLK_DISABLE();
 8000b38:	4a0c      	ldr	r2, [pc, #48]	; (8000b6c <HAL_CAN_MspDeInit+0x40>)
 8000b3a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8000b3c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000b40:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8000b42:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4a:	f005 f923 	bl	8005d94 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(CAN1_TX_IRQn);
 8000b4e:	2013      	movs	r0, #19
 8000b50:	f004 fcae 	bl	80054b0 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8000b54:	2014      	movs	r0, #20
 8000b56:	f004 fcab 	bl	80054b0 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
 8000b5a:	2015      	movs	r0, #21
 8000b5c:	f004 fca8 	bl	80054b0 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_SCE_IRQn);
 8000b60:	2016      	movs	r0, #22
 8000b62:	f004 fca5 	bl	80054b0 <HAL_NVIC_DisableIRQ>
}
 8000b66:	e7e6      	b.n	8000b36 <HAL_CAN_MspDeInit+0xa>
 8000b68:	40006400 	.word	0x40006400
 8000b6c:	40021000 	.word	0x40021000

08000b70 <updateDeviceSignature>:
 Author           	Date                Remarks
 KloudQ Team       11-04-18
 KloudQ Team	   19-09-18				Update . Flash Size removed from payload
******************************************************************************/
void updateDeviceSignature(void)
{
 8000b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char buffflash[16] = {'0'};

	u32FlashSize = (uint16_t)STM32_FLASHSIZE;
#endif

	gu32DeviceID = STM32_UUID[0];
 8000b72:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <updateDeviceSignature+0x50>)
 8000b74:	681e      	ldr	r6, [r3, #0]
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <updateDeviceSignature+0x54>)
 8000b78:	601e      	str	r6, [r3, #0]
	uint32_t u32UUID0 = 0;
	uint32_t u32UUID1 = 0;
	uint32_t u32UUID2 = 0;
	u32UUID0 = STM32_UUID[0];
	u32UUID1 = STM32_UUID[1];
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <updateDeviceSignature+0x58>)
 8000b7c:	681f      	ldr	r7, [r3, #0]
#if(USEMEMSIZEINDINFO == TRUE)
	/*Integer to ASCII Flash Size */
	itoa(u32FlashSize,buffflash,10);
#endif
	/* Append Device Info to Array */
	itoa(u32UUID2,buffuuid2,10);
 8000b7e:	4c13      	ldr	r4, [pc, #76]	; (8000bcc <updateDeviceSignature+0x5c>)
 8000b80:	220a      	movs	r2, #10
 8000b82:	4621      	mov	r1, r4
 8000b84:	3304      	adds	r3, #4
 8000b86:	6818      	ldr	r0, [r3, #0]
 8000b88:	f009 f948 	bl	8009e1c <itoa>
	strcat(dinfo,buffuuid2);
 8000b8c:	f104 0520 	add.w	r5, r4, #32
 8000b90:	4621      	mov	r1, r4
 8000b92:	4628      	mov	r0, r5
 8000b94:	f009 fa44 	bl	800a020 <strcat>

	itoa(u32UUID1,buffuuid2,10);
 8000b98:	220a      	movs	r2, #10
 8000b9a:	4621      	mov	r1, r4
 8000b9c:	4638      	mov	r0, r7
 8000b9e:	f009 f93d 	bl	8009e1c <itoa>
	strcat(dinfo,buffuuid2);
 8000ba2:	4621      	mov	r1, r4
 8000ba4:	4628      	mov	r0, r5
 8000ba6:	f009 fa3b 	bl	800a020 <strcat>

	itoa(u32UUID0,buffuuid2,10);
 8000baa:	220a      	movs	r2, #10
 8000bac:	4621      	mov	r1, r4
 8000bae:	4630      	mov	r0, r6
 8000bb0:	f009 f934 	bl	8009e1c <itoa>
	strcat(dinfo,buffuuid2);
 8000bb4:	4621      	mov	r1, r4
 8000bb6:	4628      	mov	r0, r5
 8000bb8:	f009 fa32 	bl	800a020 <strcat>
#if(USEMEMSIZEINDINFO == TRUE)
	/* 16 bit Flash Size use if required */
	//strcat(dinfo,buffflash);
#endif
}
 8000bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	1fff7590 	.word	0x1fff7590
 8000bc4:	20001ae4 	.word	0x20001ae4
 8000bc8:	1fff7594 	.word	0x1fff7594
 8000bcc:	20000000 	.word	0x20000000

08000bd0 <assertError>:
 Author           	Date                Remarks
 KTL   				12-2-19				Initial Draft
******************************************************************************/
void assertError(enmSystemErrorType errorType ,enmErrorStatus errorStatus)
{
	switch(errorType)
 8000bd0:	2809      	cmp	r0, #9
 8000bd2:	d823      	bhi.n	8000c1c <assertError+0x4c>
 8000bd4:	e8df f000 	tbb	[pc, r0]
 8000bd8:	0e080b05 	.word	0x0e080b05
 8000bdc:	1a171411 	.word	0x1a171411
 8000be0:	201d      	.short	0x201d
	{
		case enmTORERRORS_TIMER7:
			strsystemErrorLog.u32Timer7Error = errorStatus;
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <assertError+0x50>)
 8000be4:	6019      	str	r1, [r3, #0]
		break;
 8000be6:	4770      	bx	lr

		case enmTORERRORS_CAN1_CONFIGFILTER:
			strsystemErrorLog.u32Can1ConfigFilterError = errorStatus;
 8000be8:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <assertError+0x50>)
 8000bea:	6099      	str	r1, [r3, #8]
		break;
 8000bec:	4770      	bx	lr

		case enmTORERRORS_CAN1_INIT:
			strsystemErrorLog.u32Can1InitError = errorStatus;
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <assertError+0x50>)
 8000bf0:	6059      	str	r1, [r3, #4]
			break;
 8000bf2:	4770      	bx	lr

		case enmTORERRORS_CAN1_START:
			strsystemErrorLog.u32Can1StartError = errorStatus;
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <assertError+0x50>)
 8000bf6:	60d9      	str	r1, [r3, #12]
		break;
 8000bf8:	4770      	bx	lr

		case enmTORERRORS_CAN1_NOTIFYFIFO0:
			strsystemErrorLog.u32Can1NotifyFIFO0Error = errorStatus;
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <assertError+0x50>)
 8000bfc:	6119      	str	r1, [r3, #16]
		break;
 8000bfe:	4770      	bx	lr

		break;

		case enmTORERRORS_CAN1_TXERROR:
			strsystemErrorLog.u32Can1TxError = errorStatus;
 8000c00:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <assertError+0x50>)
 8000c02:	6159      	str	r1, [r3, #20]
		break;
 8000c04:	4770      	bx	lr

		case enmTORERRORS_CAN1_RXERROR:
			strsystemErrorLog.u32Can1RxError = errorStatus;
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <assertError+0x50>)
 8000c08:	6199      	str	r1, [r3, #24]
		break;
 8000c0a:	4770      	bx	lr

		case enmTORERRORS_ENQUEUE:
			strsystemErrorLog.u32EnqueueError = errorStatus;
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <assertError+0x50>)
 8000c0e:	61d9      	str	r1, [r3, #28]
		break;
 8000c10:	4770      	bx	lr

		case enmTORERRORS_MEM_I2C:
			strsystemErrorLog.u32MemI2CError = errorStatus;
 8000c12:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <assertError+0x50>)
 8000c14:	6219      	str	r1, [r3, #32]
		break;
 8000c16:	4770      	bx	lr

		case enmTORERRORS_MEM_QUEUE:
			strsystemErrorLog.u32MemQueueError = errorStatus;
 8000c18:	4b01      	ldr	r3, [pc, #4]	; (8000c20 <assertError+0x50>)
 8000c1a:	6259      	str	r1, [r3, #36]	; 0x24
			/* Unwanted / Undefined Error Occured
			 * System Will Halt Completely */
			//systemReset();
			break;
	}
}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20003100 	.word	0x20003100

08000c24 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c28:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2a:	2400      	movs	r4, #0
 8000c2c:	9405      	str	r4, [sp, #20]
 8000c2e:	9406      	str	r4, [sp, #24]
 8000c30:	9407      	str	r4, [sp, #28]
 8000c32:	9408      	str	r4, [sp, #32]
 8000c34:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c36:	4b41      	ldr	r3, [pc, #260]	; (8000d3c <MX_GPIO_Init+0x118>)
 8000c38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c3a:	f042 0204 	orr.w	r2, r2, #4
 8000c3e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000c40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c42:	f002 0204 	and.w	r2, r2, #4
 8000c46:	9201      	str	r2, [sp, #4]
 8000c48:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c50:	64da      	str	r2, [r3, #76]	; 0x4c
 8000c52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c54:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000c58:	9202      	str	r2, [sp, #8]
 8000c5a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c5e:	f042 0201 	orr.w	r2, r2, #1
 8000c62:	64da      	str	r2, [r3, #76]	; 0x4c
 8000c64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c66:	f002 0201 	and.w	r2, r2, #1
 8000c6a:	9203      	str	r2, [sp, #12]
 8000c6c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c70:	f042 0202 	orr.w	r2, r2, #2
 8000c74:	64da      	str	r2, [r3, #76]	; 0x4c
 8000c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c78:	f003 0302 	and.w	r3, r3, #2
 8000c7c:	9304      	str	r3, [sp, #16]
 8000c7e:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GSM_PWR_KEY_GPIO_Port, GSM_PWR_KEY_Pin, GPIO_PIN_RESET);
 8000c80:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8000d48 <MX_GPIO_Init+0x124>
 8000c84:	4622      	mov	r2, r4
 8000c86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c8a:	4640      	mov	r0, r8
 8000c8c:	f005 f92c 	bl	8005ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CE_serial_flash_Pin|LED_GENERIC_Pin|LED_COMM_Pin|LED_ERROR_Pin, GPIO_PIN_RESET);
 8000c90:	4f2b      	ldr	r7, [pc, #172]	; (8000d40 <MX_GPIO_Init+0x11c>)
 8000c92:	4622      	mov	r2, r4
 8000c94:	f240 3121 	movw	r1, #801	; 0x321
 8000c98:	4638      	mov	r0, r7
 8000c9a:	f005 f925 	bl	8005ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WD_HEARTBEAT_GPIO_Port, WD_HEARTBEAT_Pin, GPIO_PIN_RESET);
 8000c9e:	4622      	mov	r2, r4
 8000ca0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ca4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca8:	f005 f91e 	bl	8005ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GSM_PWR_KEY_Pin;
 8000cac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2501      	movs	r5, #1
 8000cb4:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb6:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GSM_PWR_KEY_GPIO_Port, &GPIO_InitStruct);
 8000cba:	a905      	add	r1, sp, #20
 8000cbc:	4640      	mov	r0, r8
 8000cbe:	f004 ff0f 	bl	8005ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000cc2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000cc6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cc8:	2603      	movs	r6, #3
 8000cca:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cce:	a905      	add	r1, sp, #20
 8000cd0:	4640      	mov	r0, r8
 8000cd2:	f004 ff05 	bl	8005ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8000cd6:	230b      	movs	r3, #11
 8000cd8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cda:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cde:	a905      	add	r1, sp, #20
 8000ce0:	4818      	ldr	r0, [pc, #96]	; (8000d44 <MX_GPIO_Init+0x120>)
 8000ce2:	f004 fefd 	bl	8005ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA5 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ce6:	f240 13ef 	movw	r3, #495	; 0x1ef
 8000cea:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cec:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf0:	a905      	add	r1, sp, #20
 8000cf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf6:	f004 fef3 	bl	8005ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI1_CE_serial_flash_Pin|LED_GENERIC_Pin|LED_COMM_Pin|LED_ERROR_Pin;
 8000cfa:	f240 3321 	movw	r3, #801	; 0x321
 8000cfe:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d00:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d06:	a905      	add	r1, sp, #20
 8000d08:	4638      	mov	r0, r7
 8000d0a:	f004 fee9 	bl	8005ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8000d0e:	f641 431e 	movw	r3, #7198	; 0x1c1e
 8000d12:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_12|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d14:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d18:	a905      	add	r1, sp, #20
 8000d1a:	4638      	mov	r0, r7
 8000d1c:	f004 fee0 	bl	8005ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WD_HEARTBEAT_Pin;
 8000d20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d24:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d26:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(WD_HEARTBEAT_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	a905      	add	r1, sp, #20
 8000d2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d32:	f004 fed5 	bl	8005ae0 <HAL_GPIO_Init>

}
 8000d36:	b00a      	add	sp, #40	; 0x28
 8000d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	48000400 	.word	0x48000400
 8000d44:	48001c00 	.word	0x48001c00
 8000d48:	48000800 	.word	0x48000800

08000d4c <initGSMSIM868>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void initGSMSIM868(void)
{
 8000d4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* Init Buffers */
	memset(gsmInstance.agpsLocationData, GSM_ARRAY_INIT_CHAR, (GPS_LOCATION_ARRAY_SIZE * sizeof(char)));
 8000d50:	4c7d      	ldr	r4, [pc, #500]	; (8000f48 <initGSMSIM868+0x1fc>)
 8000d52:	2296      	movs	r2, #150	; 0x96
 8000d54:	2100      	movs	r1, #0
 8000d56:	4620      	mov	r0, r4
 8000d58:	f009 f880 	bl	8009e5c <memset>
	memset(gsmInstance.agsmNetworkIP, GSM_ARRAY_INIT_CHAR, (GPRS_NETWORKIP_ARRAY_SIZE * sizeof(char)));
 8000d5c:	2223      	movs	r2, #35	; 0x23
 8000d5e:	2100      	movs	r1, #0
 8000d60:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
 8000d64:	f009 f87a 	bl	8009e5c <memset>
	memset(gsmInstance.agsmSignalStrength, GSM_ARRAY_INIT_CHAR, (GSM_SIGSTRGTH_ARRAY_SIZE * sizeof(char)));
 8000d68:	2500      	movs	r5, #0
 8000d6a:	f8c4 5096 	str.w	r5, [r4, #150]	; 0x96
 8000d6e:	f8c4 509a 	str.w	r5, [r4, #154]	; 0x9a
 8000d72:	f8a4 509e 	strh.w	r5, [r4, #158]	; 0x9e
	memset((char *)gsmInstance.as8GSM_Response_Buff,GSM_ARRAY_INIT_CHAR,(GSM_RESPONSE_ARRAY_SIZE * sizeof(char)));
 8000d76:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	f204 4052 	addw	r0, r4, #1106	; 0x452
 8000d80:	f009 f86c 	bl	8009e5c <memset>
	memset(gsmInstance.agsmCommandResponse, DATA_UNKNOWN, sizeof(gsmInstance.agsmCommandResponse[0][0])
 8000d84:	f44f 7261 	mov.w	r2, #900	; 0x384
 8000d88:	213f      	movs	r1, #63	; 0x3f
 8000d8a:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
 8000d8e:	f009 f865 	bl	8009e5c <memset>
		   * GSM_TOTAL_COMMANDS * GSM_TOTAL_COMMANDS);
	memset(gsmInstance.agsmHTTPRequestStatus,DATA_UNKNOWN,GSM_HTTP_RESPONSE_CODE_SIZE * sizeof(char));
 8000d92:	f04f 333f 	mov.w	r3, #1061109567	; 0x3f3f3f3f
 8000d96:	f8c4 3447 	str.w	r3, [r4, #1095]	; 0x447
 8000d9a:	f8c4 344b 	str.w	r3, [r4, #1099]	; 0x44b
	memset(gsmInstance.strSystemSMS.agsmSMSRecipient,DATA_UNKNOWN,SMS_MOB_NO_LENGTH * sizeof(char));
 8000d9e:	f8c4 3e41 	str.w	r3, [r4, #3649]	; 0xe41
 8000da2:	f8c4 3e45 	str.w	r3, [r4, #3653]	; 0xe45
 8000da6:	f8c4 3e49 	str.w	r3, [r4, #3657]	; 0xe49
 8000daa:	f884 3e4d 	strb.w	r3, [r4, #3661]	; 0xe4d
	memset(gsmInstance.strSystemSMS.agsmSMSMessageBody,0x00,SMS_MAX_MSG_LENGTH * sizeof(char));
 8000dae:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000db2:	4629      	mov	r1, r5
 8000db4:	f604 604e 	addw	r0, r4, #3662	; 0xe4e
 8000db8:	f009 f850 	bl	8009e5c <memset>
	memset(gsmInstance.u32GSMHttpResponseCode,0x00,sizeof(char) * 3);
 8000dbc:	f8a4 544f 	strh.w	r5, [r4, #1103]	; 0x44f
 8000dc0:	f884 5451 	strb.w	r5, [r4, #1105]	; 0x451
	memset(gau8GSM_ATAPN, 0x00, (180 * sizeof(char)));
 8000dc4:	4e61      	ldr	r6, [pc, #388]	; (8000f4c <initGSMSIM868+0x200>)
 8000dc6:	f04f 09b4 	mov.w	r9, #180	; 0xb4
 8000dca:	464a      	mov	r2, r9
 8000dcc:	4629      	mov	r1, r5
 8000dce:	4630      	mov	r0, r6
 8000dd0:	f009 f844 	bl	8009e5c <memset>
	memset(gau8GSM_ATURL, 0x00, (180 * sizeof(char)));
 8000dd4:	eb06 0809 	add.w	r8, r6, r9
 8000dd8:	464a      	mov	r2, r9
 8000dda:	4629      	mov	r1, r5
 8000ddc:	4640      	mov	r0, r8
 8000dde:	f009 f83d 	bl	8009e5c <memset>
	memset(gau8GSM_SMSRecepient, 0x00, ( 180 * sizeof(char)));
 8000de2:	f506 77b4 	add.w	r7, r6, #360	; 0x168
 8000de6:	464a      	mov	r2, r9
 8000de8:	4629      	mov	r1, r5
 8000dea:	4638      	mov	r0, r7
 8000dec:	f009 f836 	bl	8009e5c <memset>

	unTelInfo.u8JBGaussGprsConnection = 0;
 8000df0:	f8df a178 	ldr.w	sl, [pc, #376]	; 8000f6c <initGSMSIM868+0x220>
 8000df4:	f89a 3002 	ldrb.w	r3, [sl, #2]
 8000df8:	f365 13c7 	bfi	r3, r5, #7, #1
 8000dfc:	f88a 3002 	strb.w	r3, [sl, #2]
	strcat((char *)gau8GSM_SMSRecepient,(char *)gau8GSM_ATCMGS);
 8000e00:	f506 7107 	add.w	r1, r6, #540	; 0x21c
 8000e04:	4638      	mov	r0, r7
 8000e06:	f009 f90b 	bl	800a020 <strcat>
	strcat((char *)gau8GSM_SMSRecepient,(char *)"\"");
 8000e0a:	4638      	mov	r0, r7
 8000e0c:	f7ff fde0 	bl	80009d0 <strlen>
 8000e10:	4b4f      	ldr	r3, [pc, #316]	; (8000f50 <initGSMSIM868+0x204>)
 8000e12:	f8b3 9000 	ldrh.w	r9, [r3]
 8000e16:	f827 9000 	strh.w	r9, [r7, r0]
	strcat((char *)gau8GSM_SMSRecepient,(char *)gau8GSM_smsto);
 8000e1a:	f506 710e 	add.w	r1, r6, #568	; 0x238
 8000e1e:	4638      	mov	r0, r7
 8000e20:	f009 f8fe 	bl	800a020 <strcat>
	strcat((char *)gau8GSM_SMSRecepient,(char *)"\"");
 8000e24:	4638      	mov	r0, r7
 8000e26:	f7ff fdd3 	bl	80009d0 <strlen>
 8000e2a:	f827 9000 	strh.w	r9, [r7, r0]
	strcat((char *)gau8GSM_ATAPN,(char *)gau8GSM_ATSAPRBAPN);
 8000e2e:	f506 7112 	add.w	r1, r6, #584	; 0x248
 8000e32:	4630      	mov	r0, r6
 8000e34:	f009 f8f4 	bl	800a020 <strcat>
	strcat((char *)gau8GSM_ATAPN,(char *)"\"");
 8000e38:	4630      	mov	r0, r6
 8000e3a:	f7ff fdc9 	bl	80009d0 <strlen>
 8000e3e:	f826 9000 	strh.w	r9, [r6, r0]
	strcat((char *)gau8GSM_ATAPN,(char *)gau8GSM_apn);
 8000e42:	f506 712b 	add.w	r1, r6, #684	; 0x2ac
 8000e46:	4630      	mov	r0, r6
 8000e48:	f009 f8ea 	bl	800a020 <strcat>
	strcat((char *)gau8GSM_ATAPN,(char *)"\"");
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	f7ff fdbf 	bl	80009d0 <strlen>
 8000e52:	f826 9000 	strh.w	r9, [r6, r0]
	strcat((char *)gau8GSM_ATURL,(char *)gau8GSM_ATHTTPPARAURL);
 8000e56:	f506 7144 	add.w	r1, r6, #784	; 0x310
 8000e5a:	4640      	mov	r0, r8
 8000e5c:	f009 f8e0 	bl	800a020 <strcat>
	strcat((char *)gau8GSM_ATURL,(char *)"\"");
 8000e60:	4640      	mov	r0, r8
 8000e62:	f7ff fdb5 	bl	80009d0 <strlen>
 8000e66:	f828 9000 	strh.w	r9, [r8, r0]
	strcat((char *)gau8GSM_ATURL,(char *)gau8GSM_url);
 8000e6a:	f506 716a 	add.w	r1, r6, #936	; 0x3a8
 8000e6e:	4640      	mov	r0, r8
 8000e70:	f009 f8d6 	bl	800a020 <strcat>
	strcat((char *)gau8GSM_ATURL,(char *)"\"");
 8000e74:	4640      	mov	r0, r8
 8000e76:	f7ff fdab 	bl	80009d0 <strlen>
 8000e7a:	f828 9000 	strh.w	r9, [r8, r0]
	strcat(gau8GSM_ATAPN,"\r\n");
 8000e7e:	4630      	mov	r0, r6
 8000e80:	f7ff fda6 	bl	80009d0 <strlen>
 8000e84:	1832      	adds	r2, r6, r0
 8000e86:	4b33      	ldr	r3, [pc, #204]	; (8000f54 <initGSMSIM868+0x208>)
 8000e88:	f8b3 b000 	ldrh.w	fp, [r3]
 8000e8c:	f893 9002 	ldrb.w	r9, [r3, #2]
 8000e90:	f826 b000 	strh.w	fp, [r6, r0]
 8000e94:	f882 9002 	strb.w	r9, [r2, #2]
	strcat(gau8GSM_ATURL,"\r\n");
 8000e98:	4640      	mov	r0, r8
 8000e9a:	f7ff fd99 	bl	80009d0 <strlen>
 8000e9e:	eb08 0300 	add.w	r3, r8, r0
 8000ea2:	f828 b000 	strh.w	fp, [r8, r0]
 8000ea6:	f883 9002 	strb.w	r9, [r3, #2]
	strcat(gau8GSM_SMSRecepient,"\r\n");
 8000eaa:	4638      	mov	r0, r7
 8000eac:	f7ff fd90 	bl	80009d0 <strlen>
 8000eb0:	183b      	adds	r3, r7, r0
 8000eb2:	f827 b000 	strh.w	fp, [r7, r0]
 8000eb6:	f883 9002 	strb.w	r9, [r3, #2]

	memset(gau8GSM_ATSMCLIENTID,0x00,sizeof(gau8GSM_ATSMCLIENTID));
 8000eba:	f506 6788 	add.w	r7, r6, #1088	; 0x440
 8000ebe:	2264      	movs	r2, #100	; 0x64
 8000ec0:	4629      	mov	r1, r5
 8000ec2:	4638      	mov	r0, r7
 8000ec4:	f008 ffca 	bl	8009e5c <memset>
	strcpy(gau8GSM_ATSMCLIENTID,gau8GSM_MQTTCLIENTID);
 8000ec8:	f206 41a4 	addw	r1, r6, #1188	; 0x4a4
 8000ecc:	4638      	mov	r0, r7
 8000ece:	f009 f8c3 	bl	800a058 <strcpy>
	strcat(gau8GSM_ATSMCLIENTID,(char * )dinfo);
 8000ed2:	4921      	ldr	r1, [pc, #132]	; (8000f58 <initGSMSIM868+0x20c>)
 8000ed4:	4638      	mov	r0, r7
 8000ed6:	f009 f8a3 	bl	800a020 <strcat>
//	strcat(gau8GSM_ATSMCLIENTID,(char * )"revati-100386");
	strcat(gau8GSM_ATSMCLIENTID,"\"\r\n");
 8000eda:	4638      	mov	r0, r7
 8000edc:	f7ff fd78 	bl	80009d0 <strlen>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	4a1e      	ldr	r2, [pc, #120]	; (8000f5c <initGSMSIM868+0x210>)
 8000ee4:	6810      	ldr	r0, [r2, #0]
 8000ee6:	50f8      	str	r0, [r7, r3]


	gsmInstance.strSystemSMS.u8NewMessage = FALSE;
 8000ee8:	f241 136e 	movw	r3, #4462	; 0x116e
 8000eec:	54e5      	strb	r5, [r4, r3]
	gsmInstance.enmcurrentTask = enmGSMTASK_RESET;
 8000eee:	f884 5e3e 	strb.w	r5, [r4, #3646]	; 0xe3e
	gsmInstance.enmGSMPwrState = enmGSM_PWRNOTSTARTED;
 8000ef2:	f884 5e40 	strb.w	r5, [r4, #3648]	; 0xe40
	gsmInstance.u8isConnected = FALSE;
 8000ef6:	f884 5e19 	strb.w	r5, [r4, #3609]	; 0xe19
	gsmInstance.u8GSM_Response_Character_Counter = 0;
 8000efa:	f8c4 5e38 	str.w	r5, [r4, #3640]	; 0xe38
	gsmInstance.u8gsmRegistrationStatus = FALSE;
 8000efe:	f884 5e17 	strb.w	r5, [r4, #3607]	; 0xe17
	gsmInstance.u8gsmSIMReadyStatus = FALSE;
 8000f02:	f884 5e16 	strb.w	r5, [r4, #3606]	; 0xe16
	gsmInstance.u8gsmRetryCount = GSM_MAX_RETRY;
 8000f06:	2303      	movs	r3, #3
 8000f08:	f884 3e18 	strb.w	r3, [r4, #3608]	; 0xe18
	gsmInstance.u8AttemptFota = FALSE;
 8000f0c:	f884 5e1b 	strb.w	r5, [r4, #3611]	; 0xe1b
	gsmInstance.u32GSMTimer = ONE_SEC;
 8000f10:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000f14:	f8c4 3e20 	str.w	r3, [r4, #3616]	; 0xe20
	gu32GSMHangTimer = THREE_MIN;
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <initGSMSIM868+0x214>)
 8000f1a:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <initGSMSIM868+0x218>)
 8000f1c:	601a      	str	r2, [r3, #0]
	gsmInstance.u32GSMHeartbeatTimer = 0;
 8000f1e:	f8c4 5e2c 	str.w	r5, [r4, #3628]	; 0xe2c
	gsmInstance.u8IllegalHttpResponseCounter = 0;
 8000f22:	f884 5e1d 	strb.w	r5, [r4, #3613]	; 0xe1d
	gsmInstance.enmGSMCommandResponseState = enmGSM_SENDCMD;
 8000f26:	f884 5e3c 	strb.w	r5, [r4, #3644]	; 0xe3c
	gsmInstance.enmGSMCommand = enmGSMSTATE_ATE0;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	f884 3e3f 	strb.w	r3, [r4, #3647]	; 0xe3f
	gsmInstance.enmGSMCommandState = enmGSM_CMDSEND;
 8000f30:	f884 3e3d 	strb.w	r3, [r4, #3645]	; 0xe3d

	gu32FotaRquestFlag = FALSE;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <initGSMSIM868+0x21c>)
 8000f36:	601d      	str	r5, [r3, #0]
	unTelInfo.u32JBgaussCommandId[7] = gu32FotaRquestFlag;
 8000f38:	f88a 5007 	strb.w	r5, [sl, #7]

	/* Potential Hang Issue due to this variable */
	gu32ModuleInitComplete = 0;
 8000f3c:	605d      	str	r5, [r3, #4]
	gu8SendDataCounter = 5;
 8000f3e:	2305      	movs	r3, #5
 8000f40:	f886 34bb 	strb.w	r3, [r6, #1211]	; 0x4bb
}
 8000f44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f48:	200031d0 	.word	0x200031d0
 8000f4c:	20000054 	.word	0x20000054
 8000f50:	0800b570 	.word	0x0800b570
 8000f54:	0800b574 	.word	0x0800b574
 8000f58:	20000020 	.word	0x20000020
 8000f5c:	0800b578 	.word	0x0800b578
 8000f60:	20002fcc 	.word	0x20002fcc
 8000f64:	0036ee80 	.word	0x0036ee80
 8000f68:	20001aec 	.word	0x20001aec
 8000f6c:	20004ba4 	.word	0x20004ba4

08000f70 <updateHttpDataLength>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void updateHttpDataLength()
{
 8000f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f74:	af00      	add	r7, sp, #0
	char * tempdata = "";

	//tempdata = gstrGMSPayloadLIFO.au8PayloadStack[gstrGMSPayloadLIFO.u32Stacktop];
	tempdata = gsmPayload.data[gsmPayload.tail];
 8000f76:	4abb      	ldr	r2, [pc, #748]	; (8001264 <updateHttpDataLength+0x2f4>)
 8000f78:	6853      	ldr	r3, [r2, #4]
 8000f7a:	3302      	adds	r3, #2
 8000f7c:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]


	uint32_t payloadLength = strlen(tempdata);
 8000f80:	4640      	mov	r0, r8
 8000f82:	f7ff fd25 	bl	80009d0 <strlen>
 8000f86:	4604      	mov	r4, r0
	char buffer[payloadLength];
 8000f88:	1dc3      	adds	r3, r0, #7
 8000f8a:	f023 0307 	bic.w	r3, r3, #7
 8000f8e:	ebad 0d03 	sub.w	sp, sp, r3
 8000f92:	466e      	mov	r6, sp
	memset(buffer, 0x00, (payloadLength * sizeof(char))); /* Clear Response Buffer */
 8000f94:	4602      	mov	r2, r0
 8000f96:	2100      	movs	r1, #0
 8000f98:	4668      	mov	r0, sp
 8000f9a:	f008 ff5f 	bl	8009e5c <memset>
//		strcat(gau8GSM_MQTTPayload,"\"");
//		strcat(gau8GSM_MQTTPayload,"\r\n");
//	}
//	else
//	{
		if(payloadLength == 0 || payloadLength >= 1024)
 8000f9e:	1e62      	subs	r2, r4, #1
 8000fa0:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d86c      	bhi.n	8001082 <updateHttpDataLength+0x112>
		else
		{
			/* MQTT Commands payload length updated */
			/* Geo Location data */
		//	if(payloadLength < 179 && payloadLength >174)	// payload length 125 for lat long & utc only. 178 for all GPS data
			if(strstr((char *)tempdata, (char *)"Geo"))
 8000fa8:	49af      	ldr	r1, [pc, #700]	; (8001268 <updateHttpDataLength+0x2f8>)
 8000faa:	4640      	mov	r0, r8
 8000fac:	f009 f85c 	bl	800a068 <strstr>
 8000fb0:	2800      	cmp	r0, #0
 8000fb2:	f000 810a 	beq.w	80011ca <updateHttpDataLength+0x25a>
			{
				memset(gau8GSM_MQTTPayload, 0x00, ( sizeof(gau8GSM_MQTTPayload) * sizeof(char)));
 8000fb6:	4dad      	ldr	r5, [pc, #692]	; (800126c <updateHttpDataLength+0x2fc>)
 8000fb8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4628      	mov	r0, r5
 8000fc0:	f008 ff4c 	bl	8009e5c <memset>
				strcpy(gau8GSM_MQTTPayload,gau8GSM_ATCMPUB);
 8000fc4:	f8df a2dc 	ldr.w	sl, [pc, #732]	; 80012a4 <updateHttpDataLength+0x334>
 8000fc8:	f20a 41bc 	addw	r1, sl, #1212	; 0x4bc
 8000fcc:	4628      	mov	r0, r5
 8000fce:	f009 f843 	bl	800a058 <strcpy>
				strcat(gau8GSM_MQTTPayload,"\"");
 8000fd2:	4628      	mov	r0, r5
 8000fd4:	f7ff fcfc 	bl	80009d0 <strlen>
 8000fd8:	4ba5      	ldr	r3, [pc, #660]	; (8001270 <updateHttpDataLength+0x300>)
 8000fda:	f8b3 9000 	ldrh.w	r9, [r3]
 8000fde:	f825 9000 	strh.w	r9, [r5, r0]
				strcat(gau8GSM_MQTTPayload,gau8MQTT_PubTopicGeo);
 8000fe2:	f50a 6199 	add.w	r1, sl, #1224	; 0x4c8
 8000fe6:	4628      	mov	r0, r5
 8000fe8:	f009 f81a 	bl	800a020 <strcat>
				strcat(gau8GSM_MQTTPayload,"\",");
 8000fec:	4628      	mov	r0, r5
 8000fee:	f7ff fcef 	bl	80009d0 <strlen>
 8000ff2:	182a      	adds	r2, r5, r0
 8000ff4:	4b9f      	ldr	r3, [pc, #636]	; (8001274 <updateHttpDataLength+0x304>)
 8000ff6:	8819      	ldrh	r1, [r3, #0]
 8000ff8:	789b      	ldrb	r3, [r3, #2]
 8000ffa:	5229      	strh	r1, [r5, r0]
 8000ffc:	7093      	strb	r3, [r2, #2]
				strcat(gau8GSM_MQTTPayload,"1,0,");		// QOS & Retain
 8000ffe:	4628      	mov	r0, r5
 8001000:	f7ff fce6 	bl	80009d0 <strlen>
 8001004:	4603      	mov	r3, r0
 8001006:	1829      	adds	r1, r5, r0
 8001008:	4a9b      	ldr	r2, [pc, #620]	; (8001278 <updateHttpDataLength+0x308>)
 800100a:	6810      	ldr	r0, [r2, #0]
 800100c:	50e8      	str	r0, [r5, r3]
 800100e:	7913      	ldrb	r3, [r2, #4]
 8001010:	710b      	strb	r3, [r1, #4]
				strcat(gau8GSM_MQTTPayload,"\"");
 8001012:	4628      	mov	r0, r5
 8001014:	f7ff fcdc 	bl	80009d0 <strlen>
 8001018:	f825 9000 	strh.w	r9, [r5, r0]
				strcat(gau8GSM_MQTTPayload,(char *)tempdata);	//"Tor 2G MQTT TEST 0621"
 800101c:	4641      	mov	r1, r8
 800101e:	4628      	mov	r0, r5
 8001020:	f008 fffe 	bl	800a020 <strcat>
				strcat(gau8GSM_MQTTPayload,"\"");
 8001024:	4628      	mov	r0, r5
 8001026:	f7ff fcd3 	bl	80009d0 <strlen>
 800102a:	f825 9000 	strh.w	r9, [r5, r0]
				strcat(gau8GSM_MQTTPayload,"\r\n");
 800102e:	4628      	mov	r0, r5
 8001030:	f7ff fcce 	bl	80009d0 <strlen>
 8001034:	182a      	adds	r2, r5, r0
 8001036:	4b91      	ldr	r3, [pc, #580]	; (800127c <updateHttpDataLength+0x30c>)
 8001038:	8819      	ldrh	r1, [r3, #0]
 800103a:	789b      	ldrb	r3, [r3, #2]
 800103c:	5229      	strh	r1, [r5, r0]
 800103e:	7093      	strb	r3, [r2, #2]
				strcat(gau8GSM_MQTTPayload,"\r\n");
			}
		}

	/* Convert Integer to ASCII ( Decimal) */
	memset(gau8GSM_ATHTTPDATACOMMAND, 0x00, ( 30 * sizeof(char)));
 8001040:	4d8f      	ldr	r5, [pc, #572]	; (8001280 <updateHttpDataLength+0x310>)
 8001042:	221e      	movs	r2, #30
 8001044:	2100      	movs	r1, #0
 8001046:	4628      	mov	r0, r5
 8001048:	f008 ff08 	bl	8009e5c <memset>
	itoa(payloadLength,buffer,PAYLOAD_DATA_STRING_RADIX);
 800104c:	220a      	movs	r2, #10
 800104e:	4631      	mov	r1, r6
 8001050:	4620      	mov	r0, r4
 8001052:	f008 fee3 	bl	8009e1c <itoa>
	strcat(buffer,gu8GSMDataTimeout);
 8001056:	4630      	mov	r0, r6
 8001058:	f7ff fcba 	bl	80009d0 <strlen>
 800105c:	4602      	mov	r2, r0
 800105e:	1834      	adds	r4, r6, r0
 8001060:	4b88      	ldr	r3, [pc, #544]	; (8001284 <updateHttpDataLength+0x314>)
 8001062:	cb03      	ldmia	r3!, {r0, r1}
 8001064:	50b0      	str	r0, [r6, r2]
 8001066:	6061      	str	r1, [r4, #4]
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	8123      	strh	r3, [r4, #8]
	strcat((char *)gau8GSM_ATHTTPDATACOMMAND,(char *)gau8GSM_ATHTTPDATA);
 800106c:	4986      	ldr	r1, [pc, #536]	; (8001288 <updateHttpDataLength+0x318>)
 800106e:	4628      	mov	r0, r5
 8001070:	f008 ffd6 	bl	800a020 <strcat>
	strcat((char *)gau8GSM_ATHTTPDATACOMMAND,buffer);
 8001074:	4631      	mov	r1, r6
 8001076:	4628      	mov	r0, r5
 8001078:	f008 ffd2 	bl	800a020 <strcat>
//	memset(gau8GSM_ATHTTPDATACOMMAND, 0x00, ( 30 * sizeof(char)));
//	itoa(payloadLength,buffer,PAYLOAD_DATA_STRING_RADIX);
//	strcat(buffer,gu8GSMDataTimeout);
//	strcat((char *)gau8GSM_ATHTTPDATACOMMAND,(char *)gau8GSM_ATHTTPDATA);
//	strcat((char *)gau8GSM_ATHTTPDATACOMMAND,buffer);
}
 800107c:	46bd      	mov	sp, r7
 800107e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			memset(gau8GSM_MQTTPayload, 0x00, ( sizeof(gau8GSM_MQTTPayload) * sizeof(char)));
 8001082:	4d7a      	ldr	r5, [pc, #488]	; (800126c <updateHttpDataLength+0x2fc>)
 8001084:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001088:	2100      	movs	r1, #0
 800108a:	4628      	mov	r0, r5
 800108c:	f008 fee6 	bl	8009e5c <memset>
			strcpy(gau8GSM_MQTTPayload,gau8GSM_ATCMPUB);
 8001090:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80012a4 <updateHttpDataLength+0x334>
 8001094:	f209 41bc 	addw	r1, r9, #1212	; 0x4bc
 8001098:	4628      	mov	r0, r5
 800109a:	f008 ffdd 	bl	800a058 <strcpy>
			strcat(gau8GSM_MQTTPayload,"\"");
 800109e:	4628      	mov	r0, r5
 80010a0:	f7ff fc96 	bl	80009d0 <strlen>
 80010a4:	4b72      	ldr	r3, [pc, #456]	; (8001270 <updateHttpDataLength+0x300>)
 80010a6:	f8b3 8000 	ldrh.w	r8, [r3]
 80010aa:	f825 8000 	strh.w	r8, [r5, r0]
			strcat(gau8GSM_MQTTPayload,gau8MQTT_PubTopicGeo);
 80010ae:	f509 6199 	add.w	r1, r9, #1224	; 0x4c8
 80010b2:	4628      	mov	r0, r5
 80010b4:	f008 ffb4 	bl	800a020 <strcat>
			strcat(gau8GSM_MQTTPayload,"\",");
 80010b8:	4628      	mov	r0, r5
 80010ba:	f7ff fc89 	bl	80009d0 <strlen>
 80010be:	182a      	adds	r2, r5, r0
 80010c0:	4b6c      	ldr	r3, [pc, #432]	; (8001274 <updateHttpDataLength+0x304>)
 80010c2:	8819      	ldrh	r1, [r3, #0]
 80010c4:	789b      	ldrb	r3, [r3, #2]
 80010c6:	5229      	strh	r1, [r5, r0]
 80010c8:	7093      	strb	r3, [r2, #2]
			strcat(gau8GSM_MQTTPayload,"1,0,");		// QOS & Retain
 80010ca:	4628      	mov	r0, r5
 80010cc:	f7ff fc80 	bl	80009d0 <strlen>
 80010d0:	4603      	mov	r3, r0
 80010d2:	1829      	adds	r1, r5, r0
 80010d4:	4a68      	ldr	r2, [pc, #416]	; (8001278 <updateHttpDataLength+0x308>)
 80010d6:	6810      	ldr	r0, [r2, #0]
 80010d8:	50e8      	str	r0, [r5, r3]
 80010da:	7913      	ldrb	r3, [r2, #4]
 80010dc:	710b      	strb	r3, [r1, #4]
			strcat(gau8GSM_MQTTPayload,"\"");
 80010de:	4628      	mov	r0, r5
 80010e0:	f7ff fc76 	bl	80009d0 <strlen>
 80010e4:	f825 8000 	strh.w	r8, [r5, r0]
			strcat(gau8GSM_MQTTPayload,(char * )START_OF_FRAME);
 80010e8:	4628      	mov	r0, r5
 80010ea:	f7ff fc71 	bl	80009d0 <strlen>
 80010ee:	4b67      	ldr	r3, [pc, #412]	; (800128c <updateHttpDataLength+0x31c>)
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	522b      	strh	r3, [r5, r0]
			strcat(gau8GSM_MQTTPayload,(char * )",");
 80010f4:	4628      	mov	r0, r5
 80010f6:	f7ff fc6b 	bl	80009d0 <strlen>
 80010fa:	4b65      	ldr	r3, [pc, #404]	; (8001290 <updateHttpDataLength+0x320>)
 80010fc:	f8b3 8000 	ldrh.w	r8, [r3]
 8001100:	f825 8000 	strh.w	r8, [r5, r0]
			strcat(gau8GSM_MQTTPayload,(char * )dinfo);
 8001104:	4963      	ldr	r1, [pc, #396]	; (8001294 <updateHttpDataLength+0x324>)
 8001106:	4628      	mov	r0, r5
 8001108:	f008 ff8a 	bl	800a020 <strcat>
			strcat(gau8GSM_MQTTPayload,(char * )",");
 800110c:	4628      	mov	r0, r5
 800110e:	f7ff fc5f 	bl	80009d0 <strlen>
 8001112:	f825 8000 	strh.w	r8, [r5, r0]
			if(payloadLength == 0)
 8001116:	b9cc      	cbnz	r4, 800114c <updateHttpDataLength+0x1dc>
				strcat(gau8GSM_MQTTPayload,(char * )"Diagnostic, Data Corrupt,");
 8001118:	46a8      	mov	r8, r5
 800111a:	4628      	mov	r0, r5
 800111c:	f7ff fc58 	bl	80009d0 <strlen>
 8001120:	4686      	mov	lr, r0
 8001122:	eb05 0c00 	add.w	ip, r5, r0
 8001126:	4d5c      	ldr	r5, [pc, #368]	; (8001298 <updateHttpDataLength+0x328>)
 8001128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800112a:	f848 000e 	str.w	r0, [r8, lr]
 800112e:	f8cc 1004 	str.w	r1, [ip, #4]
 8001132:	f8cc 2008 	str.w	r2, [ip, #8]
 8001136:	f8cc 300c 	str.w	r3, [ip, #12]
 800113a:	cd03      	ldmia	r5!, {r0, r1}
 800113c:	f8cc 0010 	str.w	r0, [ip, #16]
 8001140:	f8cc 1014 	str.w	r1, [ip, #20]
 8001144:	882b      	ldrh	r3, [r5, #0]
 8001146:	f8ac 3018 	strh.w	r3, [ip, #24]
 800114a:	e027      	b.n	800119c <updateHttpDataLength+0x22c>
				strcat(gau8GSM_MQTTPayload,(char * )"Diagnostic, Data size more than 1024,");
 800114c:	4d47      	ldr	r5, [pc, #284]	; (800126c <updateHttpDataLength+0x2fc>)
 800114e:	4628      	mov	r0, r5
 8001150:	f7ff fc3e 	bl	80009d0 <strlen>
 8001154:	f8df e150 	ldr.w	lr, [pc, #336]	; 80012a8 <updateHttpDataLength+0x338>
 8001158:	4405      	add	r5, r0
 800115a:	f10e 0820 	add.w	r8, lr, #32
 800115e:	46f4      	mov	ip, lr
 8001160:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001164:	6028      	str	r0, [r5, #0]
 8001166:	6069      	str	r1, [r5, #4]
 8001168:	60aa      	str	r2, [r5, #8]
 800116a:	60eb      	str	r3, [r5, #12]
 800116c:	46e6      	mov	lr, ip
 800116e:	3510      	adds	r5, #16
 8001170:	45c4      	cmp	ip, r8
 8001172:	d1f4      	bne.n	800115e <updateHttpDataLength+0x1ee>
 8001174:	f8dc 0000 	ldr.w	r0, [ip]
 8001178:	6028      	str	r0, [r5, #0]
 800117a:	f8bc 3004 	ldrh.w	r3, [ip, #4]
 800117e:	80ab      	strh	r3, [r5, #4]
				free(gsmPayload.data[gsmPayload.tail]);
 8001180:	4d38      	ldr	r5, [pc, #224]	; (8001264 <updateHttpDataLength+0x2f4>)
 8001182:	686b      	ldr	r3, [r5, #4]
 8001184:	3302      	adds	r3, #2
 8001186:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800118a:	f008 fe51 	bl	8009e30 <free>
				gsmPayload.data[gsmPayload.tail] = NULL;
 800118e:	686b      	ldr	r3, [r5, #4]
 8001190:	1c9a      	adds	r2, r3, #2
 8001192:	2100      	movs	r1, #0
 8001194:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
				gsmPayload.tail++;
 8001198:	3301      	adds	r3, #1
 800119a:	606b      	str	r3, [r5, #4]
			strcat(gau8GSM_MQTTPayload,(char * )END_OF_FRAME);
 800119c:	4d33      	ldr	r5, [pc, #204]	; (800126c <updateHttpDataLength+0x2fc>)
 800119e:	4628      	mov	r0, r5
 80011a0:	f7ff fc16 	bl	80009d0 <strlen>
 80011a4:	4b3d      	ldr	r3, [pc, #244]	; (800129c <updateHttpDataLength+0x32c>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	522b      	strh	r3, [r5, r0]
			strcat(gau8GSM_MQTTPayload,"\"");
 80011aa:	4628      	mov	r0, r5
 80011ac:	f7ff fc10 	bl	80009d0 <strlen>
 80011b0:	4b2f      	ldr	r3, [pc, #188]	; (8001270 <updateHttpDataLength+0x300>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	522b      	strh	r3, [r5, r0]
			strcat(gau8GSM_MQTTPayload,"\r\n");
 80011b6:	4628      	mov	r0, r5
 80011b8:	f7ff fc0a 	bl	80009d0 <strlen>
 80011bc:	182a      	adds	r2, r5, r0
 80011be:	4b2f      	ldr	r3, [pc, #188]	; (800127c <updateHttpDataLength+0x30c>)
 80011c0:	8819      	ldrh	r1, [r3, #0]
 80011c2:	789b      	ldrb	r3, [r3, #2]
 80011c4:	5229      	strh	r1, [r5, r0]
 80011c6:	7093      	strb	r3, [r2, #2]
 80011c8:	e73a      	b.n	8001040 <updateHttpDataLength+0xd0>
			else if(strstr((char *)tempdata, (char *)"Diagnostic"))
 80011ca:	4935      	ldr	r1, [pc, #212]	; (80012a0 <updateHttpDataLength+0x330>)
 80011cc:	4640      	mov	r0, r8
 80011ce:	f008 ff4b 	bl	800a068 <strstr>
 80011d2:	2800      	cmp	r0, #0
 80011d4:	d06a      	beq.n	80012ac <updateHttpDataLength+0x33c>
				memset(gau8GSM_MQTTPayload, 0x00, ( sizeof(gau8GSM_MQTTPayload) * sizeof(char)));
 80011d6:	4d25      	ldr	r5, [pc, #148]	; (800126c <updateHttpDataLength+0x2fc>)
 80011d8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80011dc:	2100      	movs	r1, #0
 80011de:	4628      	mov	r0, r5
 80011e0:	f008 fe3c 	bl	8009e5c <memset>
				strcpy(gau8GSM_MQTTPayload,gau8GSM_ATCMPUB);
 80011e4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80012a4 <updateHttpDataLength+0x334>
 80011e8:	f20a 41bc 	addw	r1, sl, #1212	; 0x4bc
 80011ec:	4628      	mov	r0, r5
 80011ee:	f008 ff33 	bl	800a058 <strcpy>
				strcat(gau8GSM_MQTTPayload,"\"");
 80011f2:	4628      	mov	r0, r5
 80011f4:	f7ff fbec 	bl	80009d0 <strlen>
 80011f8:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <updateHttpDataLength+0x300>)
 80011fa:	f8b3 9000 	ldrh.w	r9, [r3]
 80011fe:	f825 9000 	strh.w	r9, [r5, r0]
				strcat(gau8GSM_MQTTPayload,gau8MQTT_PubTopicDiagnostic);
 8001202:	f20a 41dc 	addw	r1, sl, #1244	; 0x4dc
 8001206:	4628      	mov	r0, r5
 8001208:	f008 ff0a 	bl	800a020 <strcat>
				strcat(gau8GSM_MQTTPayload,"\",");
 800120c:	4628      	mov	r0, r5
 800120e:	f7ff fbdf 	bl	80009d0 <strlen>
 8001212:	182a      	adds	r2, r5, r0
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <updateHttpDataLength+0x304>)
 8001216:	8819      	ldrh	r1, [r3, #0]
 8001218:	789b      	ldrb	r3, [r3, #2]
 800121a:	5229      	strh	r1, [r5, r0]
 800121c:	7093      	strb	r3, [r2, #2]
				strcat(gau8GSM_MQTTPayload,"1,0,");		// QOS & Retain
 800121e:	4628      	mov	r0, r5
 8001220:	f7ff fbd6 	bl	80009d0 <strlen>
 8001224:	4603      	mov	r3, r0
 8001226:	1829      	adds	r1, r5, r0
 8001228:	4a13      	ldr	r2, [pc, #76]	; (8001278 <updateHttpDataLength+0x308>)
 800122a:	6810      	ldr	r0, [r2, #0]
 800122c:	50e8      	str	r0, [r5, r3]
 800122e:	7913      	ldrb	r3, [r2, #4]
 8001230:	710b      	strb	r3, [r1, #4]
				strcat(gau8GSM_MQTTPayload,"\"");
 8001232:	4628      	mov	r0, r5
 8001234:	f7ff fbcc 	bl	80009d0 <strlen>
 8001238:	f825 9000 	strh.w	r9, [r5, r0]
				strcat(gau8GSM_MQTTPayload,(char *)tempdata);	//"Tor 2G MQTT TEST 0621"
 800123c:	4641      	mov	r1, r8
 800123e:	4628      	mov	r0, r5
 8001240:	f008 feee 	bl	800a020 <strcat>
				strcat(gau8GSM_MQTTPayload,"\"");
 8001244:	4628      	mov	r0, r5
 8001246:	f7ff fbc3 	bl	80009d0 <strlen>
 800124a:	f825 9000 	strh.w	r9, [r5, r0]
				strcat(gau8GSM_MQTTPayload,"\r\n");
 800124e:	4628      	mov	r0, r5
 8001250:	f7ff fbbe 	bl	80009d0 <strlen>
 8001254:	182a      	adds	r2, r5, r0
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <updateHttpDataLength+0x30c>)
 8001258:	8819      	ldrh	r1, [r3, #0]
 800125a:	789b      	ldrb	r3, [r3, #2]
 800125c:	5229      	strh	r1, [r5, r0]
 800125e:	7093      	strb	r3, [r2, #2]
 8001260:	e6ee      	b.n	8001040 <updateHttpDataLength+0xd0>
 8001262:	bf00      	nop
 8001264:	20004340 	.word	0x20004340
 8001268:	0800b5d4 	.word	0x0800b5d4
 800126c:	20001af4 	.word	0x20001af4
 8001270:	0800b570 	.word	0x0800b570
 8001274:	0800b57c 	.word	0x0800b57c
 8001278:	0800b580 	.word	0x0800b580
 800127c:	0800b574 	.word	0x0800b574
 8001280:	200020d0 	.word	0x200020d0
 8001284:	0800b450 	.word	0x0800b450
 8001288:	20000564 	.word	0x20000564
 800128c:	0800b588 	.word	0x0800b588
 8001290:	0800b6b4 	.word	0x0800b6b4
 8001294:	20000020 	.word	0x20000020
 8001298:	0800b58c 	.word	0x0800b58c
 800129c:	0800b5d0 	.word	0x0800b5d0
 80012a0:	0800b5d8 	.word	0x0800b5d8
 80012a4:	20000054 	.word	0x20000054
 80012a8:	0800b5a8 	.word	0x0800b5a8
				memset(gau8GSM_MQTTPayload, 0x00, ( sizeof(gau8GSM_MQTTPayload) * sizeof(char)));
 80012ac:	4d22      	ldr	r5, [pc, #136]	; (8001338 <updateHttpDataLength+0x3c8>)
 80012ae:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80012b2:	2100      	movs	r1, #0
 80012b4:	4628      	mov	r0, r5
 80012b6:	f008 fdd1 	bl	8009e5c <memset>
				strcpy(gau8GSM_MQTTPayload,gau8GSM_ATCMPUB);
 80012ba:	f8df a090 	ldr.w	sl, [pc, #144]	; 800134c <updateHttpDataLength+0x3dc>
 80012be:	f20a 41bc 	addw	r1, sl, #1212	; 0x4bc
 80012c2:	4628      	mov	r0, r5
 80012c4:	f008 fec8 	bl	800a058 <strcpy>
				strcat(gau8GSM_MQTTPayload,"\"");
 80012c8:	4628      	mov	r0, r5
 80012ca:	f7ff fb81 	bl	80009d0 <strlen>
 80012ce:	4b1b      	ldr	r3, [pc, #108]	; (800133c <updateHttpDataLength+0x3cc>)
 80012d0:	f8b3 9000 	ldrh.w	r9, [r3]
 80012d4:	f825 9000 	strh.w	r9, [r5, r0]
				strcat(gau8GSM_MQTTPayload,gau8MQTT_PubTopicPayload);
 80012d8:	f50a 619f 	add.w	r1, sl, #1272	; 0x4f8
 80012dc:	4628      	mov	r0, r5
 80012de:	f008 fe9f 	bl	800a020 <strcat>
				strcat(gau8GSM_MQTTPayload,"\",");
 80012e2:	4628      	mov	r0, r5
 80012e4:	f7ff fb74 	bl	80009d0 <strlen>
 80012e8:	182a      	adds	r2, r5, r0
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <updateHttpDataLength+0x3d0>)
 80012ec:	8819      	ldrh	r1, [r3, #0]
 80012ee:	789b      	ldrb	r3, [r3, #2]
 80012f0:	5229      	strh	r1, [r5, r0]
 80012f2:	7093      	strb	r3, [r2, #2]
				strcat(gau8GSM_MQTTPayload,"1,0,");		// QOS & Retain
 80012f4:	4628      	mov	r0, r5
 80012f6:	f7ff fb6b 	bl	80009d0 <strlen>
 80012fa:	4603      	mov	r3, r0
 80012fc:	1829      	adds	r1, r5, r0
 80012fe:	4a11      	ldr	r2, [pc, #68]	; (8001344 <updateHttpDataLength+0x3d4>)
 8001300:	6810      	ldr	r0, [r2, #0]
 8001302:	50e8      	str	r0, [r5, r3]
 8001304:	7913      	ldrb	r3, [r2, #4]
 8001306:	710b      	strb	r3, [r1, #4]
				strcat(gau8GSM_MQTTPayload,"\"");
 8001308:	4628      	mov	r0, r5
 800130a:	f7ff fb61 	bl	80009d0 <strlen>
 800130e:	f825 9000 	strh.w	r9, [r5, r0]
				strcat(gau8GSM_MQTTPayload,(char *)tempdata);	//"Tor 2G MQTT TEST 0621"
 8001312:	4641      	mov	r1, r8
 8001314:	4628      	mov	r0, r5
 8001316:	f008 fe83 	bl	800a020 <strcat>
				strcat(gau8GSM_MQTTPayload,"\"");
 800131a:	4628      	mov	r0, r5
 800131c:	f7ff fb58 	bl	80009d0 <strlen>
 8001320:	f825 9000 	strh.w	r9, [r5, r0]
				strcat(gau8GSM_MQTTPayload,"\r\n");
 8001324:	4628      	mov	r0, r5
 8001326:	f7ff fb53 	bl	80009d0 <strlen>
 800132a:	182a      	adds	r2, r5, r0
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <updateHttpDataLength+0x3d8>)
 800132e:	8819      	ldrh	r1, [r3, #0]
 8001330:	789b      	ldrb	r3, [r3, #2]
 8001332:	5229      	strh	r1, [r5, r0]
 8001334:	7093      	strb	r3, [r2, #2]
 8001336:	e683      	b.n	8001040 <updateHttpDataLength+0xd0>
 8001338:	20001af4 	.word	0x20001af4
 800133c:	0800b570 	.word	0x0800b570
 8001340:	0800b57c 	.word	0x0800b57c
 8001344:	0800b580 	.word	0x0800b580
 8001348:	0800b574 	.word	0x0800b574
 800134c:	20000054 	.word	0x20000054

08001350 <restoreHTTPURLforData>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      31-03-2020			Initial Definitions
******************************************************************************/
void restoreHTTPURLforData(void)
{
 8001350:	b570      	push	{r4, r5, r6, lr}
	strcpy((char *)gau8GSM_ATURL,(char *)gau8GSM_ATHTTPPARAURL);
 8001352:	4d10      	ldr	r5, [pc, #64]	; (8001394 <restoreHTTPURLforData+0x44>)
 8001354:	f105 04b4 	add.w	r4, r5, #180	; 0xb4
 8001358:	f505 7144 	add.w	r1, r5, #784	; 0x310
 800135c:	4620      	mov	r0, r4
 800135e:	f008 fe7b 	bl	800a058 <strcpy>
	strcat((char *)gau8GSM_ATURL,(char *)"\"");
 8001362:	4620      	mov	r0, r4
 8001364:	f7ff fb34 	bl	80009d0 <strlen>
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <restoreHTTPURLforData+0x48>)
 800136a:	881e      	ldrh	r6, [r3, #0]
 800136c:	5226      	strh	r6, [r4, r0]
	strcat((char *)gau8GSM_ATURL,(char *)gau8GSM_url);
 800136e:	f505 716a 	add.w	r1, r5, #936	; 0x3a8
 8001372:	4620      	mov	r0, r4
 8001374:	f008 fe54 	bl	800a020 <strcat>
	strcat((char *)gau8GSM_ATURL,(char *)"\"");
 8001378:	4620      	mov	r0, r4
 800137a:	f7ff fb29 	bl	80009d0 <strlen>
 800137e:	5226      	strh	r6, [r4, r0]
	strcat((char *)gau8GSM_ATURL,"\r\n");
 8001380:	4620      	mov	r0, r4
 8001382:	f7ff fb25 	bl	80009d0 <strlen>
 8001386:	1822      	adds	r2, r4, r0
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <restoreHTTPURLforData+0x4c>)
 800138a:	8819      	ldrh	r1, [r3, #0]
 800138c:	789b      	ldrb	r3, [r3, #2]
 800138e:	5221      	strh	r1, [r4, r0]
 8001390:	7093      	strb	r3, [r2, #2]

}
 8001392:	bd70      	pop	{r4, r5, r6, pc}
 8001394:	20000054 	.word	0x20000054
 8001398:	0800b570 	.word	0x0800b570
 800139c:	0800b574 	.word	0x0800b574

080013a0 <syncrtcwithNetworkTime>:
uint32_t gu32Date = 0;
uint32_t gu32Hours = 0;
uint32_t gu32Minutes = 0;
uint32_t gu32Seconds = 0;
void syncrtcwithNetworkTime(void)
{
 80013a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(gu32TimeSyncFlag == 1)
 80013a2:	4b45      	ldr	r3, [pc, #276]	; (80014b8 <syncrtcwithNetworkTime+0x118>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	f000 8085 	beq.w	80014b6 <syncrtcwithNetworkTime+0x116>
		return;

	gu32Year = (((gau8GSM_TimeStamp[0]-'0') * 10) + (gau8GSM_TimeStamp[1]-'0'));
 80013ac:	4b43      	ldr	r3, [pc, #268]	; (80014bc <syncrtcwithNetworkTime+0x11c>)
 80013ae:	f893 0530 	ldrb.w	r0, [r3, #1328]	; 0x530
 80013b2:	3830      	subs	r0, #48	; 0x30
 80013b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80013b8:	f893 2531 	ldrb.w	r2, [r3, #1329]	; 0x531
 80013bc:	3a30      	subs	r2, #48	; 0x30
 80013be:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80013c2:	4c3f      	ldr	r4, [pc, #252]	; (80014c0 <syncrtcwithNetworkTime+0x120>)
 80013c4:	f8c4 0604 	str.w	r0, [r4, #1540]	; 0x604
	gu32Month = (((gau8GSM_TimeStamp[3]-'0') * 10) + (gau8GSM_TimeStamp[4]-'0'));
 80013c8:	f893 2533 	ldrb.w	r2, [r3, #1331]	; 0x533
 80013cc:	3a30      	subs	r2, #48	; 0x30
 80013ce:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80013d2:	f893 1534 	ldrb.w	r1, [r3, #1332]	; 0x534
 80013d6:	3930      	subs	r1, #48	; 0x30
 80013d8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80013dc:	f8c4 2608 	str.w	r2, [r4, #1544]	; 0x608
	gu32Date = (((gau8GSM_TimeStamp[6]-'0') * 10) + (gau8GSM_TimeStamp[7]-'0'));
 80013e0:	f893 2536 	ldrb.w	r2, [r3, #1334]	; 0x536
 80013e4:	3a30      	subs	r2, #48	; 0x30
 80013e6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80013ea:	f893 1537 	ldrb.w	r1, [r3, #1335]	; 0x537
 80013ee:	3930      	subs	r1, #48	; 0x30
 80013f0:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80013f4:	f8c4 260c 	str.w	r2, [r4, #1548]	; 0x60c

	gu32Hours = (((gau8GSM_TimeStamp[9]-'0') * 10) + (gau8GSM_TimeStamp[10]-'0'));
 80013f8:	f893 2539 	ldrb.w	r2, [r3, #1337]	; 0x539
 80013fc:	3a30      	subs	r2, #48	; 0x30
 80013fe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001402:	f893 153a 	ldrb.w	r1, [r3, #1338]	; 0x53a
 8001406:	3930      	subs	r1, #48	; 0x30
 8001408:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800140c:	f8c4 2610 	str.w	r2, [r4, #1552]	; 0x610
	gu32Minutes = (((gau8GSM_TimeStamp[12]-'0') * 10) + (gau8GSM_TimeStamp[13]-'0'));
 8001410:	f893 253c 	ldrb.w	r2, [r3, #1340]	; 0x53c
 8001414:	3a30      	subs	r2, #48	; 0x30
 8001416:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800141a:	f893 153d 	ldrb.w	r1, [r3, #1341]	; 0x53d
 800141e:	3930      	subs	r1, #48	; 0x30
 8001420:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8001424:	f8c4 2614 	str.w	r2, [r4, #1556]	; 0x614
	gu32Seconds = (((gau8GSM_TimeStamp[15]-'0') * 10) + (gau8GSM_TimeStamp[16]-'0'));
 8001428:	f893 253f 	ldrb.w	r2, [r3, #1343]	; 0x53f
 800142c:	3a30      	subs	r2, #48	; 0x30
 800142e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001432:	f893 3540 	ldrb.w	r3, [r3, #1344]	; 0x540
 8001436:	3b30      	subs	r3, #48	; 0x30
 8001438:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800143c:	f8c4 2618 	str.w	r2, [r4, #1560]	; 0x618

	SDate1.Year = DecimalToBCD(gu32Year);
 8001440:	f003 f832 	bl	80044a8 <DecimalToBCD>
 8001444:	4d1f      	ldr	r5, [pc, #124]	; (80014c4 <syncrtcwithNetworkTime+0x124>)
 8001446:	70e8      	strb	r0, [r5, #3]
	SDate1.Month = DecimalToBCD(gu32Month);
 8001448:	f8d4 0608 	ldr.w	r0, [r4, #1544]	; 0x608
 800144c:	f003 f82c 	bl	80044a8 <DecimalToBCD>
 8001450:	7068      	strb	r0, [r5, #1]
	SDate1.Date = DecimalToBCD(gu32Date);
 8001452:	f8d4 060c 	ldr.w	r0, [r4, #1548]	; 0x60c
 8001456:	f003 f827 	bl	80044a8 <DecimalToBCD>
 800145a:	70a8      	strb	r0, [r5, #2]
	STime1.Hours = DecimalToBCD(gu32Hours);
 800145c:	f8d4 0610 	ldr.w	r0, [r4, #1552]	; 0x610
 8001460:	f003 f822 	bl	80044a8 <DecimalToBCD>
 8001464:	4e18      	ldr	r6, [pc, #96]	; (80014c8 <syncrtcwithNetworkTime+0x128>)
 8001466:	7030      	strb	r0, [r6, #0]
	STime1.Minutes = DecimalToBCD(gu32Minutes);
 8001468:	f8d4 0614 	ldr.w	r0, [r4, #1556]	; 0x614
 800146c:	f003 f81c 	bl	80044a8 <DecimalToBCD>
 8001470:	7070      	strb	r0, [r6, #1]
	STime1.Seconds = DecimalToBCD(gu32Seconds);
 8001472:	f8d4 0618 	ldr.w	r0, [r4, #1560]	; 0x618
 8001476:	f003 f817 	bl	80044a8 <DecimalToBCD>
 800147a:	70b0      	strb	r0, [r6, #2]

	/*Store Last Syncd date */
	//lastKnownSDate1 = SDate1 ;

	strTimeUpdate.u32RefTimeHH = gu32Hours;
 800147c:	4b13      	ldr	r3, [pc, #76]	; (80014cc <syncrtcwithNetworkTime+0x12c>)
 800147e:	f8d4 2610 	ldr.w	r2, [r4, #1552]	; 0x610
 8001482:	601a      	str	r2, [r3, #0]
	strTimeUpdate.u32RefTimeMin = gu32Minutes;
 8001484:	f8d4 2614 	ldr.w	r2, [r4, #1556]	; 0x614
 8001488:	605a      	str	r2, [r3, #4]
	strTimeUpdate.u32RefTimeSec = gu32Seconds;
 800148a:	f8d4 2618 	ldr.w	r2, [r4, #1560]	; 0x618
 800148e:	609a      	str	r2, [r3, #8]

	HAL_RTC_SetTime(&hrtc,&STime1,RTC_FORMAT_BCD);
 8001490:	4f0f      	ldr	r7, [pc, #60]	; (80014d0 <syncrtcwithNetworkTime+0x130>)
 8001492:	2201      	movs	r2, #1
 8001494:	4631      	mov	r1, r6
 8001496:	4638      	mov	r0, r7
 8001498:	f007 f884 	bl	80085a4 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc,&SDate1,RTC_FORMAT_BCD);
 800149c:	2201      	movs	r2, #1
 800149e:	4629      	mov	r1, r5
 80014a0:	4638      	mov	r0, r7
 80014a2:	f007 f9a1 	bl	80087e8 <HAL_RTC_SetDate>
	/* Update/ Set RTC Structure */
	//backupCurrentRTC();
	gu32TimeSyncFlag = 1;
 80014a6:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <syncrtcwithNetworkTime+0x118>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	601a      	str	r2, [r3, #0]
	gu32RTCTestFlag++;
 80014ac:	f8d4 361c 	ldr.w	r3, [r4, #1564]	; 0x61c
 80014b0:	4413      	add	r3, r2
 80014b2:	f8c4 361c 	str.w	r3, [r4, #1564]	; 0x61c
}
 80014b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014b8:	20002fac 	.word	0x20002fac
 80014bc:	20000054 	.word	0x20000054
 80014c0:	20001aec 	.word	0x20001aec
 80014c4:	20004418 	.word	0x20004418
 80014c8:	2000441c 	.word	0x2000441c
 80014cc:	20002f34 	.word	0x20002f34
 80014d0:	20004430 	.word	0x20004430

080014d4 <updateHTTPReadLength>:
 KloudQ Team      8-04-2020			Initial Definition
 Kloudq Team	  10-04-2020		Strcpy logic added
******************************************************************************/
#define FOTAFILECHUNKSIZEBYTES	(2000)
uint32_t updateHTTPReadLength(uint32_t fotaFileSizeBytes)
{
 80014d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if(fotaFileSizeBytes != 0)
 80014d6:	4603      	mov	r3, r0
 80014d8:	2800      	cmp	r0, #0
 80014da:	d04e      	beq.n	800157a <updateHTTPReadLength+0xa6>
	{
		/* Start of File */
		if(u32FOTAFileBaseAddress == 0)
 80014dc:	4a4c      	ldr	r2, [pc, #304]	; (8001610 <updateHTTPReadLength+0x13c>)
 80014de:	f8d2 2620 	ldr.w	r2, [r2, #1568]	; 0x620
 80014e2:	2a00      	cmp	r2, #0
 80014e4:	d04a      	beq.n	800157c <updateHTTPReadLength+0xa8>
			u32FotaFileRemainingBytes = (fotaFileSizeBytes % FOTAFILECHUNKSIZEBYTES);
			itoa(FOTAFILECHUNKSIZEBYTES,bufferChunkBytes,PAYLOAD_DATA_STRING_RADIX);
			itoa(u32FotaFileRemainingBytes,bufferRemBytes,PAYLOAD_DATA_STRING_RADIX);
		}

		strcpy(gau8GSM_ATHTTPREAD,(char *)"AT+HTTPREAD=");
 80014e6:	4d4b      	ldr	r5, [pc, #300]	; (8001614 <updateHTTPReadLength+0x140>)
 80014e8:	4b4b      	ldr	r3, [pc, #300]	; (8001618 <updateHTTPReadLength+0x144>)
 80014ea:	f205 545c 	addw	r4, r5, #1372	; 0x55c
 80014ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014f0:	c407      	stmia	r4!, {r0, r1, r2}
 80014f2:	7023      	strb	r3, [r4, #0]
		memset(buffer,0x00,sizeof(char) * sizeof(buffer));
 80014f4:	f505 62af 	add.w	r2, r5, #1400	; 0x578
 80014f8:	2300      	movs	r3, #0
 80014fa:	f8c5 3578 	str.w	r3, [r5, #1400]	; 0x578
 80014fe:	f8a5 357c 	strh.w	r3, [r5, #1404]	; 0x57c

		if(u32FOTAFileBaseAddress < u32FotaFileChunkCounter)
 8001502:	4b43      	ldr	r3, [pc, #268]	; (8001610 <updateHTTPReadLength+0x13c>)
 8001504:	f8d3 0620 	ldr.w	r0, [r3, #1568]	; 0x620
 8001508:	f8d3 3624 	ldr.w	r3, [r3, #1572]	; 0x624
 800150c:	4298      	cmp	r0, r3
 800150e:	d350      	bcc.n	80015b2 <updateHTTPReadLength+0xde>
			gsmInstance.u32FotaFileSizeBytes = FOTAFILECHUNKSIZEBYTES;
			return 2;
		}
		else
		{
			itoa(u32FotaFileChunkCounter * 2000,buffer,PAYLOAD_DATA_STRING_RADIX);
 8001510:	4d40      	ldr	r5, [pc, #256]	; (8001614 <updateHTTPReadLength+0x140>)
 8001512:	f505 66af 	add.w	r6, r5, #1400	; 0x578
 8001516:	220a      	movs	r2, #10
 8001518:	4631      	mov	r1, r6
 800151a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800151e:	fb00 f003 	mul.w	r0, r0, r3
 8001522:	f008 fc7b 	bl	8009e1c <itoa>
			strcat(gau8GSM_ATHTTPREAD,(char *)buffer);
 8001526:	f205 545c 	addw	r4, r5, #1372	; 0x55c
 800152a:	4631      	mov	r1, r6
 800152c:	4620      	mov	r0, r4
 800152e:	f008 fd77 	bl	800a020 <strcat>
			strcat(gau8GSM_ATHTTPREAD,(char *)",");
 8001532:	4620      	mov	r0, r4
 8001534:	f7ff fa4c 	bl	80009d0 <strlen>
 8001538:	4b38      	ldr	r3, [pc, #224]	; (800161c <updateHTTPReadLength+0x148>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	5223      	strh	r3, [r4, r0]
			strcat(gau8GSM_ATHTTPREAD,(char *)bufferRemBytes); /* Byte(s) Chunk to read*/
 800153e:	f205 5154 	addw	r1, r5, #1364	; 0x554
 8001542:	4620      	mov	r0, r4
 8001544:	f008 fd6c 	bl	800a020 <strcat>
			strcat(gau8GSM_ATHTTPREAD,(char *)"\r\n");
 8001548:	4620      	mov	r0, r4
 800154a:	f7ff fa41 	bl	80009d0 <strlen>
 800154e:	1822      	adds	r2, r4, r0
 8001550:	4b33      	ldr	r3, [pc, #204]	; (8001620 <updateHTTPReadLength+0x14c>)
 8001552:	8819      	ldrh	r1, [r3, #0]
 8001554:	789b      	ldrb	r3, [r3, #2]
 8001556:	5221      	strh	r1, [r4, r0]
 8001558:	7093      	strb	r3, [r2, #2]
			gsmInstance.u32FotaFileSizeBytes = u32FotaFileRemainingBytes;
 800155a:	4b2d      	ldr	r3, [pc, #180]	; (8001610 <updateHTTPReadLength+0x13c>)
 800155c:	f8d3 1628 	ldr.w	r1, [r3, #1576]	; 0x628
 8001560:	4a30      	ldr	r2, [pc, #192]	; (8001624 <updateHTTPReadLength+0x150>)
 8001562:	f8c2 1e30 	str.w	r1, [r2, #3632]	; 0xe30
			u32FOTAFileBaseAddress = 0;
 8001566:	2200      	movs	r2, #0
 8001568:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
			u32FotaFileChunkCounter = 0;
 800156c:	f8c3 2624 	str.w	r2, [r3, #1572]	; 0x624
			u32FotaFileRemainingBytes = 0;
 8001570:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628
			u32FotaFileReadComplete = 1;
 8001574:	2001      	movs	r0, #1
 8001576:	f8c3 062c 	str.w	r0, [r3, #1580]	; 0x62c
			return 1;
		}
	}
	else
		return 0;
}
 800157a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			u32FotaFileChunkCounter = (fotaFileSizeBytes / FOTAFILECHUNKSIZEBYTES);
 800157c:	4a2a      	ldr	r2, [pc, #168]	; (8001628 <updateHTTPReadLength+0x154>)
 800157e:	fba2 1200 	umull	r1, r2, r2, r0
 8001582:	09d2      	lsrs	r2, r2, #7
 8001584:	4c22      	ldr	r4, [pc, #136]	; (8001610 <updateHTTPReadLength+0x13c>)
 8001586:	f8c4 2624 	str.w	r2, [r4, #1572]	; 0x624
			u32FotaFileRemainingBytes = (fotaFileSizeBytes % FOTAFILECHUNKSIZEBYTES);
 800158a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800158e:	fb00 3312 	mls	r3, r0, r2, r3
 8001592:	f8c4 3628 	str.w	r3, [r4, #1576]	; 0x628
			itoa(FOTAFILECHUNKSIZEBYTES,bufferChunkBytes,PAYLOAD_DATA_STRING_RADIX);
 8001596:	4d1f      	ldr	r5, [pc, #124]	; (8001614 <updateHTTPReadLength+0x140>)
 8001598:	220a      	movs	r2, #10
 800159a:	f205 514c 	addw	r1, r5, #1356	; 0x54c
 800159e:	f008 fc3d 	bl	8009e1c <itoa>
			itoa(u32FotaFileRemainingBytes,bufferRemBytes,PAYLOAD_DATA_STRING_RADIX);
 80015a2:	220a      	movs	r2, #10
 80015a4:	f205 5154 	addw	r1, r5, #1364	; 0x554
 80015a8:	f8d4 0628 	ldr.w	r0, [r4, #1576]	; 0x628
 80015ac:	f008 fc36 	bl	8009e1c <itoa>
 80015b0:	e799      	b.n	80014e6 <updateHTTPReadLength+0x12>
			itoa((u32FOTAFileBaseAddress * FOTAFILECHUNKSIZEBYTES),buffer,PAYLOAD_DATA_STRING_RADIX);
 80015b2:	f44f 66fa 	mov.w	r6, #2000	; 0x7d0
 80015b6:	4617      	mov	r7, r2
 80015b8:	220a      	movs	r2, #10
 80015ba:	4639      	mov	r1, r7
 80015bc:	fb06 f000 	mul.w	r0, r6, r0
 80015c0:	f008 fc2c 	bl	8009e1c <itoa>
			strcat(gau8GSM_ATHTTPREAD,(char *)buffer);
 80015c4:	f205 545c 	addw	r4, r5, #1372	; 0x55c
 80015c8:	4639      	mov	r1, r7
 80015ca:	4620      	mov	r0, r4
 80015cc:	f008 fd28 	bl	800a020 <strcat>
			strcat(gau8GSM_ATHTTPREAD,(char *)",");
 80015d0:	4620      	mov	r0, r4
 80015d2:	f7ff f9fd 	bl	80009d0 <strlen>
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <updateHTTPReadLength+0x148>)
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	5223      	strh	r3, [r4, r0]
			strcat(gau8GSM_ATHTTPREAD,(char *)bufferChunkBytes); /* Byte(s) Chunk to read*/
 80015dc:	f205 514c 	addw	r1, r5, #1356	; 0x54c
 80015e0:	4620      	mov	r0, r4
 80015e2:	f008 fd1d 	bl	800a020 <strcat>
			strcat(gau8GSM_ATHTTPREAD,(char *)"\r\n");
 80015e6:	4620      	mov	r0, r4
 80015e8:	f7ff f9f2 	bl	80009d0 <strlen>
 80015ec:	1822      	adds	r2, r4, r0
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <updateHTTPReadLength+0x14c>)
 80015f0:	8819      	ldrh	r1, [r3, #0]
 80015f2:	789b      	ldrb	r3, [r3, #2]
 80015f4:	5221      	strh	r1, [r4, r0]
 80015f6:	7093      	strb	r3, [r2, #2]
			u32FOTAFileBaseAddress++;
 80015f8:	4a05      	ldr	r2, [pc, #20]	; (8001610 <updateHTTPReadLength+0x13c>)
 80015fa:	f8d2 3620 	ldr.w	r3, [r2, #1568]	; 0x620
 80015fe:	3301      	adds	r3, #1
 8001600:	f8c2 3620 	str.w	r3, [r2, #1568]	; 0x620
			gsmInstance.u32FotaFileSizeBytes = FOTAFILECHUNKSIZEBYTES;
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <updateHTTPReadLength+0x150>)
 8001606:	f8c3 6e30 	str.w	r6, [r3, #3632]	; 0xe30
			return 2;
 800160a:	2002      	movs	r0, #2
 800160c:	e7b5      	b.n	800157a <updateHTTPReadLength+0xa6>
 800160e:	bf00      	nop
 8001610:	20001aec 	.word	0x20001aec
 8001614:	20000054 	.word	0x20000054
 8001618:	0800b5ec 	.word	0x0800b5ec
 800161c:	0800b6b4 	.word	0x0800b6b4
 8001620:	0800b574 	.word	0x0800b574
 8001624:	200031d0 	.word	0x200031d0
 8001628:	10624dd3 	.word	0x10624dd3

0800162c <initHTTPURLforFOTA>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      31-03-2020			Initial Definitions
******************************************************************************/
void initHTTPURLforFOTA(void )
{
 800162c:	b538      	push	{r3, r4, r5, lr}
	strcpy((char *)gau8GSM_ATURL,(char *)gau8GSM_ATHTTPPARAURL);
 800162e:	4910      	ldr	r1, [pc, #64]	; (8001670 <initHTTPURLforFOTA+0x44>)
 8001630:	f101 04b4 	add.w	r4, r1, #180	; 0xb4
 8001634:	f501 7144 	add.w	r1, r1, #784	; 0x310
 8001638:	4620      	mov	r0, r4
 800163a:	f008 fd0d 	bl	800a058 <strcpy>
	strcat((char *)gau8GSM_ATURL,(char *)"\"");
 800163e:	4620      	mov	r0, r4
 8001640:	f7ff f9c6 	bl	80009d0 <strlen>
 8001644:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <initHTTPURLforFOTA+0x48>)
 8001646:	881d      	ldrh	r5, [r3, #0]
 8001648:	5225      	strh	r5, [r4, r0]
	strcat((char *)gau8GSM_ATURL,(char *)gau8FotaURL);
 800164a:	490b      	ldr	r1, [pc, #44]	; (8001678 <initHTTPURLforFOTA+0x4c>)
 800164c:	4620      	mov	r0, r4
 800164e:	f008 fce7 	bl	800a020 <strcat>
	strcat((char *)gau8GSM_ATURL,(char *)"\"");
 8001652:	4620      	mov	r0, r4
 8001654:	f7ff f9bc 	bl	80009d0 <strlen>
 8001658:	5225      	strh	r5, [r4, r0]
	strcat((char *)gau8GSM_ATURL,"\r\n");
 800165a:	4620      	mov	r0, r4
 800165c:	f7ff f9b8 	bl	80009d0 <strlen>
 8001660:	1822      	adds	r2, r4, r0
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <initHTTPURLforFOTA+0x50>)
 8001664:	8819      	ldrh	r1, [r3, #0]
 8001666:	789b      	ldrb	r3, [r3, #2]
 8001668:	5221      	strh	r1, [r4, r0]
 800166a:	7093      	strb	r3, [r2, #2]
}
 800166c:	bd38      	pop	{r3, r4, r5, pc}
 800166e:	bf00      	nop
 8001670:	20000054 	.word	0x20000054
 8001674:	0800b570 	.word	0x0800b570
 8001678:	20002150 	.word	0x20002150
 800167c:	0800b574 	.word	0x0800b574

08001680 <Diagnostic>:
//#elif(DATA_PROCESSING_METHOD == LIFO)
//			  pushDataToStack(&gstrGMSPayloadLIFO,(char *)getDiagDataString());
//#endif
//}
void Diagnostic(enmDiagnosticStatus DiagnosticStatus )
{
 8001680:	b508      	push	{r3, lr}
	enqueue(&gsmPayload,(char *)getDiagDataString(DiagnosticStatus));
 8001682:	f001 fdef 	bl	8003264 <getDiagDataString>
 8001686:	4601      	mov	r1, r0
 8001688:	4801      	ldr	r0, [pc, #4]	; (8001690 <Diagnostic+0x10>)
 800168a:	f001 feb5 	bl	80033f8 <enqueue>
}
 800168e:	bd08      	pop	{r3, pc}
 8001690:	20004340 	.word	0x20004340

08001694 <BootUpdateFailed>:

void BootUpdateFailed()
{
	u32FOTAFileBaseAddress = 0;
 8001694:	4a09      	ldr	r2, [pc, #36]	; (80016bc <BootUpdateFailed+0x28>)
 8001696:	2300      	movs	r3, #0
 8001698:	f8c2 3620 	str.w	r3, [r2, #1568]	; 0x620
	gu32FotaRquestFlag = FALSE;
 800169c:	6013      	str	r3, [r2, #0]
	u32MemoryWriteCycle = FALSE;
 800169e:	f8c2 36c8 	str.w	r3, [r2, #1736]	; 0x6c8
	gsmInstance.u8IncrementGsmState = FALSE;
 80016a2:	4907      	ldr	r1, [pc, #28]	; (80016c0 <BootUpdateFailed+0x2c>)
 80016a4:	f881 3e1c 	strb.w	r3, [r1, #3612]	; 0xe1c
	gu32AttemptFota = FALSE;
 80016a8:	f8c2 36cc 	str.w	r3, [r2, #1740]	; 0x6cc
	gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 80016ac:	2303      	movs	r3, #3
 80016ae:	f881 3e3e 	strb.w	r3, [r1, #3646]	; 0xe3e
//	gsmInstance.enmGSMCommand = enmGSMSTATE_ATHTTPDATACOMMAND;
	gsmInstance.enmGSMCommand = enmGSMSTATE_ATCMPUB;
 80016b2:	231d      	movs	r3, #29
 80016b4:	f881 3e3f 	strb.w	r3, [r1, #3647]	; 0xe3f
}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	20001aec 	.word	0x20001aec
 80016c0:	200031d0 	.word	0x200031d0

080016c4 <sendGSMCommand>:
{
 80016c4:	b570      	push	{r4, r5, r6, lr}
	switch (gsmInstance.enmGSMCommandResponseState)
 80016c6:	4b98      	ldr	r3, [pc, #608]	; (8001928 <sendGSMCommand+0x264>)
 80016c8:	f893 3e3c 	ldrb.w	r3, [r3, #3644]	; 0xe3c
 80016cc:	b12b      	cbz	r3, 80016da <sendGSMCommand+0x16>
 80016ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016d2:	2a01      	cmp	r2, #1
 80016d4:	f000 8082 	beq.w	80017dc <sendGSMCommand+0x118>
}
 80016d8:	bd70      	pop	{r4, r5, r6, pc}
			if(gsmInstance.enmGSMCommandState == enmGSM_CMDSEND)
 80016da:	4b93      	ldr	r3, [pc, #588]	; (8001928 <sendGSMCommand+0x264>)
 80016dc:	f893 3e3d 	ldrb.w	r3, [r3, #3645]	; 0xe3d
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d01b      	beq.n	800171e <sendGSMCommand+0x5a>
			else if(gsmInstance.enmGSMCommandState == enmGSM_CMDINPROCESS)
 80016e6:	4b90      	ldr	r3, [pc, #576]	; (8001928 <sendGSMCommand+0x264>)
 80016e8:	f893 3e3d 	ldrb.w	r3, [r3, #3645]	; 0xe3d
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d171      	bne.n	80017d6 <sendGSMCommand+0x112>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80016f2:	4b8e      	ldr	r3, [pc, #568]	; (800192c <sendGSMCommand+0x268>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80016fa:	d0ed      	beq.n	80016d8 <sendGSMCommand+0x14>
					if(u8LoopCounter < (u8CharacterCounter))
 80016fc:	4a8c      	ldr	r2, [pc, #560]	; (8001930 <sendGSMCommand+0x26c>)
 80016fe:	f8d2 36d0 	ldr.w	r3, [r2, #1744]	; 0x6d0
 8001702:	f8d2 26d8 	ldr.w	r2, [r2, #1752]	; 0x6d8
 8001706:	4293      	cmp	r3, r2
 8001708:	d23e      	bcs.n	8001788 <sendGSMCommand+0xc4>
						LL_USART_TransmitData8(USART1,command[u8LoopCounter++]);
 800170a:	4a89      	ldr	r2, [pc, #548]	; (8001930 <sendGSMCommand+0x26c>)
 800170c:	f8d2 16d4 	ldr.w	r1, [r2, #1748]	; 0x6d4
 8001710:	1c58      	adds	r0, r3, #1
 8001712:	f8c2 06d0 	str.w	r0, [r2, #1744]	; 0x6d0
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8001716:	5cca      	ldrb	r2, [r1, r3]
 8001718:	4b84      	ldr	r3, [pc, #528]	; (800192c <sendGSMCommand+0x268>)
 800171a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800171c:	e7dc      	b.n	80016d8 <sendGSMCommand+0x14>
				u8LoopCounter = 0;
 800171e:	4b84      	ldr	r3, [pc, #528]	; (8001930 <sendGSMCommand+0x26c>)
 8001720:	2200      	movs	r2, #0
 8001722:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
				if(gsmInstance.enmGSMCommand == enmGSMSTATE_SENDDATA)
 8001726:	4b80      	ldr	r3, [pc, #512]	; (8001928 <sendGSMCommand+0x264>)
 8001728:	f893 3e3f 	ldrb.w	r3, [r3, #3647]	; 0xe3f
 800172c:	2b1e      	cmp	r3, #30
 800172e:	d01c      	beq.n	800176a <sendGSMCommand+0xa6>
				else if(gsmInstance.enmGSMCommand == enmGSMSTATE_ATCMPUB)
 8001730:	2b1d      	cmp	r3, #29
 8001732:	d023      	beq.n	800177c <sendGSMCommand+0xb8>
					command = gsmStateTableArray[gsmInstance.enmGSMCommand].atCommand;
 8001734:	4a7f      	ldr	r2, [pc, #508]	; (8001934 <sendGSMCommand+0x270>)
 8001736:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800173a:	f8d3 2de8 	ldr.w	r2, [r3, #3560]	; 0xde8
 800173e:	4b7c      	ldr	r3, [pc, #496]	; (8001930 <sendGSMCommand+0x26c>)
 8001740:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4
				u8CharacterCounter = strlen((const char *)command);
 8001744:	4c7a      	ldr	r4, [pc, #488]	; (8001930 <sendGSMCommand+0x26c>)
 8001746:	f8d4 56d4 	ldr.w	r5, [r4, #1748]	; 0x6d4
 800174a:	4628      	mov	r0, r5
 800174c:	f7ff f940 	bl	80009d0 <strlen>
 8001750:	f8c4 06d8 	str.w	r0, [r4, #1752]	; 0x6d8
				LL_USART_TransmitData8(USART1,command[u8LoopCounter++]);
 8001754:	2301      	movs	r3, #1
 8001756:	f8c4 36d0 	str.w	r3, [r4, #1744]	; 0x6d0
  USARTx->TDR = Value;
 800175a:	782a      	ldrb	r2, [r5, #0]
 800175c:	4b73      	ldr	r3, [pc, #460]	; (800192c <sendGSMCommand+0x268>)
 800175e:	851a      	strh	r2, [r3, #40]	; 0x28
				gsmInstance.enmGSMCommandState = enmGSM_CMDINPROCESS;
 8001760:	4b71      	ldr	r3, [pc, #452]	; (8001928 <sendGSMCommand+0x264>)
 8001762:	2202      	movs	r2, #2
 8001764:	f883 2e3d 	strb.w	r2, [r3, #3645]	; 0xe3d
 8001768:	e7b6      	b.n	80016d8 <sendGSMCommand+0x14>
					command = gsmPayload.data[gsmPayload.tail];
 800176a:	4a73      	ldr	r2, [pc, #460]	; (8001938 <sendGSMCommand+0x274>)
 800176c:	6853      	ldr	r3, [r2, #4]
 800176e:	3302      	adds	r3, #2
 8001770:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001774:	4b6e      	ldr	r3, [pc, #440]	; (8001930 <sendGSMCommand+0x26c>)
 8001776:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4
 800177a:	e7e3      	b.n	8001744 <sendGSMCommand+0x80>
					command = gau8GSM_MQTTPayload;
 800177c:	4b6c      	ldr	r3, [pc, #432]	; (8001930 <sendGSMCommand+0x26c>)
 800177e:	f103 0208 	add.w	r2, r3, #8
 8001782:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4
 8001786:	e7dd      	b.n	8001744 <sendGSMCommand+0x80>
						u8LoopCounter = 0;
 8001788:	4b69      	ldr	r3, [pc, #420]	; (8001930 <sendGSMCommand+0x26c>)
 800178a:	2200      	movs	r2, #0
 800178c:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
						gu32GSMCharacterTimeout = FIVEHUNDRED_MS;
 8001790:	496a      	ldr	r1, [pc, #424]	; (800193c <sendGSMCommand+0x278>)
 8001792:	f242 7010 	movw	r0, #10000	; 0x2710
 8001796:	6008      	str	r0, [r1, #0]
						u8CharacterCounter = 0;
 8001798:	f8c3 26d8 	str.w	r2, [r3, #1752]	; 0x6d8
						gsmInstance.enmGSMCommandResponseState = enmGSM_CHKRESPONSE;
 800179c:	4a62      	ldr	r2, [pc, #392]	; (8001928 <sendGSMCommand+0x264>)
 800179e:	2301      	movs	r3, #1
 80017a0:	f882 3e3c 	strb.w	r3, [r2, #3644]	; 0xe3c
						gsmInstance.u32GSMResponseTimer = gsmStateTableArray[gsmInstance.enmGSMCommand].msTimeOut;
 80017a4:	f892 3e3f 	ldrb.w	r3, [r2, #3647]	; 0xe3f
 80017a8:	4962      	ldr	r1, [pc, #392]	; (8001934 <sendGSMCommand+0x270>)
 80017aa:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80017ae:	f8d1 1df0 	ldr.w	r1, [r1, #3568]	; 0xdf0
 80017b2:	f8c2 1e34 	str.w	r1, [r2, #3636]	; 0xe34
						if(gsmInstance.enmGSMCommand == enmGSMSTATE_FOTAHTTPACTION)
 80017b6:	2b29      	cmp	r3, #41	; 0x29
 80017b8:	d008      	beq.n	80017cc <sendGSMCommand+0x108>
							gu32FotaFileReadTimer = 0;
 80017ba:	4a61      	ldr	r2, [pc, #388]	; (8001940 <sendGSMCommand+0x27c>)
 80017bc:	2100      	movs	r1, #0
 80017be:	6011      	str	r1, [r2, #0]
						if(gsmInstance.enmGSMCommand == enmGSMSTATE_SENDSMS)
 80017c0:	2b22      	cmp	r3, #34	; 0x22
 80017c2:	d189      	bne.n	80016d8 <sendGSMCommand+0x14>
							u8GSMCharRcv=1;
 80017c4:	4b5f      	ldr	r3, [pc, #380]	; (8001944 <sendGSMCommand+0x280>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	e785      	b.n	80016d8 <sendGSMCommand+0x14>
							gu32FotaFileReadTimer = THREE_SEC;
 80017cc:	4a5c      	ldr	r2, [pc, #368]	; (8001940 <sendGSMCommand+0x27c>)
 80017ce:	f64e 2160 	movw	r1, #60000	; 0xea60
 80017d2:	6011      	str	r1, [r2, #0]
 80017d4:	e7f4      	b.n	80017c0 <sendGSMCommand+0xfc>
				initGSMSIM868();
 80017d6:	f7ff fab9 	bl	8000d4c <initGSMSIM868>
 80017da:	e77d      	b.n	80016d8 <sendGSMCommand+0x14>
			if((gu32GSMCharacterTimeout == 0) && (gsmInstance.u32GSMResponseTimer != 0) && (u8GSMCharRcv == 1) && (gu32FotaFileReadTimer == 0))
 80017dc:	4b57      	ldr	r3, [pc, #348]	; (800193c <sendGSMCommand+0x278>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	b93b      	cbnz	r3, 80017f2 <sendGSMCommand+0x12e>
 80017e2:	4b51      	ldr	r3, [pc, #324]	; (8001928 <sendGSMCommand+0x264>)
 80017e4:	f8d3 3e34 	ldr.w	r3, [r3, #3636]	; 0xe34
 80017e8:	b11b      	cbz	r3, 80017f2 <sendGSMCommand+0x12e>
 80017ea:	4b56      	ldr	r3, [pc, #344]	; (8001944 <sendGSMCommand+0x280>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d026      	beq.n	8001840 <sendGSMCommand+0x17c>
			else if(gsmInstance.u32GSMResponseTimer == 0)
 80017f2:	4b4d      	ldr	r3, [pc, #308]	; (8001928 <sendGSMCommand+0x264>)
 80017f4:	f8d3 3e34 	ldr.w	r3, [r3, #3636]	; 0xe34
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f47f af6d 	bne.w	80016d8 <sendGSMCommand+0x14>
				gsmInstance.u8gsmRetryCount--;
 80017fe:	4a4a      	ldr	r2, [pc, #296]	; (8001928 <sendGSMCommand+0x264>)
 8001800:	f892 3e18 	ldrb.w	r3, [r2, #3608]	; 0xe18
 8001804:	3b01      	subs	r3, #1
 8001806:	b2db      	uxtb	r3, r3
 8001808:	f882 3e18 	strb.w	r3, [r2, #3608]	; 0xe18
				if(gsmInstance.u8gsmRetryCount == 0)
 800180c:	2b00      	cmp	r3, #0
 800180e:	f040 840a 	bne.w	8002026 <sendGSMCommand+0x962>
					memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR, (GSM_RESPONSE_ARRAY_SIZE));
 8001812:	f202 4452 	addw	r4, r2, #1106	; 0x452
 8001816:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800181a:	2100      	movs	r1, #0
 800181c:	4620      	mov	r0, r4
 800181e:	f008 fb1d 	bl	8009e5c <memset>
					if(gsmInstance.enmcurrentTask == enmGSMTASK_UPLOADDATA)
 8001822:	f894 39ec 	ldrb.w	r3, [r4, #2540]	; 0x9ec
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b03      	cmp	r3, #3
 800182a:	f000 83f7 	beq.w	800201c <sendGSMCommand+0x958>
					initGSMSIM868();
 800182e:	f7ff fa8d 	bl	8000d4c <initGSMSIM868>
				gsmInstance.u32GSMResponseTimer = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	4a3c      	ldr	r2, [pc, #240]	; (8001928 <sendGSMCommand+0x264>)
 8001836:	f8c2 3e34 	str.w	r3, [r2, #3636]	; 0xe34
				u8GSMCharRcv = 0;
 800183a:	4a42      	ldr	r2, [pc, #264]	; (8001944 <sendGSMCommand+0x280>)
 800183c:	6013      	str	r3, [r2, #0]
}
 800183e:	e74b      	b.n	80016d8 <sendGSMCommand+0x14>
			if((gu32GSMCharacterTimeout == 0) && (gsmInstance.u32GSMResponseTimer != 0) && (u8GSMCharRcv == 1) && (gu32FotaFileReadTimer == 0))
 8001840:	4b3f      	ldr	r3, [pc, #252]	; (8001940 <sendGSMCommand+0x27c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1d4      	bne.n	80017f2 <sendGSMCommand+0x12e>
				const char *SOF = strstr((const char *)gsmInstance.as8GSM_Response_Buff, "$,");
 8001848:	493f      	ldr	r1, [pc, #252]	; (8001948 <sendGSMCommand+0x284>)
 800184a:	4840      	ldr	r0, [pc, #256]	; (800194c <sendGSMCommand+0x288>)
 800184c:	f008 fc0c 	bl	800a068 <strstr>
				if(SOF != NULL)
 8001850:	4604      	mov	r4, r0
 8001852:	b328      	cbz	r0, 80018a0 <sendGSMCommand+0x1dc>
					const char *EOF = strstr((const char *)gsmInstance.as8GSM_Response_Buff, ",@");
 8001854:	493e      	ldr	r1, [pc, #248]	; (8001950 <sendGSMCommand+0x28c>)
 8001856:	483d      	ldr	r0, [pc, #244]	; (800194c <sendGSMCommand+0x288>)
 8001858:	f008 fc06 	bl	800a068 <strstr>
					if(EOF != NULL)
 800185c:	4605      	mov	r5, r0
 800185e:	b1d0      	cbz	r0, 8001896 <sendGSMCommand+0x1d2>
						if(strstr((const char *)gsmInstance.as8GSM_Response_Buff,(const char *)dinfo) != NULL)
 8001860:	493c      	ldr	r1, [pc, #240]	; (8001954 <sendGSMCommand+0x290>)
 8001862:	483a      	ldr	r0, [pc, #232]	; (800194c <sendGSMCommand+0x288>)
 8001864:	f008 fc00 	bl	800a068 <strstr>
 8001868:	b180      	cbz	r0, 800188c <sendGSMCommand+0x1c8>
							const size_t mlen = EOF - SOF;
 800186a:	1b2d      	subs	r5, r5, r4
							memset(gau8SUBRequest,0x00,sizeof(gau8SUBRequest));
 800186c:	4e3a      	ldr	r6, [pc, #232]	; (8001958 <sendGSMCommand+0x294>)
 800186e:	2296      	movs	r2, #150	; 0x96
 8001870:	2100      	movs	r1, #0
 8001872:	4630      	mov	r0, r6
 8001874:	f008 faf2 	bl	8009e5c <memset>
							memcpy(gau8SUBRequest,SOF-1, (mlen+3));
 8001878:	1cea      	adds	r2, r5, #3
 800187a:	1e61      	subs	r1, r4, #1
 800187c:	4630      	mov	r0, r6
 800187e:	f008 fadf 	bl	8009e40 <memcpy>
							SUBTriggerFlag = TRUE;
 8001882:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <sendGSMCommand+0x26c>)
 8001884:	2201      	movs	r2, #1
 8001886:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc
 800188a:	e00d      	b.n	80018a8 <sendGSMCommand+0x1e4>
							SUBTriggerFlag = FALSE;
 800188c:	4b28      	ldr	r3, [pc, #160]	; (8001930 <sendGSMCommand+0x26c>)
 800188e:	2200      	movs	r2, #0
 8001890:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc
 8001894:	e008      	b.n	80018a8 <sendGSMCommand+0x1e4>
						SUBTriggerFlag = FALSE;
 8001896:	4b26      	ldr	r3, [pc, #152]	; (8001930 <sendGSMCommand+0x26c>)
 8001898:	2200      	movs	r2, #0
 800189a:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc
 800189e:	e003      	b.n	80018a8 <sendGSMCommand+0x1e4>
					SUBTriggerFlag = FALSE;
 80018a0:	4b23      	ldr	r3, [pc, #140]	; (8001930 <sendGSMCommand+0x26c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc
						,(const char *)gsmStateTableArray[gsmInstance.enmGSMCommand].atCommandResponse) != NULL)
 80018a8:	481f      	ldr	r0, [pc, #124]	; (8001928 <sendGSMCommand+0x264>)
 80018aa:	f890 4e3f 	ldrb.w	r4, [r0, #3647]	; 0xe3f
				if(strstr((const char *)gsmInstance.as8GSM_Response_Buff
 80018ae:	4b21      	ldr	r3, [pc, #132]	; (8001934 <sendGSMCommand+0x270>)
 80018b0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80018b4:	f8d3 1dec 	ldr.w	r1, [r3, #3564]	; 0xdec
 80018b8:	f200 4052 	addw	r0, r0, #1106	; 0x452
 80018bc:	f008 fbd4 	bl	800a068 <strstr>
 80018c0:	2800      	cmp	r0, #0
 80018c2:	f000 8399 	beq.w	8001ff8 <sendGSMCommand+0x934>
					switch(gsmInstance.enmGSMCommand)
 80018c6:	2c2c      	cmp	r4, #44	; 0x2c
 80018c8:	d84c      	bhi.n	8001964 <sendGSMCommand+0x2a0>
 80018ca:	e8df f014 	tbh	[pc, r4, lsl #1]
 80018ce:	0047      	.short	0x0047
 80018d0:	00da0071 	.word	0x00da0071
 80018d4:	00e400df 	.word	0x00e400df
 80018d8:	00ee00e9 	.word	0x00ee00e9
 80018dc:	00a10191 	.word	0x00a10191
 80018e0:	007600a6 	.word	0x007600a6
 80018e4:	00ab011b 	.word	0x00ab011b
 80018e8:	00b000b5 	.word	0x00b000b5
 80018ec:	00d500ba 	.word	0x00d500ba
 80018f0:	00fd00f3 	.word	0x00fd00f3
 80018f4:	01070102 	.word	0x01070102
 80018f8:	0111010c 	.word	0x0111010c
 80018fc:	01460116 	.word	0x01460116
 8001900:	0150014b 	.word	0x0150014b
 8001904:	015a0155 	.word	0x015a0155
 8001908:	01410167 	.word	0x01410167
 800190c:	00d0004b 	.word	0x00d0004b
 8001910:	01f801fd 	.word	0x01f801fd
 8001914:	0202004b 	.word	0x0202004b
 8001918:	0207004b 	.word	0x0207004b
 800191c:	0219013c 	.word	0x0219013c
 8001920:	0299021e 	.word	0x0299021e
 8001924:	036d0368 	.word	0x036d0368
 8001928:	200031d0 	.word	0x200031d0
 800192c:	40013800 	.word	0x40013800
 8001930:	20001aec 	.word	0x20001aec
 8001934:	20000054 	.word	0x20000054
 8001938:	20004340 	.word	0x20004340
 800193c:	20002fc0 	.word	0x20002fc0
 8001940:	20002fc8 	.word	0x20002fc8
 8001944:	20002354 	.word	0x20002354
 8001948:	0800b5fc 	.word	0x0800b5fc
 800194c:	20003622 	.word	0x20003622
 8001950:	0800b600 	.word	0x0800b600
 8001954:	20000020 	.word	0x20000020
 8001958:	200005d4 	.word	0x200005d4
							gsmInstance.u8IncrementGsmState = TRUE;
 800195c:	4bc0      	ldr	r3, [pc, #768]	; (8001c60 <sendGSMCommand+0x59c>)
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
					gsmInstance.u8GSM_Response_Character_Counter = 0;
 8001964:	4bbe      	ldr	r3, [pc, #760]	; (8001c60 <sendGSMCommand+0x59c>)
 8001966:	2200      	movs	r2, #0
 8001968:	f8c3 2e38 	str.w	r2, [r3, #3640]	; 0xe38
					gsmInstance.enmGSMCommandState = enmGSM_CMDSEND;
 800196c:	2101      	movs	r1, #1
 800196e:	f883 1e3d 	strb.w	r1, [r3, #3645]	; 0xe3d
					gsmInstance.enmGSMCommandResponseState = enmGSM_SENDCMD;
 8001972:	f883 2e3c 	strb.w	r2, [r3, #3644]	; 0xe3c
					gsmInstance.u8gsmRetryCount = GSM_MAX_RETRY;
 8001976:	2103      	movs	r1, #3
 8001978:	f883 1e18 	strb.w	r1, [r3, #3608]	; 0xe18
					gsmInstance.u32GSMResponseTimer = 0;
 800197c:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
					u8GSMCharRcv = 0;
 8001980:	49b8      	ldr	r1, [pc, #736]	; (8001c64 <sendGSMCommand+0x5a0>)
 8001982:	600a      	str	r2, [r1, #0]
					gsmInstance.u8GSM_Response_Character_Counter = 0;
 8001984:	f8c3 2e38 	str.w	r2, [r3, #3640]	; 0xe38
					if(gsmInstance.enmGSMCommand != enmGSMSTATE_READFILE)
 8001988:	f893 4e3f 	ldrb.w	r4, [r3, #3647]	; 0xe3f
 800198c:	2c2a      	cmp	r4, #42	; 0x2a
 800198e:	f040 8310 	bne.w	8001fb2 <sendGSMCommand+0x8ee>
					if(gsmInstance.u8IncrementGsmState == TRUE)
 8001992:	4bb3      	ldr	r3, [pc, #716]	; (8001c60 <sendGSMCommand+0x59c>)
 8001994:	f893 3e1c 	ldrb.w	r3, [r3, #3612]	; 0xe1c
 8001998:	2b01      	cmp	r3, #1
 800199a:	f47f ae9d 	bne.w	80016d8 <sendGSMCommand+0x14>
						gsmInstance.enmGSMCommand++;
 800199e:	4bb0      	ldr	r3, [pc, #704]	; (8001c60 <sendGSMCommand+0x59c>)
 80019a0:	3401      	adds	r4, #1
 80019a2:	f883 4e3f 	strb.w	r4, [r3, #3647]	; 0xe3f
						gsmInstance.u32GSMTimer = ONE_SEC;
 80019a6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80019aa:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
 80019ae:	e693      	b.n	80016d8 <sendGSMCommand+0x14>
							gsmInstance.u8IncrementGsmState = TRUE;
 80019b0:	4bab      	ldr	r3, [pc, #684]	; (8001c60 <sendGSMCommand+0x59c>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 80019b8:	e7d4      	b.n	8001964 <sendGSMCommand+0x2a0>
								char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff
 80019ba:	4cab      	ldr	r4, [pc, #684]	; (8001c68 <sendGSMCommand+0x5a4>)
 80019bc:	49ab      	ldr	r1, [pc, #684]	; (8001c6c <sendGSMCommand+0x5a8>)
 80019be:	4620      	mov	r0, r4
 80019c0:	f008 fb52 	bl	800a068 <strstr>
								memcpy(gsmInstance.agsmSignalStrength, &strLoc[6], strlen(strtok(strLoc,"\r")));
 80019c4:	1d85      	adds	r5, r0, #6
 80019c6:	49aa      	ldr	r1, [pc, #680]	; (8001c70 <sendGSMCommand+0x5ac>)
 80019c8:	f008 fb66 	bl	800a098 <strtok>
 80019cc:	f7ff f800 	bl	80009d0 <strlen>
 80019d0:	4602      	mov	r2, r0
 80019d2:	4629      	mov	r1, r5
 80019d4:	f5a4 706f 	sub.w	r0, r4, #956	; 0x3bc
 80019d8:	f008 fa32 	bl	8009e40 <memcpy>
								if(gsmInstance.enmcurrentTask == enmGSMTASK_ISALIVE)
 80019dc:	f894 39ec 	ldrb.w	r3, [r4, #2540]	; 0x9ec
 80019e0:	f2a4 4452 	subw	r4, r4, #1106	; 0x452
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b06      	cmp	r3, #6
 80019e8:	d004      	beq.n	80019f4 <sendGSMCommand+0x330>
									gsmInstance.u8IncrementGsmState = TRUE;
 80019ea:	4b9d      	ldr	r3, [pc, #628]	; (8001c60 <sendGSMCommand+0x59c>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
 80019f2:	e7b7      	b.n	8001964 <sendGSMCommand+0x2a0>
									gsmInstance.u32GSMTimer = ONE_SEC;
 80019f4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80019f8:	f8c4 2e20 	str.w	r2, [r4, #3616]	; 0xe20
									gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 80019fc:	2203      	movs	r2, #3
 80019fe:	f884 2e3e 	strb.w	r2, [r4, #3646]	; 0xe3e
									gsmInstance.enmGSMCommand = enmGSMSTATE_ATCMPUB;
 8001a02:	221d      	movs	r2, #29
 8001a04:	f884 2e3f 	strb.w	r2, [r4, #3647]	; 0xe3f
									gsmInstance.u8IncrementGsmState = FALSE;
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f884 2e1c 	strb.w	r2, [r4, #3612]	; 0xe1c
 8001a0e:	e7a9      	b.n	8001964 <sendGSMCommand+0x2a0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8001a10:	4b93      	ldr	r3, [pc, #588]	; (8001c60 <sendGSMCommand+0x59c>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8001a18:	e7a4      	b.n	8001964 <sendGSMCommand+0x2a0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8001a1a:	4b91      	ldr	r3, [pc, #580]	; (8001c60 <sendGSMCommand+0x59c>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8001a22:	e79f      	b.n	8001964 <sendGSMCommand+0x2a0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8001a24:	4b8e      	ldr	r3, [pc, #568]	; (8001c60 <sendGSMCommand+0x59c>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8001a2c:	e79a      	b.n	8001964 <sendGSMCommand+0x2a0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8001a2e:	4b8c      	ldr	r3, [pc, #560]	; (8001c60 <sendGSMCommand+0x59c>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8001a36:	e795      	b.n	8001964 <sendGSMCommand+0x2a0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8001a38:	4b89      	ldr	r3, [pc, #548]	; (8001c60 <sendGSMCommand+0x59c>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8001a40:	e790      	b.n	8001964 <sendGSMCommand+0x2a0>
								char * strLocIp = strstr((const char *)gsmInstance.as8GSM_Response_Buff
 8001a42:	4c89      	ldr	r4, [pc, #548]	; (8001c68 <sendGSMCommand+0x5a4>)
 8001a44:	498b      	ldr	r1, [pc, #556]	; (8001c74 <sendGSMCommand+0x5b0>)
 8001a46:	4620      	mov	r0, r4
 8001a48:	f008 fb0e 	bl	800a068 <strstr>
								memcpy(gsmInstance.agsmNetworkIP, &strLocIp[13], strlen(strtok(strLocIp,"\"")));
 8001a4c:	f100 050d 	add.w	r5, r0, #13
 8001a50:	4989      	ldr	r1, [pc, #548]	; (8001c78 <sendGSMCommand+0x5b4>)
 8001a52:	f008 fb21 	bl	800a098 <strtok>
 8001a56:	f7fe ffbb 	bl	80009d0 <strlen>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	4629      	mov	r1, r5
 8001a5e:	f2a4 30b2 	subw	r0, r4, #946	; 0x3b2
 8001a62:	f008 f9ed 	bl	8009e40 <memcpy>
								gsmInstance.u8IncrementGsmState = TRUE;
 8001a66:	2301      	movs	r3, #1
 8001a68:	f884 39ca 	strb.w	r3, [r4, #2506]	; 0x9ca
							break;
 8001a6c:	e77a      	b.n	8001964 <sendGSMCommand+0x2a0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8001a6e:	4b7c      	ldr	r3, [pc, #496]	; (8001c60 <sendGSMCommand+0x59c>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8001a76:	e775      	b.n	8001964 <sendGSMCommand+0x2a0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8001a78:	4b79      	ldr	r3, [pc, #484]	; (8001c60 <sendGSMCommand+0x59c>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8001a80:	e770      	b.n	8001964 <sendGSMCommand+0x2a0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8001a82:	4b77      	ldr	r3, [pc, #476]	; (8001c60 <sendGSMCommand+0x59c>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8001a8a:	e76b      	b.n	8001964 <sendGSMCommand+0x2a0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8001a8c:	4b74      	ldr	r3, [pc, #464]	; (8001c60 <sendGSMCommand+0x59c>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8001a94:	e766      	b.n	8001964 <sendGSMCommand+0x2a0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8001a96:	4b72      	ldr	r3, [pc, #456]	; (8001c60 <sendGSMCommand+0x59c>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8001a9e:	e761      	b.n	8001964 <sendGSMCommand+0x2a0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8001aa0:	4b6f      	ldr	r3, [pc, #444]	; (8001c60 <sendGSMCommand+0x59c>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8001aa8:	e75c      	b.n	8001964 <sendGSMCommand+0x2a0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8001aaa:	4b6d      	ldr	r3, [pc, #436]	; (8001c60 <sendGSMCommand+0x59c>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8001ab2:	e757      	b.n	8001964 <sendGSMCommand+0x2a0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8001ab4:	4b6a      	ldr	r3, [pc, #424]	; (8001c60 <sendGSMCommand+0x59c>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							unTelInfo.u8JBGaussGprsConnection = 1;
 8001abc:	4a6f      	ldr	r2, [pc, #444]	; (8001c7c <sendGSMCommand+0x5b8>)
 8001abe:	7893      	ldrb	r3, [r2, #2]
 8001ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac4:	7093      	strb	r3, [r2, #2]
							break;
 8001ac6:	e74d      	b.n	8001964 <sendGSMCommand+0x2a0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8001ac8:	4b65      	ldr	r3, [pc, #404]	; (8001c60 <sendGSMCommand+0x59c>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8001ad0:	e748      	b.n	8001964 <sendGSMCommand+0x2a0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8001ad2:	4b63      	ldr	r3, [pc, #396]	; (8001c60 <sendGSMCommand+0x59c>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8001ada:	e743      	b.n	8001964 <sendGSMCommand+0x2a0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8001adc:	4b60      	ldr	r3, [pc, #384]	; (8001c60 <sendGSMCommand+0x59c>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8001ae4:	e73e      	b.n	8001964 <sendGSMCommand+0x2a0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8001ae6:	4b5e      	ldr	r3, [pc, #376]	; (8001c60 <sendGSMCommand+0x59c>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8001aee:	e739      	b.n	8001964 <sendGSMCommand+0x2a0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8001af0:	4b5b      	ldr	r3, [pc, #364]	; (8001c60 <sendGSMCommand+0x59c>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8001af8:	e734      	b.n	8001964 <sendGSMCommand+0x2a0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8001afa:	4b59      	ldr	r3, [pc, #356]	; (8001c60 <sendGSMCommand+0x59c>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8001b02:	e72f      	b.n	8001964 <sendGSMCommand+0x2a0>
								char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff
 8001b04:	4e58      	ldr	r6, [pc, #352]	; (8001c68 <sendGSMCommand+0x5a4>)
 8001b06:	495e      	ldr	r1, [pc, #376]	; (8001c80 <sendGSMCommand+0x5bc>)
 8001b08:	4630      	mov	r0, r6
 8001b0a:	f008 faad 	bl	800a068 <strstr>
 8001b0e:	4604      	mov	r4, r0
								memset(gau8GSM_TimeStamp,0x00,(sizeof(char ) * strlen(gau8GSM_TimeStamp)));
 8001b10:	4d5c      	ldr	r5, [pc, #368]	; (8001c84 <sendGSMCommand+0x5c0>)
 8001b12:	4628      	mov	r0, r5
 8001b14:	f7fe ff5c 	bl	80009d0 <strlen>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4628      	mov	r0, r5
 8001b1e:	f008 f99d 	bl	8009e5c <memset>
								memcpy( gau8GSM_TimeStamp, &strLoc[8], strlen(strtok(&strLoc[8],"\0")));
 8001b22:	3408      	adds	r4, #8
 8001b24:	4958      	ldr	r1, [pc, #352]	; (8001c88 <sendGSMCommand+0x5c4>)
 8001b26:	4620      	mov	r0, r4
 8001b28:	f008 fab6 	bl	800a098 <strtok>
 8001b2c:	f7fe ff50 	bl	80009d0 <strlen>
 8001b30:	4602      	mov	r2, r0
 8001b32:	4621      	mov	r1, r4
 8001b34:	4628      	mov	r0, r5
 8001b36:	f008 f983 	bl	8009e40 <memcpy>
								syncrtcwithNetworkTime();
 8001b3a:	f7ff fc31 	bl	80013a0 <syncrtcwithNetworkTime>
								gsmInstance.u8IncrementGsmState = TRUE;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	f886 39ca 	strb.w	r3, [r6, #2506]	; 0x9ca
							break;
 8001b44:	e70e      	b.n	8001964 <sendGSMCommand+0x2a0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8001b46:	4b46      	ldr	r3, [pc, #280]	; (8001c60 <sendGSMCommand+0x59c>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8001b4e:	e709      	b.n	8001964 <sendGSMCommand+0x2a0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8001b50:	4b43      	ldr	r3, [pc, #268]	; (8001c60 <sendGSMCommand+0x59c>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8001b58:	e704      	b.n	8001964 <sendGSMCommand+0x2a0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8001b5a:	4b41      	ldr	r3, [pc, #260]	; (8001c60 <sendGSMCommand+0x59c>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8001b62:	e6ff      	b.n	8001964 <sendGSMCommand+0x2a0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8001b64:	4b3e      	ldr	r3, [pc, #248]	; (8001c60 <sendGSMCommand+0x59c>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8001b6c:	e6fa      	b.n	8001964 <sendGSMCommand+0x2a0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8001b6e:	4b3c      	ldr	r3, [pc, #240]	; (8001c60 <sendGSMCommand+0x59c>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8001b76:	e6f5      	b.n	8001964 <sendGSMCommand+0x2a0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8001b78:	4b39      	ldr	r3, [pc, #228]	; (8001c60 <sendGSMCommand+0x59c>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8001b80:	e6f0      	b.n	8001964 <sendGSMCommand+0x2a0>
								char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff,(const char *)":");
 8001b82:	213a      	movs	r1, #58	; 0x3a
 8001b84:	4838      	ldr	r0, [pc, #224]	; (8001c68 <sendGSMCommand+0x5a4>)
 8001b86:	f008 fa5a 	bl	800a03e <strchr>
								if(strLoc[4] == '0')	/* Subscribe successful */
 8001b8a:	7903      	ldrb	r3, [r0, #4]
 8001b8c:	2b30      	cmp	r3, #48	; 0x30
 8001b8e:	f47f aee9 	bne.w	8001964 <sendGSMCommand+0x2a0>
									gsmInstance.u8IncrementGsmState = TRUE;
 8001b92:	4b33      	ldr	r3, [pc, #204]	; (8001c60 <sendGSMCommand+0x59c>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
 8001b9a:	e6e3      	b.n	8001964 <sendGSMCommand+0x2a0>
								char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff
 8001b9c:	213a      	movs	r1, #58	; 0x3a
 8001b9e:	4832      	ldr	r0, [pc, #200]	; (8001c68 <sendGSMCommand+0x5a4>)
 8001ba0:	f008 fa4d 	bl	800a03e <strchr>
								char *strLoc2 = strstr((const char *)strLoc,(const char *)",");
 8001ba4:	212c      	movs	r1, #44	; 0x2c
 8001ba6:	f008 fa4a 	bl	800a03e <strchr>
								if(strLoc2[1] == '0') /* Packet succesfully published */
 8001baa:	7843      	ldrb	r3, [r0, #1]
 8001bac:	2b30      	cmp	r3, #48	; 0x30
 8001bae:	d00b      	beq.n	8001bc8 <sendGSMCommand+0x504>
									gsmInstance.enmGSMCommand = enmGSMSTATE_ATCMPUB;
 8001bb0:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <sendGSMCommand+0x59c>)
 8001bb2:	221d      	movs	r2, #29
 8001bb4:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
									gsmInstance.u8IncrementGsmState = FALSE;
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							gu8HttpPayloadFlag = 0;
 8001bbe:	4b33      	ldr	r3, [pc, #204]	; (8001c8c <sendGSMCommand+0x5c8>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 26dd 	strb.w	r2, [r3, #1757]	; 0x6dd
							break;
 8001bc6:	e6cd      	b.n	8001964 <sendGSMCommand+0x2a0>
										dequeue(&gsmPayload);
 8001bc8:	4831      	ldr	r0, [pc, #196]	; (8001c90 <sendGSMCommand+0x5cc>)
 8001bca:	f001 fc3b 	bl	8003444 <dequeue>
									gu8HttpPayloadFlag = 0;
 8001bce:	4c2f      	ldr	r4, [pc, #188]	; (8001c8c <sendGSMCommand+0x5c8>)
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f884 36dd 	strb.w	r3, [r4, #1757]	; 0x6dd
									gsmInstance.enmGSMCommand = enmGSMSTATE_ATCMPUB;
 8001bd6:	4822      	ldr	r0, [pc, #136]	; (8001c60 <sendGSMCommand+0x59c>)
 8001bd8:	221d      	movs	r2, #29
 8001bda:	f880 2e3f 	strb.w	r2, [r0, #3647]	; 0xe3f
									gsmInstance.u8IncrementGsmState = FALSE;
 8001bde:	f880 3e1c 	strb.w	r3, [r0, #3612]	; 0xe1c
									u8LastHttpResponseCode = atoi(gsmInstance.u32GSMHttpResponseCode);
 8001be2:	f200 404f 	addw	r0, r0, #1103	; 0x44f
 8001be6:	f008 f8d2 	bl	8009d8e <atoi>
 8001bea:	f8c4 06e0 	str.w	r0, [r4, #1760]	; 0x6e0
 8001bee:	e7e6      	b.n	8001bbe <sendGSMCommand+0x4fa>
								char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff
 8001bf0:	213a      	movs	r1, #58	; 0x3a
 8001bf2:	481d      	ldr	r0, [pc, #116]	; (8001c68 <sendGSMCommand+0x5a4>)
 8001bf4:	f008 fa23 	bl	800a03e <strchr>
								if(strLoc != NULL)
 8001bf8:	4605      	mov	r5, r0
 8001bfa:	b198      	cbz	r0, 8001c24 <sendGSMCommand+0x560>
									memset(gsmInstance.agpsLocationData,0x00, strlen(gsmInstance.agpsLocationData));
 8001bfc:	4c18      	ldr	r4, [pc, #96]	; (8001c60 <sendGSMCommand+0x59c>)
 8001bfe:	4620      	mov	r0, r4
 8001c00:	f7fe fee6 	bl	80009d0 <strlen>
 8001c04:	4602      	mov	r2, r0
 8001c06:	2100      	movs	r1, #0
 8001c08:	4620      	mov	r0, r4
 8001c0a:	f008 f927 	bl	8009e5c <memset>
									memcpy(gsmInstance.agpsLocationData, strLoc, strlen(strtok(strLoc,"\r\n")));
 8001c0e:	4921      	ldr	r1, [pc, #132]	; (8001c94 <sendGSMCommand+0x5d0>)
 8001c10:	4628      	mov	r0, r5
 8001c12:	f008 fa41 	bl	800a098 <strtok>
 8001c16:	f7fe fedb 	bl	80009d0 <strlen>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	4629      	mov	r1, r5
 8001c1e:	4620      	mov	r0, r4
 8001c20:	f008 f90e 	bl	8009e40 <memcpy>
								if(gu32ModuleInitComplete == 1)
 8001c24:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <sendGSMCommand+0x5c8>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d009      	beq.n	8001c40 <sendGSMCommand+0x57c>
								else if(gu32ModuleInitComplete == 0)
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f47f ae99 	bne.w	8001964 <sendGSMCommand+0x2a0>
									gsmInstance.u8IncrementGsmState = TRUE;
 8001c32:	2301      	movs	r3, #1
 8001c34:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <sendGSMCommand+0x59c>)
 8001c36:	f882 3e1c 	strb.w	r3, [r2, #3612]	; 0xe1c
									gu32ModuleInitComplete = 1;
 8001c3a:	4a14      	ldr	r2, [pc, #80]	; (8001c8c <sendGSMCommand+0x5c8>)
 8001c3c:	6053      	str	r3, [r2, #4]
 8001c3e:	e691      	b.n	8001964 <sendGSMCommand+0x2a0>
									if((gu32FotaRquestFlag == TRUE) && (isQueueEmpty(&gsmPayload) == 1))
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <sendGSMCommand+0x5c8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d027      	beq.n	8001c98 <sendGSMCommand+0x5d4>
										gsmInstance.enmGSMCommand = enmGSMSTATE_ATCSQ;
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <sendGSMCommand+0x59c>)
 8001c4a:	220a      	movs	r2, #10
 8001c4c:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
										gsmInstance.enmcurrentTask = enmGSMTASK_ISALIVE;
 8001c50:	2206      	movs	r2, #6
 8001c52:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
									gsmInstance.u8IncrementGsmState = FALSE;
 8001c56:	4b02      	ldr	r3, [pc, #8]	; (8001c60 <sendGSMCommand+0x59c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
 8001c5e:	e681      	b.n	8001964 <sendGSMCommand+0x2a0>
 8001c60:	200031d0 	.word	0x200031d0
 8001c64:	20002354 	.word	0x20002354
 8001c68:	20003622 	.word	0x20003622
 8001c6c:	0800b608 	.word	0x0800b608
 8001c70:	0800b610 	.word	0x0800b610
 8001c74:	0800b614 	.word	0x0800b614
 8001c78:	0800b570 	.word	0x0800b570
 8001c7c:	20004ba4 	.word	0x20004ba4
 8001c80:	0800b620 	.word	0x0800b620
 8001c84:	20000584 	.word	0x20000584
 8001c88:	0800b4c0 	.word	0x0800b4c0
 8001c8c:	20001aec 	.word	0x20001aec
 8001c90:	20004340 	.word	0x20004340
 8001c94:	0800b574 	.word	0x0800b574
									if((gu32FotaRquestFlag == TRUE) && (isQueueEmpty(&gsmPayload) == 1))
 8001c98:	48ca      	ldr	r0, [pc, #808]	; (8001fc4 <sendGSMCommand+0x900>)
 8001c9a:	f001 fc01 	bl	80034a0 <isQueueEmpty>
 8001c9e:	2801      	cmp	r0, #1
 8001ca0:	d1d2      	bne.n	8001c48 <sendGSMCommand+0x584>
										initHTTPURLforFOTA();
 8001ca2:	f7ff fcc3 	bl	800162c <initHTTPURLforFOTA>
										gsmInstance.enmGSMCommand = enmGSMSTATE_SETFOTAURL;
 8001ca6:	4bc8      	ldr	r3, [pc, #800]	; (8001fc8 <sendGSMCommand+0x904>)
 8001ca8:	2228      	movs	r2, #40	; 0x28
 8001caa:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
										gsmInstance.enmcurrentTask = enmGSMTASK_DOWNLOADFOTAFILE;
 8001cae:	2208      	movs	r2, #8
 8001cb0:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
										SUBTriggerFlag = FALSE;
 8001cb4:	4bc5      	ldr	r3, [pc, #788]	; (8001fcc <sendGSMCommand+0x908>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc
 8001cbc:	e7cb      	b.n	8001c56 <sendGSMCommand+0x592>
							gsmInstance.u8IncrementGsmState = TRUE;
 8001cbe:	4bc2      	ldr	r3, [pc, #776]	; (8001fc8 <sendGSMCommand+0x904>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8001cc6:	e64d      	b.n	8001964 <sendGSMCommand+0x2a0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8001cc8:	4bbf      	ldr	r3, [pc, #764]	; (8001fc8 <sendGSMCommand+0x904>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8001cd0:	e648      	b.n	8001964 <sendGSMCommand+0x2a0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8001cd2:	4bbd      	ldr	r3, [pc, #756]	; (8001fc8 <sendGSMCommand+0x904>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8001cda:	e643      	b.n	8001964 <sendGSMCommand+0x2a0>
							gsmInstance.enmcurrentTask = enmGSMTASK_SENDSMS;
 8001cdc:	4cba      	ldr	r4, [pc, #744]	; (8001fc8 <sendGSMCommand+0x904>)
 8001cde:	2305      	movs	r3, #5
 8001ce0:	f884 3e3e 	strb.w	r3, [r4, #3646]	; 0xe3e
							gsmInstance.enmGSMCommand = enmGSMSTATE_CMGF;
 8001ce4:	2320      	movs	r3, #32
 8001ce6:	f884 3e3f 	strb.w	r3, [r4, #3647]	; 0xe3f
							memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR, (GSM_RESPONSE_ARRAY_SIZE));
 8001cea:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001cee:	2100      	movs	r1, #0
 8001cf0:	f204 4052 	addw	r0, r4, #1106	; 0x452
 8001cf4:	f008 f8b2 	bl	8009e5c <memset>
							gsmInstance.u8IncrementGsmState = FALSE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f884 3e1c 	strb.w	r3, [r4, #3612]	; 0xe1c
							break;
 8001cfe:	e631      	b.n	8001964 <sendGSMCommand+0x2a0>
							gsmInstance.u8IncrementGsmState = TRUE;
 8001d00:	4bb1      	ldr	r3, [pc, #708]	; (8001fc8 <sendGSMCommand+0x904>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
							break;
 8001d08:	e62c      	b.n	8001964 <sendGSMCommand+0x2a0>
							char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff
 8001d0a:	49b1      	ldr	r1, [pc, #708]	; (8001fd0 <sendGSMCommand+0x90c>)
 8001d0c:	48b1      	ldr	r0, [pc, #708]	; (8001fd4 <sendGSMCommand+0x910>)
 8001d0e:	f008 f9ab 	bl	800a068 <strstr>
							if(strLoc != NULL)
 8001d12:	4605      	mov	r5, r0
 8001d14:	2800      	cmp	r0, #0
 8001d16:	d071      	beq.n	8001dfc <sendGSMCommand+0x738>
								memset(gu32FotaFileSizeinBytes,0x00, strlen(gu32FotaFileSizeinBytes));
 8001d18:	4caf      	ldr	r4, [pc, #700]	; (8001fd8 <sendGSMCommand+0x914>)
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	f7fe fe58 	bl	80009d0 <strlen>
 8001d20:	4602      	mov	r2, r0
 8001d22:	2100      	movs	r1, #0
 8001d24:	4620      	mov	r0, r4
 8001d26:	f008 f899 	bl	8009e5c <memset>
								memcpy(gu32FotaFileSizeinBytes, &strLoc[4], strlen(strtok(&strLoc[4],"\r\n")));
 8001d2a:	3504      	adds	r5, #4
 8001d2c:	49ab      	ldr	r1, [pc, #684]	; (8001fdc <sendGSMCommand+0x918>)
 8001d2e:	4628      	mov	r0, r5
 8001d30:	f008 f9b2 	bl	800a098 <strtok>
 8001d34:	f7fe fe4c 	bl	80009d0 <strlen>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	4629      	mov	r1, r5
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	f008 f87f 	bl	8009e40 <memcpy>
								u32FotaFileSizeInBytes = strlen(gu32FotaFileSizeinBytes);
 8001d42:	4620      	mov	r0, r4
 8001d44:	f7fe fe44 	bl	80009d0 <strlen>
 8001d48:	4ba0      	ldr	r3, [pc, #640]	; (8001fcc <sendGSMCommand+0x908>)
 8001d4a:	f8c3 06e4 	str.w	r0, [r3, #1764]	; 0x6e4
								gsmInstance.u32FotaFileSizeBytes = atoi(gu32FotaFileSizeinBytes);
 8001d4e:	4620      	mov	r0, r4
 8001d50:	f008 f81d 	bl	8009d8e <atoi>
 8001d54:	4a9c      	ldr	r2, [pc, #624]	; (8001fc8 <sendGSMCommand+0x904>)
 8001d56:	f8c2 0e30 	str.w	r0, [r2, #3632]	; 0xe30
								if(gsmInstance.u32FotaFileSizeBytes <= (61000))
 8001d5a:	f64e 6248 	movw	r2, #61000	; 0xee48
 8001d5e:	4290      	cmp	r0, r2
 8001d60:	d813      	bhi.n	8001d8a <sendGSMCommand+0x6c6>
									gu32AttemptFota = TRUE;
 8001d62:	2201      	movs	r2, #1
 8001d64:	4b99      	ldr	r3, [pc, #612]	; (8001fcc <sendGSMCommand+0x908>)
 8001d66:	f8c3 26cc 	str.w	r2, [r3, #1740]	; 0x6cc
									HAL_GPIO_WritePin(GPIOB, LED_COMM_Pin, GPIO_PIN_SET);
 8001d6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d6e:	489c      	ldr	r0, [pc, #624]	; (8001fe0 <sendGSMCommand+0x91c>)
 8001d70:	f004 f8ba 	bl	8005ee8 <HAL_GPIO_WritePin>
									if(gsmInstance.u32FotaFileSizeBytes != 0)
 8001d74:	4b94      	ldr	r3, [pc, #592]	; (8001fc8 <sendGSMCommand+0x904>)
 8001d76:	f8d3 0e30 	ldr.w	r0, [r3, #3632]	; 0xe30
 8001d7a:	b110      	cbz	r0, 8001d82 <sendGSMCommand+0x6be>
										updateHTTPReadLength(gsmInstance.u32FotaFileSizeBytes);
 8001d7c:	f7ff fbaa 	bl	80014d4 <updateHTTPReadLength>
 8001d80:	e010      	b.n	8001da4 <sendGSMCommand+0x6e0>
											Diagnostic(enmDiagnostic_RX_FILE_SIZE_ERROR);
 8001d82:	2006      	movs	r0, #6
 8001d84:	f7ff fc7c 	bl	8001680 <Diagnostic>
 8001d88:	e00c      	b.n	8001da4 <sendGSMCommand+0x6e0>
									gsmInstance.u8IncrementGsmState = FALSE;
 8001d8a:	4c8f      	ldr	r4, [pc, #572]	; (8001fc8 <sendGSMCommand+0x904>)
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f884 3e1c 	strb.w	r3, [r4, #3612]	; 0xe1c
                                    Diagnostic(enmDiagnostic_FILE_DONWLOAD_ERROR);
 8001d92:	2007      	movs	r0, #7
 8001d94:	f7ff fc74 	bl	8001680 <Diagnostic>
									gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	f884 3e3e 	strb.w	r3, [r4, #3646]	; 0xe3e
									gsmInstance.enmGSMCommand = enmGSMSTATE_ATCMPUB;
 8001d9e:	231d      	movs	r3, #29
 8001da0:	f884 3e3f 	strb.w	r3, [r4, #3647]	; 0xe3f
								gsmInstance.u8IncrementGsmState = TRUE;
 8001da4:	4b88      	ldr	r3, [pc, #544]	; (8001fc8 <sendGSMCommand+0x904>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
 8001dac:	e5da      	b.n	8001964 <sendGSMCommand+0x2a0>
									HAL_GPIO_TogglePin(GPIOB,LED_COMM_Pin);
 8001dae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001db2:	488b      	ldr	r0, [pc, #556]	; (8001fe0 <sendGSMCommand+0x91c>)
 8001db4:	f004 f8b2 	bl	8005f1c <HAL_GPIO_TogglePin>
									HAL_Delay(1000);
 8001db8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dbc:	f002 fca2 	bl	8004704 <HAL_Delay>
									cnt++;
 8001dc0:	3401      	adds	r4, #1
 8001dc2:	b2e4      	uxtb	r4, r4
								while(cnt<3)
 8001dc4:	2c02      	cmp	r4, #2
 8001dc6:	d9f2      	bls.n	8001dae <sendGSMCommand+0x6ea>
								HAL_GPIO_WritePin(GPIOB,LED_COMM_Pin,GPIO_PIN_RESET);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dce:	4884      	ldr	r0, [pc, #528]	; (8001fe0 <sendGSMCommand+0x91c>)
 8001dd0:	f004 f88a 	bl	8005ee8 <HAL_GPIO_WritePin>
								Diagnostic(enmDiagnostic_FILE_DONWLOAD_ERROR);
 8001dd4:	2007      	movs	r0, #7
 8001dd6:	f7ff fc53 	bl	8001680 <Diagnostic>
								gu32FotaRquestFlag = FALSE;
 8001dda:	2400      	movs	r4, #0
 8001ddc:	4b7b      	ldr	r3, [pc, #492]	; (8001fcc <sendGSMCommand+0x908>)
 8001dde:	601c      	str	r4, [r3, #0]
								unTelInfo.u32JBgaussCommandId[7] = gu32FotaRquestFlag;
 8001de0:	4b80      	ldr	r3, [pc, #512]	; (8001fe4 <sendGSMCommand+0x920>)
 8001de2:	71dc      	strb	r4, [r3, #7]
								restoreHTTPURLforData();
 8001de4:	f7ff fab4 	bl	8001350 <restoreHTTPURLforData>
								gsmInstance.u8IncrementGsmState = FALSE;
 8001de8:	4b77      	ldr	r3, [pc, #476]	; (8001fc8 <sendGSMCommand+0x904>)
 8001dea:	f883 4e1c 	strb.w	r4, [r3, #3612]	; 0xe1c
								gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 8001dee:	2203      	movs	r2, #3
 8001df0:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
								gsmInstance.enmGSMCommand = enmGSMSTATE_ATCMPUB;
 8001df4:	221d      	movs	r2, #29
 8001df6:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
 8001dfa:	e5b3      	b.n	8001964 <sendGSMCommand+0x2a0>
								uint8_t cnt = 0;
 8001dfc:	2400      	movs	r4, #0
 8001dfe:	e7e1      	b.n	8001dc4 <sendGSMCommand+0x700>
								if(gu32AttemptFota == TRUE)
 8001e00:	4b72      	ldr	r3, [pc, #456]	; (8001fcc <sendGSMCommand+0x908>)
 8001e02:	f8d3 36cc 	ldr.w	r3, [r3, #1740]	; 0x6cc
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	f040 80c3 	bne.w	8001f92 <sendGSMCommand+0x8ce>
									if(u32FotaFileReadComplete == 0)
 8001e0c:	4b6f      	ldr	r3, [pc, #444]	; (8001fcc <sendGSMCommand+0x908>)
 8001e0e:	f8d3 362c 	ldr.w	r3, [r3, #1580]	; 0x62c
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d152      	bne.n	8001ebc <sendGSMCommand+0x7f8>
										memcpy(gau8FotaData,(const char *)&gsmInstance.as8GSM_Response_Buff[19],2000);
 8001e16:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001e1a:	4973      	ldr	r1, [pc, #460]	; (8001fe8 <sendGSMCommand+0x924>)
 8001e1c:	4873      	ldr	r0, [pc, #460]	; (8001fec <sendGSMCommand+0x928>)
 8001e1e:	f008 f80f 	bl	8009e40 <memcpy>
										if(u32MemoryWriteCycle == FALSE)
 8001e22:	4b6a      	ldr	r3, [pc, #424]	; (8001fcc <sendGSMCommand+0x908>)
 8001e24:	f8d3 36c8 	ldr.w	r3, [r3, #1736]	; 0x6c8
 8001e28:	bb9b      	cbnz	r3, 8001e92 <sendGSMCommand+0x7ce>
											FLASH_If_Init();
 8001e2a:	f002 f995 	bl	8004158 <FLASH_If_Init>
											if(FLASH_If_Erase(0,getNewFirmwareStorageLocation()) != FLASHIF_ERASE_OK)
 8001e2e:	f002 fa83 	bl	8004338 <getNewFirmwareStorageLocation>
 8001e32:	4601      	mov	r1, r0
 8001e34:	2000      	movs	r0, #0
 8001e36:	f002 fa2b 	bl	8004290 <FLASH_If_Erase>
 8001e3a:	2801      	cmp	r0, #1
 8001e3c:	d112      	bne.n	8001e64 <sendGSMCommand+0x7a0>
											u32FlashMemoryWriteStatus = WriteDatatoFlash((uint8_t *)gau8FotaData,1);
 8001e3e:	2101      	movs	r1, #1
 8001e40:	486a      	ldr	r0, [pc, #424]	; (8001fec <sendGSMCommand+0x928>)
 8001e42:	f002 fa91 	bl	8004368 <WriteDatatoFlash>
 8001e46:	4a61      	ldr	r2, [pc, #388]	; (8001fcc <sendGSMCommand+0x908>)
 8001e48:	f8c2 06e8 	str.w	r0, [r2, #1768]	; 0x6e8
											if(u32FlashMemoryWriteStatus == SUCCESS)
 8001e4c:	2801      	cmp	r0, #1
 8001e4e:	d00f      	beq.n	8001e70 <sendGSMCommand+0x7ac>
												Diagnostic(enmDiagnostic_MEM_WR_ERROR);
 8001e50:	200a      	movs	r0, #10
 8001e52:	f7ff fc15 	bl	8001680 <Diagnostic>
												BootUpdateFailed();
 8001e56:	f7ff fc1d 	bl	8001694 <BootUpdateFailed>
										gsmInstance.u8IncrementGsmState = FALSE;
 8001e5a:	4b5b      	ldr	r3, [pc, #364]	; (8001fc8 <sendGSMCommand+0x904>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
 8001e62:	e57f      	b.n	8001964 <sendGSMCommand+0x2a0>
												Diagnostic(enmDiagnostic_FLASH_ERRASE_ERROR);
 8001e64:	2008      	movs	r0, #8
 8001e66:	f7ff fc0b 	bl	8001680 <Diagnostic>
												BootUpdateFailed();
 8001e6a:	f7ff fc13 	bl	8001694 <BootUpdateFailed>
 8001e6e:	e7e6      	b.n	8001e3e <sendGSMCommand+0x77a>
												u32MemoryWriteCycle = TRUE;
 8001e70:	4613      	mov	r3, r2
 8001e72:	2201      	movs	r2, #1
 8001e74:	f8c3 26c8 	str.w	r2, [r3, #1736]	; 0x6c8
												updateHTTPReadLength(gsmInstance.u32FotaFileSizeBytes);
 8001e78:	4c53      	ldr	r4, [pc, #332]	; (8001fc8 <sendGSMCommand+0x904>)
 8001e7a:	f8d4 0e30 	ldr.w	r0, [r4, #3632]	; 0xe30
 8001e7e:	f7ff fb29 	bl	80014d4 <updateHTTPReadLength>
												memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR,(GSM_RESPONSE_ARRAY_SIZE * sizeof(uint8_t)));
 8001e82:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001e86:	2100      	movs	r1, #0
 8001e88:	f204 4052 	addw	r0, r4, #1106	; 0x452
 8001e8c:	f007 ffe6 	bl	8009e5c <memset>
 8001e90:	e7e3      	b.n	8001e5a <sendGSMCommand+0x796>
											u32FlashMemoryWriteStatus = WriteDatatoFlash((uint8_t *)gau8FotaData,0);
 8001e92:	2100      	movs	r1, #0
 8001e94:	4855      	ldr	r0, [pc, #340]	; (8001fec <sendGSMCommand+0x928>)
 8001e96:	f002 fa67 	bl	8004368 <WriteDatatoFlash>
 8001e9a:	4a4c      	ldr	r2, [pc, #304]	; (8001fcc <sendGSMCommand+0x908>)
 8001e9c:	f8c2 06e8 	str.w	r0, [r2, #1768]	; 0x6e8
											if(u32FlashMemoryWriteStatus == SUCCESS)
 8001ea0:	2801      	cmp	r0, #1
 8001ea2:	d005      	beq.n	8001eb0 <sendGSMCommand+0x7ec>
												Diagnostic(enmDiagnostic_MEM_WR_ERROR);
 8001ea4:	200a      	movs	r0, #10
 8001ea6:	f7ff fbeb 	bl	8001680 <Diagnostic>
												BootUpdateFailed();
 8001eaa:	f7ff fbf3 	bl	8001694 <BootUpdateFailed>
 8001eae:	e7d4      	b.n	8001e5a <sendGSMCommand+0x796>
												updateHTTPReadLength(gsmInstance.u32FotaFileSizeBytes);
 8001eb0:	4b45      	ldr	r3, [pc, #276]	; (8001fc8 <sendGSMCommand+0x904>)
 8001eb2:	f8d3 0e30 	ldr.w	r0, [r3, #3632]	; 0xe30
 8001eb6:	f7ff fb0d 	bl	80014d4 <updateHTTPReadLength>
 8001eba:	e7ce      	b.n	8001e5a <sendGSMCommand+0x796>
									else if(u32FotaFileReadComplete == 1)
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d005      	beq.n	8001ecc <sendGSMCommand+0x808>
										Diagnostic(enmDiagnostic_FLASH_ERRASE_ERROR);
 8001ec0:	2008      	movs	r0, #8
 8001ec2:	f7ff fbdd 	bl	8001680 <Diagnostic>
										BootUpdateFailed();
 8001ec6:	f7ff fbe5 	bl	8001694 <BootUpdateFailed>
 8001eca:	e54b      	b.n	8001964 <sendGSMCommand+0x2a0>
										char *ptr = strstr((const char *)&gsmInstance.as8GSM_Response_Buff,"+HTTPREAD:");
 8001ecc:	4e41      	ldr	r6, [pc, #260]	; (8001fd4 <sendGSMCommand+0x910>)
 8001ece:	4948      	ldr	r1, [pc, #288]	; (8001ff0 <sendGSMCommand+0x92c>)
 8001ed0:	4630      	mov	r0, r6
 8001ed2:	f008 f8c9 	bl	800a068 <strstr>
										char *ptr2 = strstr(ptr,"\n");
 8001ed6:	210a      	movs	r1, #10
 8001ed8:	f008 f8b1 	bl	800a03e <strchr>
 8001edc:	4605      	mov	r5, r0
										memset(gau8FotaData,0x00,sizeof(gau8FotaData));
 8001ede:	4c43      	ldr	r4, [pc, #268]	; (8001fec <sendGSMCommand+0x928>)
 8001ee0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	f007 ffb8 	bl	8009e5c <memset>
										memcpy(gau8FotaData,(ptr2+1),gsmInstance.u32FotaFileSizeBytes);
 8001eec:	f8d6 29de 	ldr.w	r2, [r6, #2526]	; 0x9de
 8001ef0:	1c69      	adds	r1, r5, #1
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	f007 ffa4 	bl	8009e40 <memcpy>
										u32FlashMemoryWriteStatus = WriteDatatoFlash((uint8_t *)gau8FotaData,0);
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4620      	mov	r0, r4
 8001efc:	f002 fa34 	bl	8004368 <WriteDatatoFlash>
 8001f00:	4b32      	ldr	r3, [pc, #200]	; (8001fcc <sendGSMCommand+0x908>)
 8001f02:	f8c3 06e8 	str.w	r0, [r3, #1768]	; 0x6e8
										if(flashWriteBootSection(getNewFirmwareStorageLocation()) == 0)
 8001f06:	f002 fa17 	bl	8004338 <getNewFirmwareStorageLocation>
 8001f0a:	f002 fa63 	bl	80043d4 <flashWriteBootSection>
 8001f0e:	2800      	cmp	r0, #0
 8001f10:	d13d      	bne.n	8001f8e <sendGSMCommand+0x8ca>
											u32FOTAFileBaseAddress = 0;
 8001f12:	4b2e      	ldr	r3, [pc, #184]	; (8001fcc <sendGSMCommand+0x908>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
											gu32AttemptFota =  FALSE;
 8001f1a:	f8c3 26cc 	str.w	r2, [r3, #1740]	; 0x6cc
											if(u32MemoryWriteCycle == TRUE)
 8001f1e:	f8d3 36c8 	ldr.w	r3, [r3, #1736]	; 0x6c8
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d016      	beq.n	8001f54 <sendGSMCommand+0x890>
											gu32FotaRquestFlag = FALSE;
 8001f26:	2000      	movs	r0, #0
 8001f28:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <sendGSMCommand+0x908>)
 8001f2a:	6018      	str	r0, [r3, #0]
											unTelInfo.u32JBgaussCommandId[7] = 2; // complete FOTA
 8001f2c:	4b2d      	ldr	r3, [pc, #180]	; (8001fe4 <sendGSMCommand+0x920>)
 8001f2e:	2202      	movs	r2, #2
 8001f30:	71da      	strb	r2, [r3, #7]
                                            Diagnostic(enmDiagnostic_FOTA_SUCCESS_OK);
 8001f32:	f7ff fba5 	bl	8001680 <Diagnostic>
											FOTACompleteFlag = TRUE;
 8001f36:	4b2f      	ldr	r3, [pc, #188]	; (8001ff4 <sendGSMCommand+0x930>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	701a      	strb	r2, [r3, #0]
											gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 8001f3c:	4b22      	ldr	r3, [pc, #136]	; (8001fc8 <sendGSMCommand+0x904>)
 8001f3e:	2203      	movs	r2, #3
 8001f40:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
											gsmInstance.enmGSMCommand = enmGSMSTATE_ATCMPUB;
 8001f44:	221d      	movs	r2, #29
 8001f46:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
										u32MemoryWriteCycle = TRUE;
 8001f4a:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <sendGSMCommand+0x908>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f8c3 26c8 	str.w	r2, [r3, #1736]	; 0x6c8
 8001f52:	e507      	b.n	8001964 <sendGSMCommand+0x2a0>
												u32MemoryWriteCycle = FALSE;
 8001f54:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <sendGSMCommand+0x908>)
 8001f56:	f8c3 26c8 	str.w	r2, [r3, #1736]	; 0x6c8
 8001f5a:	e7e4      	b.n	8001f26 <sendGSMCommand+0x862>
												HAL_GPIO_TogglePin(GPIOB,LED_COMM_Pin);
 8001f5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f60:	481f      	ldr	r0, [pc, #124]	; (8001fe0 <sendGSMCommand+0x91c>)
 8001f62:	f003 ffdb 	bl	8005f1c <HAL_GPIO_TogglePin>
												HAL_Delay(1000);
 8001f66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f6a:	f002 fbcb 	bl	8004704 <HAL_Delay>
												cnt++;
 8001f6e:	3401      	adds	r4, #1
 8001f70:	b2e4      	uxtb	r4, r4
											while(cnt<4)
 8001f72:	2c03      	cmp	r4, #3
 8001f74:	d9f2      	bls.n	8001f5c <sendGSMCommand+0x898>
											HAL_GPIO_WritePin(GPIOB,LED_COMM_Pin,GPIO_PIN_RESET);
 8001f76:	2200      	movs	r2, #0
 8001f78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f7c:	4818      	ldr	r0, [pc, #96]	; (8001fe0 <sendGSMCommand+0x91c>)
 8001f7e:	f003 ffb3 	bl	8005ee8 <HAL_GPIO_WritePin>
											Diagnostic(enmDiagnostic_BOOT_REGION_SELECTION_ERROR);
 8001f82:	2009      	movs	r0, #9
 8001f84:	f7ff fb7c 	bl	8001680 <Diagnostic>
											BootUpdateFailed();
 8001f88:	f7ff fb84 	bl	8001694 <BootUpdateFailed>
 8001f8c:	e7dd      	b.n	8001f4a <sendGSMCommand+0x886>
											uint8_t cnt = 0;
 8001f8e:	2400      	movs	r4, #0
 8001f90:	e7ef      	b.n	8001f72 <sendGSMCommand+0x8ae>
									Diagnostic(enmDiagnostic_FLASH_ERRASE_ERROR);
 8001f92:	2008      	movs	r0, #8
 8001f94:	f7ff fb74 	bl	8001680 <Diagnostic>
									BootUpdateFailed();
 8001f98:	f7ff fb7c 	bl	8001694 <BootUpdateFailed>
 8001f9c:	e4e2      	b.n	8001964 <sendGSMCommand+0x2a0>
								gsmInstance.u8IncrementGsmState = TRUE;
 8001f9e:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <sendGSMCommand+0x904>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
								break;
 8001fa6:	e4dd      	b.n	8001964 <sendGSMCommand+0x2a0>
								gsmInstance.u8IncrementGsmState = TRUE;
 8001fa8:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <sendGSMCommand+0x904>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2e1c 	strb.w	r2, [r3, #3612]	; 0xe1c
								break;
 8001fb0:	e4d8      	b.n	8001964 <sendGSMCommand+0x2a0>
						memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR,(GSM_RESPONSE_ARRAY_SIZE * sizeof(uint8_t))); /* Clear Response Buffer */
 8001fb2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	f203 4052 	addw	r0, r3, #1106	; 0x452
 8001fbc:	f007 ff4e 	bl	8009e5c <memset>
 8001fc0:	e4e7      	b.n	8001992 <sendGSMCommand+0x2ce>
 8001fc2:	bf00      	nop
 8001fc4:	20004340 	.word	0x20004340
 8001fc8:	200031d0 	.word	0x200031d0
 8001fcc:	20001aec 	.word	0x20001aec
 8001fd0:	0800b628 	.word	0x0800b628
 8001fd4:	20003622 	.word	0x20003622
 8001fd8:	2000115c 	.word	0x2000115c
 8001fdc:	0800b574 	.word	0x0800b574
 8001fe0:	48000400 	.word	0x48000400
 8001fe4:	20004ba4 	.word	0x20004ba4
 8001fe8:	20003635 	.word	0x20003635
 8001fec:	2000066c 	.word	0x2000066c
 8001ff0:	0800b630 	.word	0x0800b630
 8001ff4:	2000233c 	.word	0x2000233c
					gsmInstance.u8GSM_Response_Character_Counter = 0;
 8001ff8:	481e      	ldr	r0, [pc, #120]	; (8002074 <sendGSMCommand+0x9b0>)
 8001ffa:	2400      	movs	r4, #0
 8001ffc:	f8c0 4e38 	str.w	r4, [r0, #3640]	; 0xe38
					gsmInstance.enmGSMCommandResponseState = enmGSM_CMDSEND;//enmGSM_SENDCMD;
 8002000:	2301      	movs	r3, #1
 8002002:	f880 3e3c 	strb.w	r3, [r0, #3644]	; 0xe3c
					memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR,(GSM_RESPONSE_ARRAY_SIZE * sizeof(uint8_t))); /* Clear Response Buffer */
 8002006:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800200a:	4621      	mov	r1, r4
 800200c:	f200 4052 	addw	r0, r0, #1106	; 0x452
 8002010:	f007 ff24 	bl	8009e5c <memset>
					u8GSMCharRcv = 0;
 8002014:	4b18      	ldr	r3, [pc, #96]	; (8002078 <sendGSMCommand+0x9b4>)
 8002016:	601c      	str	r4, [r3, #0]
 8002018:	f7ff bb5e 	b.w	80016d8 <sendGSMCommand+0x14>
						gu8CheckSMS = TRUE;
 800201c:	4b17      	ldr	r3, [pc, #92]	; (800207c <sendGSMCommand+0x9b8>)
 800201e:	2201      	movs	r2, #1
 8002020:	f883 26ec 	strb.w	r2, [r3, #1772]	; 0x6ec
 8002024:	e403      	b.n	800182e <sendGSMCommand+0x16a>
					gsmInstance.enmGSMCommandState = enmGSM_CMDSEND;
 8002026:	4c13      	ldr	r4, [pc, #76]	; (8002074 <sendGSMCommand+0x9b0>)
 8002028:	2301      	movs	r3, #1
 800202a:	f884 3e3d 	strb.w	r3, [r4, #3645]	; 0xe3d
					gsmInstance.enmGSMCommandResponseState = enmGSM_SENDCMD;
 800202e:	2100      	movs	r1, #0
 8002030:	f884 1e3c 	strb.w	r1, [r4, #3644]	; 0xe3c
					memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR, (GSM_RESPONSE_ARRAY_SIZE));
 8002034:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002038:	f204 4052 	addw	r0, r4, #1106	; 0x452
 800203c:	f007 ff0e 	bl	8009e5c <memset>
					gsmInstance.u32GSMTimer = ONE_SEC;
 8002040:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002044:	f8c4 3e20 	str.w	r3, [r4, #3616]	; 0xe20
					if(gsmInstance.enmGSMCommand == enmGSMSTATE_SENDDATA)
 8002048:	f894 3e3f 	ldrb.w	r3, [r4, #3647]	; 0xe3f
 800204c:	2b1e      	cmp	r3, #30
 800204e:	f47f abf0 	bne.w	8001832 <sendGSMCommand+0x16e>
						gsmInstance.enmGSMCommand = enmGSMSTATE_ATCMPUB;
 8002052:	221d      	movs	r2, #29
 8002054:	f884 2e3f 	strb.w	r2, [r4, #3647]	; 0xe3f
						gu8SendDataCounter--;
 8002058:	4a09      	ldr	r2, [pc, #36]	; (8002080 <sendGSMCommand+0x9bc>)
 800205a:	f892 34bb 	ldrb.w	r3, [r2, #1211]	; 0x4bb
 800205e:	3b01      	subs	r3, #1
 8002060:	b2db      	uxtb	r3, r3
 8002062:	f882 34bb 	strb.w	r3, [r2, #1211]	; 0x4bb
						if(gu8SendDataCounter == 0)
 8002066:	2b00      	cmp	r3, #0
 8002068:	f47f abe3 	bne.w	8001832 <sendGSMCommand+0x16e>
							initGSMSIM868();
 800206c:	f7fe fe6e 	bl	8000d4c <initGSMSIM868>
 8002070:	f7ff bbdf 	b.w	8001832 <sendGSMCommand+0x16e>
 8002074:	200031d0 	.word	0x200031d0
 8002078:	20002354 	.word	0x20002354
 800207c:	20001aec 	.word	0x20001aec
 8002080:	20000054 	.word	0x20000054

08002084 <operateGSMSIM868>:
	if(gsmInstance.u32GSMTimer != 0)
 8002084:	4bab      	ldr	r3, [pc, #684]	; (8002334 <operateGSMSIM868+0x2b0>)
 8002086:	f8d3 3e20 	ldr.w	r3, [r3, #3616]	; 0xe20
 800208a:	2b00      	cmp	r3, #0
 800208c:	f040 8151 	bne.w	8002332 <operateGSMSIM868+0x2ae>
{
 8002090:	b510      	push	{r4, lr}
 8002092:	f5ad 5d8b 	sub.w	sp, sp, #4448	; 0x1160
	if(gsmInstance.enmcurrentTask > 9)
 8002096:	4ba7      	ldr	r3, [pc, #668]	; (8002334 <operateGSMSIM868+0x2b0>)
 8002098:	f893 3e3e 	ldrb.w	r3, [r3, #3646]	; 0xe3e
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b09      	cmp	r3, #9
 80020a0:	d903      	bls.n	80020aa <operateGSMSIM868+0x26>
		gsmInstance.enmcurrentTask = 0;
 80020a2:	4ba4      	ldr	r3, [pc, #656]	; (8002334 <operateGSMSIM868+0x2b0>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
	switch(gsmInstance.enmcurrentTask)
 80020aa:	4ba2      	ldr	r3, [pc, #648]	; (8002334 <operateGSMSIM868+0x2b0>)
 80020ac:	f893 3e3e 	ldrb.w	r3, [r3, #3646]	; 0xe3e
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b09      	cmp	r3, #9
 80020b4:	f200 813a 	bhi.w	800232c <operateGSMSIM868+0x2a8>
 80020b8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80020bc:	0045000a 	.word	0x0045000a
 80020c0:	00d700ca 	.word	0x00d700ca
 80020c4:	00ac008e 	.word	0x00ac008e
 80020c8:	0120007c 	.word	0x0120007c
 80020cc:	01300123 	.word	0x01300123
			if(gsmInstance.enmGSMPwrState == enmGSM_PWRNOTSTARTED)
 80020d0:	4b98      	ldr	r3, [pc, #608]	; (8002334 <operateGSMSIM868+0x2b0>)
 80020d2:	f893 3e40 	ldrb.w	r3, [r3, #3648]	; 0xe40
 80020d6:	b16b      	cbz	r3, 80020f4 <operateGSMSIM868+0x70>
			else if(gsmInstance.enmGSMPwrState == enmGSM_PWRSTARTED)
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d019      	beq.n	8002110 <operateGSMSIM868+0x8c>
				if((gsmInstance.enmGSMPwrState == enmGSM_PWRCOMPLETED) && (gsmInstance.enmcurrentTask == enmGSMTASK_RESET))
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d028      	beq.n	8002132 <operateGSMSIM868+0xae>
			if(gsmInstance.enmGSMPwrState > 2)
 80020e0:	4b94      	ldr	r3, [pc, #592]	; (8002334 <operateGSMSIM868+0x2b0>)
 80020e2:	f893 3e40 	ldrb.w	r3, [r3, #3648]	; 0xe40
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d970      	bls.n	80021cc <operateGSMSIM868+0x148>
				gsmInstance.enmGSMPwrState = enmGSM_PWRNOTSTARTED;
 80020ea:	4b92      	ldr	r3, [pc, #584]	; (8002334 <operateGSMSIM868+0x2b0>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2e40 	strb.w	r2, [r3, #3648]	; 0xe40
 80020f2:	e06b      	b.n	80021cc <operateGSMSIM868+0x148>
				HAL_GPIO_WritePin(GSM_PWR_KEY_GPIO_Port,GSM_PWR_KEY_Pin,GPIO_PIN_SET);
 80020f4:	2201      	movs	r2, #1
 80020f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020fa:	488f      	ldr	r0, [pc, #572]	; (8002338 <operateGSMSIM868+0x2b4>)
 80020fc:	f003 fef4 	bl	8005ee8 <HAL_GPIO_WritePin>
				gsmInstance.u32GSMTimer =  TEN_SEC;
 8002100:	4b8c      	ldr	r3, [pc, #560]	; (8002334 <operateGSMSIM868+0x2b0>)
 8002102:	4a8e      	ldr	r2, [pc, #568]	; (800233c <operateGSMSIM868+0x2b8>)
 8002104:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
				gsmInstance.enmGSMPwrState = enmGSM_PWRSTARTED;
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2e40 	strb.w	r2, [r3, #3648]	; 0xe40
 800210e:	e7e7      	b.n	80020e0 <operateGSMSIM868+0x5c>
				HAL_GPIO_WritePin(GSM_PWR_KEY_GPIO_Port,GSM_PWR_KEY_Pin,GPIO_PIN_RESET);
 8002110:	2200      	movs	r2, #0
 8002112:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002116:	4888      	ldr	r0, [pc, #544]	; (8002338 <operateGSMSIM868+0x2b4>)
 8002118:	f003 fee6 	bl	8005ee8 <HAL_GPIO_WritePin>
				gsmInstance.u32GSMTimer = FOUR_SEC;
 800211c:	4b85      	ldr	r3, [pc, #532]	; (8002334 <operateGSMSIM868+0x2b0>)
 800211e:	4a88      	ldr	r2, [pc, #544]	; (8002340 <operateGSMSIM868+0x2bc>)
 8002120:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
				gsmInstance.enmcurrentTask = enmGSMTASK_INITMODULE;
 8002124:	2201      	movs	r2, #1
 8002126:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
				gsmInstance.enmGSMPwrState = enmGSM_PWRCOMPLETED;
 800212a:	2202      	movs	r2, #2
 800212c:	f883 2e40 	strb.w	r2, [r3, #3648]	; 0xe40
 8002130:	e7d6      	b.n	80020e0 <operateGSMSIM868+0x5c>
				if((gsmInstance.enmGSMPwrState == enmGSM_PWRCOMPLETED) && (gsmInstance.enmcurrentTask == enmGSMTASK_RESET))
 8002132:	4b80      	ldr	r3, [pc, #512]	; (8002334 <operateGSMSIM868+0x2b0>)
 8002134:	f893 3e3e 	ldrb.w	r3, [r3, #3646]	; 0xe3e
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1d1      	bne.n	80020e0 <operateGSMSIM868+0x5c>
					gsmInstance.enmGSMPwrState = enmGSM_PWRNOTSTARTED;
 800213c:	4b7d      	ldr	r3, [pc, #500]	; (8002334 <operateGSMSIM868+0x2b0>)
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2e40 	strb.w	r2, [r3, #3648]	; 0xe40
 8002144:	e7cc      	b.n	80020e0 <operateGSMSIM868+0x5c>
			if(gsmInstance.enmGSMCommandState == enmGSM_CMDTIMEOUT)
 8002146:	4b7b      	ldr	r3, [pc, #492]	; (8002334 <operateGSMSIM868+0x2b0>)
 8002148:	f893 3e3d 	ldrb.w	r3, [r3, #3645]	; 0xe3d
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b05      	cmp	r3, #5
 8002150:	d011      	beq.n	8002176 <operateGSMSIM868+0xf2>
				if(gsmInstance.enmGSMCommand == enmGSMSTATE_ATCMPUB)
 8002152:	4b78      	ldr	r3, [pc, #480]	; (8002334 <operateGSMSIM868+0x2b0>)
 8002154:	f893 3e3f 	ldrb.w	r3, [r3, #3647]	; 0xe3f
 8002158:	2b1d      	cmp	r3, #29
 800215a:	d11e      	bne.n	800219a <operateGSMSIM868+0x116>
					if(gu8CheckSMS == TRUE)
 800215c:	4b79      	ldr	r3, [pc, #484]	; (8002344 <operateGSMSIM868+0x2c0>)
 800215e:	f893 36ec 	ldrb.w	r3, [r3, #1772]	; 0x6ec
 8002162:	2b01      	cmp	r3, #1
 8002164:	d00a      	beq.n	800217c <operateGSMSIM868+0xf8>
						gsmInstance.enmGSMCommand = enmGSMSTATE_GPSCGNSINF;
 8002166:	4b73      	ldr	r3, [pc, #460]	; (8002334 <operateGSMSIM868+0x2b0>)
 8002168:	2207      	movs	r2, #7
 800216a:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
						gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
 800216e:	2202      	movs	r2, #2
 8002170:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
 8002174:	e02a      	b.n	80021cc <operateGSMSIM868+0x148>
				initGSMSIM868();
 8002176:	f7fe fde9 	bl	8000d4c <initGSMSIM868>
 800217a:	e027      	b.n	80021cc <operateGSMSIM868+0x148>
						gsmInstance.enmGSMCommand = enmGSMSTATE_GPSCGNSINF;
 800217c:	4b6d      	ldr	r3, [pc, #436]	; (8002334 <operateGSMSIM868+0x2b0>)
 800217e:	2207      	movs	r2, #7
 8002180:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
						gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
 8002184:	2202      	movs	r2, #2
 8002186:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
						gu8ReadSMS = TRUE;
 800218a:	4b6e      	ldr	r3, [pc, #440]	; (8002344 <operateGSMSIM868+0x2c0>)
 800218c:	2201      	movs	r2, #1
 800218e:	f883 26ed 	strb.w	r2, [r3, #1773]	; 0x6ed
						gu8CheckSMS = FALSE;
 8002192:	2200      	movs	r2, #0
 8002194:	f883 26ec 	strb.w	r2, [r3, #1772]	; 0x6ec
 8002198:	e018      	b.n	80021cc <operateGSMSIM868+0x148>
					sendGSMCommand(gsmInstance);
 800219a:	4c66      	ldr	r4, [pc, #408]	; (8002334 <operateGSMSIM868+0x2b0>)
 800219c:	f44f 528b 	mov.w	r2, #4448	; 0x1160
 80021a0:	f104 0110 	add.w	r1, r4, #16
 80021a4:	4668      	mov	r0, sp
 80021a6:	f007 fe4b 	bl	8009e40 <memcpy>
 80021aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021ae:	f7ff fa89 	bl	80016c4 <sendGSMCommand>
 80021b2:	e00b      	b.n	80021cc <operateGSMSIM868+0x148>
				sendGSMCommand(gsmInstance);
 80021b4:	4c5f      	ldr	r4, [pc, #380]	; (8002334 <operateGSMSIM868+0x2b0>)
 80021b6:	f44f 528b 	mov.w	r2, #4448	; 0x1160
 80021ba:	f104 0110 	add.w	r1, r4, #16
 80021be:	4668      	mov	r0, sp
 80021c0:	f007 fe3e 	bl	8009e40 <memcpy>
 80021c4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021c8:	f7ff fa7c 	bl	80016c4 <sendGSMCommand>
	gu32GSMHangTimer = THREE_MIN;
 80021cc:	4b5e      	ldr	r3, [pc, #376]	; (8002348 <operateGSMSIM868+0x2c4>)
 80021ce:	4a5f      	ldr	r2, [pc, #380]	; (800234c <operateGSMSIM868+0x2c8>)
 80021d0:	601a      	str	r2, [r3, #0]
}
 80021d2:	f50d 5d8b 	add.w	sp, sp, #4448	; 0x1160
 80021d6:	bd10      	pop	{r4, pc}
			if(gu8ReadSMS == TRUE)
 80021d8:	4b5a      	ldr	r3, [pc, #360]	; (8002344 <operateGSMSIM868+0x2c0>)
 80021da:	f893 36ed 	ldrb.w	r3, [r3, #1773]	; 0x6ed
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d00b      	beq.n	80021fa <operateGSMSIM868+0x176>
				gsmInstance.enmGSMCommand = enmGSMSTATE_GPSCGNSINF;
 80021e2:	4b54      	ldr	r3, [pc, #336]	; (8002334 <operateGSMSIM868+0x2b0>)
 80021e4:	2207      	movs	r2, #7
 80021e6:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
				gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
 80021ea:	2202      	movs	r2, #2
 80021ec:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
				gsmInstance.u32GSMTimer = TWO_SEC;
 80021f0:	f649 4240 	movw	r2, #40000	; 0x9c40
 80021f4:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
 80021f8:	e7e8      	b.n	80021cc <operateGSMSIM868+0x148>
				sendGSMCommand(gsmInstance);
 80021fa:	4c4e      	ldr	r4, [pc, #312]	; (8002334 <operateGSMSIM868+0x2b0>)
 80021fc:	f44f 528b 	mov.w	r2, #4448	; 0x1160
 8002200:	f104 0110 	add.w	r1, r4, #16
 8002204:	4668      	mov	r0, sp
 8002206:	f007 fe1b 	bl	8009e40 <memcpy>
 800220a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800220e:	f7ff fa59 	bl	80016c4 <sendGSMCommand>
 8002212:	e7db      	b.n	80021cc <operateGSMSIM868+0x148>
			if(gu8SendSMS == TRUE)
 8002214:	4b4b      	ldr	r3, [pc, #300]	; (8002344 <operateGSMSIM868+0x2c0>)
 8002216:	f893 3602 	ldrb.w	r3, [r3, #1538]	; 0x602
 800221a:	2b01      	cmp	r3, #1
 800221c:	d00b      	beq.n	8002236 <operateGSMSIM868+0x1b2>
				gsmInstance.enmGSMCommand = enmGSMSTATE_GPSCGNSINF;
 800221e:	4b45      	ldr	r3, [pc, #276]	; (8002334 <operateGSMSIM868+0x2b0>)
 8002220:	2207      	movs	r2, #7
 8002222:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
				gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
 8002226:	2202      	movs	r2, #2
 8002228:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
				gsmInstance.u32GSMTimer = TWO_SEC;
 800222c:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002230:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
 8002234:	e7ca      	b.n	80021cc <operateGSMSIM868+0x148>
				sendGSMCommand(gsmInstance);
 8002236:	4c3f      	ldr	r4, [pc, #252]	; (8002334 <operateGSMSIM868+0x2b0>)
 8002238:	f44f 528b 	mov.w	r2, #4448	; 0x1160
 800223c:	f104 0110 	add.w	r1, r4, #16
 8002240:	4668      	mov	r0, sp
 8002242:	f007 fdfd 	bl	8009e40 <memcpy>
 8002246:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800224a:	f7ff fa3b 	bl	80016c4 <sendGSMCommand>
 800224e:	e7bd      	b.n	80021cc <operateGSMSIM868+0x148>
			sendGSMCommand(gsmInstance);
 8002250:	4c38      	ldr	r4, [pc, #224]	; (8002334 <operateGSMSIM868+0x2b0>)
 8002252:	f44f 528b 	mov.w	r2, #4448	; 0x1160
 8002256:	f104 0110 	add.w	r1, r4, #16
 800225a:	4668      	mov	r0, sp
 800225c:	f007 fdf0 	bl	8009e40 <memcpy>
 8002260:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002264:	f7ff fa2e 	bl	80016c4 <sendGSMCommand>
			break;
 8002268:	e7b0      	b.n	80021cc <operateGSMSIM868+0x148>
			if((isQueueEmpty(&gsmPayload) == FALSE )&& (gsmPayload.data[gsmPayload.tail] != NULL))
 800226a:	4839      	ldr	r0, [pc, #228]	; (8002350 <operateGSMSIM868+0x2cc>)
 800226c:	f001 f918 	bl	80034a0 <isQueueEmpty>
 8002270:	2800      	cmp	r0, #0
 8002272:	d13b      	bne.n	80022ec <operateGSMSIM868+0x268>
 8002274:	4a36      	ldr	r2, [pc, #216]	; (8002350 <operateGSMSIM868+0x2cc>)
 8002276:	6853      	ldr	r3, [r2, #4]
 8002278:	3302      	adds	r3, #2
 800227a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227e:	b3ab      	cbz	r3, 80022ec <operateGSMSIM868+0x268>
				if((gu8HttpPayloadFlag == 0) && (gsmInstance.enmGSMCommand == enmGSMSTATE_ATCMPUB))
 8002280:	4b30      	ldr	r3, [pc, #192]	; (8002344 <operateGSMSIM868+0x2c0>)
 8002282:	f893 36dd 	ldrb.w	r3, [r3, #1757]	; 0x6dd
 8002286:	b923      	cbnz	r3, 8002292 <operateGSMSIM868+0x20e>
 8002288:	4a2a      	ldr	r2, [pc, #168]	; (8002334 <operateGSMSIM868+0x2b0>)
 800228a:	f892 2e3f 	ldrb.w	r2, [r2, #3647]	; 0xe3f
 800228e:	2a1d      	cmp	r2, #29
 8002290:	d019      	beq.n	80022c6 <operateGSMSIM868+0x242>
				else if((gu8HttpPayloadFlag == 0) && (gsmInstance.enmGSMCommand == enmGSMSTATE_ATCMPUB))
 8002292:	b923      	cbnz	r3, 800229e <operateGSMSIM868+0x21a>
 8002294:	4a27      	ldr	r2, [pc, #156]	; (8002334 <operateGSMSIM868+0x2b0>)
 8002296:	f892 2e3f 	ldrb.w	r2, [r2, #3647]	; 0xe3f
 800229a:	2a1d      	cmp	r2, #29
 800229c:	d01a      	beq.n	80022d4 <operateGSMSIM868+0x250>
				else if((gu8HttpPayloadFlag == 1) && (gsmInstance.enmGSMCommand == enmGSMSTATE_SENDDATA))
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d104      	bne.n	80022ac <operateGSMSIM868+0x228>
 80022a2:	4b24      	ldr	r3, [pc, #144]	; (8002334 <operateGSMSIM868+0x2b0>)
 80022a4:	f893 3e3f 	ldrb.w	r3, [r3, #3647]	; 0xe3f
 80022a8:	2b1e      	cmp	r3, #30
 80022aa:	d01a      	beq.n	80022e2 <operateGSMSIM868+0x25e>
					sendGSMCommand(gsmInstance);
 80022ac:	4c21      	ldr	r4, [pc, #132]	; (8002334 <operateGSMSIM868+0x2b0>)
 80022ae:	f44f 528b 	mov.w	r2, #4448	; 0x1160
 80022b2:	f104 0110 	add.w	r1, r4, #16
 80022b6:	4668      	mov	r0, sp
 80022b8:	f007 fdc2 	bl	8009e40 <memcpy>
 80022bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022c0:	f7ff fa00 	bl	80016c4 <sendGSMCommand>
 80022c4:	e782      	b.n	80021cc <operateGSMSIM868+0x148>
					updateHttpDataLength();
 80022c6:	f7fe fe53 	bl	8000f70 <updateHttpDataLength>
					gu8HttpPayloadFlag = 1;
 80022ca:	4b1e      	ldr	r3, [pc, #120]	; (8002344 <operateGSMSIM868+0x2c0>)
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 26dd 	strb.w	r2, [r3, #1757]	; 0x6dd
 80022d2:	e77b      	b.n	80021cc <operateGSMSIM868+0x148>
					updateHttpDataLength();
 80022d4:	f7fe fe4c 	bl	8000f70 <updateHttpDataLength>
					gu8HttpPayloadFlag = 1;
 80022d8:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <operateGSMSIM868+0x2c0>)
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 26dd 	strb.w	r2, [r3, #1757]	; 0x6dd
 80022e0:	e774      	b.n	80021cc <operateGSMSIM868+0x148>
					gu8HttpPayloadFlag = 0;
 80022e2:	4b18      	ldr	r3, [pc, #96]	; (8002344 <operateGSMSIM868+0x2c0>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 26dd 	strb.w	r2, [r3, #1757]	; 0x6dd
 80022ea:	e76f      	b.n	80021cc <operateGSMSIM868+0x148>
				gsmInstance.enmGSMCommand = enmGSMSTATE_GPSCGNSINF;
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <operateGSMSIM868+0x2b0>)
 80022ee:	2207      	movs	r2, #7
 80022f0:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
				gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
 80022f4:	2202      	movs	r2, #2
 80022f6:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
 80022fa:	e767      	b.n	80021cc <operateGSMSIM868+0x148>
			initGSMSIM868();
 80022fc:	f7fe fd26 	bl	8000d4c <initGSMSIM868>
			break;
 8002300:	e764      	b.n	80021cc <operateGSMSIM868+0x148>
				sendGSMCommand(gsmInstance);
 8002302:	4c0c      	ldr	r4, [pc, #48]	; (8002334 <operateGSMSIM868+0x2b0>)
 8002304:	f44f 528b 	mov.w	r2, #4448	; 0x1160
 8002308:	f104 0110 	add.w	r1, r4, #16
 800230c:	4668      	mov	r0, sp
 800230e:	f007 fd97 	bl	8009e40 <memcpy>
 8002312:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002316:	f7ff f9d5 	bl	80016c4 <sendGSMCommand>
			break;
 800231a:	e757      	b.n	80021cc <operateGSMSIM868+0x148>
			gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <operateGSMSIM868+0x2b0>)
 800231e:	2203      	movs	r2, #3
 8002320:	f883 2e3e 	strb.w	r2, [r3, #3646]	; 0xe3e
			gsmInstance.enmGSMCommand = enmGSMSTATE_ATCMPUB;
 8002324:	221d      	movs	r2, #29
 8002326:	f883 2e3f 	strb.w	r2, [r3, #3647]	; 0xe3f
			break;
 800232a:	e74f      	b.n	80021cc <operateGSMSIM868+0x148>
			initGSMSIM868();
 800232c:	f7fe fd0e 	bl	8000d4c <initGSMSIM868>
			break;
 8002330:	e74c      	b.n	80021cc <operateGSMSIM868+0x148>
 8002332:	4770      	bx	lr
 8002334:	200031d0 	.word	0x200031d0
 8002338:	48000800 	.word	0x48000800
 800233c:	00030d40 	.word	0x00030d40
 8002340:	00013880 	.word	0x00013880
 8002344:	20001aec 	.word	0x20001aec
 8002348:	20002fcc 	.word	0x20002fcc
 800234c:	0036ee80 	.word	0x0036ee80
 8002350:	20004340 	.word	0x20004340

08002354 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002354:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002356:	4812      	ldr	r0, [pc, #72]	; (80023a0 <MX_I2C1_Init+0x4c>)
 8002358:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <MX_I2C1_Init+0x50>)
 800235a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800235c:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <MX_I2C1_Init+0x54>)
 800235e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002364:	2201      	movs	r2, #1
 8002366:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002368:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800236a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800236c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800236e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002370:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002372:	f003 fe51 	bl	8006018 <HAL_I2C_Init>
 8002376:	b950      	cbnz	r0, 800238e <MX_I2C1_Init+0x3a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002378:	2100      	movs	r1, #0
 800237a:	4809      	ldr	r0, [pc, #36]	; (80023a0 <MX_I2C1_Init+0x4c>)
 800237c:	f004 fa14 	bl	80067a8 <HAL_I2CEx_ConfigAnalogFilter>
 8002380:	b940      	cbnz	r0, 8002394 <MX_I2C1_Init+0x40>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002382:	2100      	movs	r1, #0
 8002384:	4806      	ldr	r0, [pc, #24]	; (80023a0 <MX_I2C1_Init+0x4c>)
 8002386:	f004 fa5d 	bl	8006844 <HAL_I2CEx_ConfigDigitalFilter>
 800238a:	b930      	cbnz	r0, 800239a <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800238c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800238e:	f000 f8d9 	bl	8002544 <Error_Handler>
 8002392:	e7f1      	b.n	8002378 <MX_I2C1_Init+0x24>
    Error_Handler();
 8002394:	f000 f8d6 	bl	8002544 <Error_Handler>
 8002398:	e7f3      	b.n	8002382 <MX_I2C1_Init+0x2e>
    Error_Handler();
 800239a:	f000 f8d3 	bl	8002544 <Error_Handler>
}
 800239e:	e7f5      	b.n	800238c <MX_I2C1_Init+0x38>
 80023a0:	20004370 	.word	0x20004370
 80023a4:	40005400 	.word	0x40005400
 80023a8:	20303e5d 	.word	0x20303e5d

080023ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80023ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023b0:	b0a0      	sub	sp, #128	; 0x80
 80023b2:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b4:	2100      	movs	r1, #0
 80023b6:	911b      	str	r1, [sp, #108]	; 0x6c
 80023b8:	911c      	str	r1, [sp, #112]	; 0x70
 80023ba:	911d      	str	r1, [sp, #116]	; 0x74
 80023bc:	911e      	str	r1, [sp, #120]	; 0x78
 80023be:	911f      	str	r1, [sp, #124]	; 0x7c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023c0:	2260      	movs	r2, #96	; 0x60
 80023c2:	a803      	add	r0, sp, #12
 80023c4:	f007 fd4a 	bl	8009e5c <memset>
  if(i2cHandle->Instance==I2C1)
 80023c8:	6822      	ldr	r2, [r4, #0]
 80023ca:	4b29      	ldr	r3, [pc, #164]	; (8002470 <HAL_I2C_MspInit+0xc4>)
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d002      	beq.n	80023d6 <HAL_I2C_MspInit+0x2a>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80023d0:	b020      	add	sp, #128	; 0x80
 80023d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80023d6:	2340      	movs	r3, #64	; 0x40
 80023d8:	9303      	str	r3, [sp, #12]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80023da:	2300      	movs	r3, #0
 80023dc:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023de:	a803      	add	r0, sp, #12
 80023e0:	f005 fbd2 	bl	8007b88 <HAL_RCCEx_PeriphCLKConfig>
 80023e4:	2800      	cmp	r0, #0
 80023e6:	d13f      	bne.n	8002468 <HAL_I2C_MspInit+0xbc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e8:	4c22      	ldr	r4, [pc, #136]	; (8002474 <HAL_I2C_MspInit+0xc8>)
 80023ea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80023ec:	f043 0302 	orr.w	r3, r3, #2
 80023f0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80023f2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	9301      	str	r3, [sp, #4]
 80023fa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = I2C1_SCL_EEPROM_Pin;
 80023fc:	2340      	movs	r3, #64	; 0x40
 80023fe:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002400:	f04f 0812 	mov.w	r8, #18
 8002404:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	2500      	movs	r5, #0
 800240a:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240c:	951e      	str	r5, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800240e:	2704      	movs	r7, #4
 8002410:	971f      	str	r7, [sp, #124]	; 0x7c
    HAL_GPIO_Init(I2C1_SCL_EEPROM_GPIO_Port, &GPIO_InitStruct);
 8002412:	4e19      	ldr	r6, [pc, #100]	; (8002478 <HAL_I2C_MspInit+0xcc>)
 8002414:	a91b      	add	r1, sp, #108	; 0x6c
 8002416:	4630      	mov	r0, r6
 8002418:	f003 fb62 	bl	8005ae0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C1_SDA_EEPROM_Pin;
 800241c:	2380      	movs	r3, #128	; 0x80
 800241e:	931b      	str	r3, [sp, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002420:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	951d      	str	r5, [sp, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002426:	2303      	movs	r3, #3
 8002428:	931e      	str	r3, [sp, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800242a:	971f      	str	r7, [sp, #124]	; 0x7c
    HAL_GPIO_Init(I2C1_SDA_EEPROM_GPIO_Port, &GPIO_InitStruct);
 800242c:	a91b      	add	r1, sp, #108	; 0x6c
 800242e:	4630      	mov	r0, r6
 8002430:	f003 fb56 	bl	8005ae0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002434:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002436:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800243a:	65a3      	str	r3, [r4, #88]	; 0x58
 800243c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800243e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002442:	9302      	str	r3, [sp, #8]
 8002444:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002446:	462a      	mov	r2, r5
 8002448:	2105      	movs	r1, #5
 800244a:	201f      	movs	r0, #31
 800244c:	f002 ffd2 	bl	80053f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002450:	201f      	movs	r0, #31
 8002452:	f003 f815 	bl	8005480 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002456:	462a      	mov	r2, r5
 8002458:	2105      	movs	r1, #5
 800245a:	2020      	movs	r0, #32
 800245c:	f002 ffca 	bl	80053f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002460:	2020      	movs	r0, #32
 8002462:	f003 f80d 	bl	8005480 <HAL_NVIC_EnableIRQ>
}
 8002466:	e7b3      	b.n	80023d0 <HAL_I2C_MspInit+0x24>
      Error_Handler();
 8002468:	f000 f86c 	bl	8002544 <Error_Handler>
 800246c:	e7bc      	b.n	80023e8 <HAL_I2C_MspInit+0x3c>
 800246e:	bf00      	nop
 8002470:	40005400 	.word	0x40005400
 8002474:	40021000 	.word	0x40021000
 8002478:	48000400 	.word	0x48000400

0800247c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800247c:	b508      	push	{r3, lr}
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800247e:	4808      	ldr	r0, [pc, #32]	; (80024a0 <MX_IWDG_Init+0x24>)
 8002480:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <MX_IWDG_Init+0x28>)
 8002482:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8002484:	2306      	movs	r3, #6
 8002486:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Window = 4095;
 8002488:	f640 73ff 	movw	r3, #4095	; 0xfff
 800248c:	60c3      	str	r3, [r0, #12]
  hiwdg.Init.Reload = 4095;
 800248e:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002490:	f004 fa22 	bl	80068d8 <HAL_IWDG_Init>
 8002494:	b900      	cbnz	r0, 8002498 <MX_IWDG_Init+0x1c>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002496:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002498:	f000 f854 	bl	8002544 <Error_Handler>
}
 800249c:	e7fb      	b.n	8002496 <MX_IWDG_Init+0x1a>
 800249e:	bf00      	nop
 80024a0:	200043bc 	.word	0x200043bc
 80024a4:	40003000 	.word	0x40003000

080024a8 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 80024a8:	b508      	push	{r3, lr}
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80024aa:	480b      	ldr	r0, [pc, #44]	; (80024d8 <MX_LPTIM1_Init+0x30>)
 80024ac:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <MX_LPTIM1_Init+0x34>)
 80024ae:	6003      	str	r3, [r0, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80024b0:	2300      	movs	r3, #0
 80024b2:	6043      	str	r3, [r0, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80024b4:	6083      	str	r3, [r0, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80024b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024ba:	6142      	str	r2, [r0, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80024bc:	6203      	str	r3, [r0, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 80024be:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80024c2:	6242      	str	r2, [r0, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80024c4:	6283      	str	r3, [r0, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80024c6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80024c8:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80024ca:	f004 fa65 	bl	8006998 <HAL_LPTIM_Init>
 80024ce:	b900      	cbnz	r0, 80024d2 <MX_LPTIM1_Init+0x2a>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80024d0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80024d2:	f000 f837 	bl	8002544 <Error_Handler>
}
 80024d6:	e7fb      	b.n	80024d0 <MX_LPTIM1_Init+0x28>
 80024d8:	200043cc 	.word	0x200043cc
 80024dc:	40007c00 	.word	0x40007c00

080024e0 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 80024e0:	b510      	push	{r4, lr}
 80024e2:	b09a      	sub	sp, #104	; 0x68
 80024e4:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024e6:	2260      	movs	r2, #96	; 0x60
 80024e8:	2100      	movs	r1, #0
 80024ea:	a802      	add	r0, sp, #8
 80024ec:	f007 fcb6 	bl	8009e5c <memset>
  if(lptimHandle->Instance==LPTIM1)
 80024f0:	6822      	ldr	r2, [r4, #0]
 80024f2:	4b12      	ldr	r3, [pc, #72]	; (800253c <HAL_LPTIM_MspInit+0x5c>)
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d001      	beq.n	80024fc <HAL_LPTIM_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 80024f8:	b01a      	add	sp, #104	; 0x68
 80024fa:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80024fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002500:	9302      	str	r3, [sp, #8]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 8002502:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002506:	9311      	str	r3, [sp, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002508:	a802      	add	r0, sp, #8
 800250a:	f005 fb3d 	bl	8007b88 <HAL_RCCEx_PeriphCLKConfig>
 800250e:	b990      	cbnz	r0, 8002536 <HAL_LPTIM_MspInit+0x56>
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_LPTIM_MspInit+0x60>)
 8002512:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002514:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002518:	659a      	str	r2, [r3, #88]	; 0x58
 800251a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002520:	9301      	str	r3, [sp, #4]
 8002522:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 1, 0);
 8002524:	2200      	movs	r2, #0
 8002526:	2101      	movs	r1, #1
 8002528:	2041      	movs	r0, #65	; 0x41
 800252a:	f002 ff63 	bl	80053f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800252e:	2041      	movs	r0, #65	; 0x41
 8002530:	f002 ffa6 	bl	8005480 <HAL_NVIC_EnableIRQ>
}
 8002534:	e7e0      	b.n	80024f8 <HAL_LPTIM_MspInit+0x18>
      Error_Handler();
 8002536:	f000 f805 	bl	8002544 <Error_Handler>
 800253a:	e7e9      	b.n	8002510 <HAL_LPTIM_MspInit+0x30>
 800253c:	40007c00 	.word	0x40007c00
 8002540:	40021000 	.word	0x40021000

08002544 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002544:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002546:	e7fe      	b.n	8002546 <Error_Handler+0x2>

08002548 <SystemClock_Config>:
{
 8002548:	b500      	push	{lr}
 800254a:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800254c:	2244      	movs	r2, #68	; 0x44
 800254e:	2100      	movs	r1, #0
 8002550:	a805      	add	r0, sp, #20
 8002552:	f007 fc83 	bl	8009e5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002556:	2300      	movs	r3, #0
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	9301      	str	r3, [sp, #4]
 800255c:	9302      	str	r3, [sp, #8]
 800255e:	9303      	str	r3, [sp, #12]
 8002560:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002562:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002566:	f004 fbeb 	bl	8006d40 <HAL_PWREx_ControlVoltageScaling>
 800256a:	bb38      	cbnz	r0, 80025bc <SystemClock_Config+0x74>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800256c:	230a      	movs	r3, #10
 800256e:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002574:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002576:	2310      	movs	r3, #16
 8002578:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800257a:	2201      	movs	r2, #1
 800257c:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800257e:	2302      	movs	r3, #2
 8002580:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002582:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002584:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 12;
 8002586:	220c      	movs	r2, #12
 8002588:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800258a:	2207      	movs	r2, #7
 800258c:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800258e:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8002590:	2304      	movs	r3, #4
 8002592:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002594:	a805      	add	r0, sp, #20
 8002596:	f004 fccb 	bl	8006f30 <HAL_RCC_OscConfig>
 800259a:	b988      	cbnz	r0, 80025c0 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800259c:	230f      	movs	r3, #15
 800259e:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025a0:	2303      	movs	r3, #3
 80025a2:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025a4:	2300      	movs	r3, #0
 80025a6:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025a8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025aa:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025ac:	2102      	movs	r1, #2
 80025ae:	4668      	mov	r0, sp
 80025b0:	f005 f8d0 	bl	8007754 <HAL_RCC_ClockConfig>
 80025b4:	b930      	cbnz	r0, 80025c4 <SystemClock_Config+0x7c>
}
 80025b6:	b017      	add	sp, #92	; 0x5c
 80025b8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80025bc:	f7ff ffc2 	bl	8002544 <Error_Handler>
    Error_Handler();
 80025c0:	f7ff ffc0 	bl	8002544 <Error_Handler>
    Error_Handler();
 80025c4:	f7ff ffbe 	bl	8002544 <Error_Handler>

080025c8 <PeriphCommonClock_Config>:
{
 80025c8:	b500      	push	{lr}
 80025ca:	b099      	sub	sp, #100	; 0x64
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025cc:	2240      	movs	r2, #64	; 0x40
 80025ce:	2100      	movs	r1, #0
 80025d0:	a808      	add	r0, sp, #32
 80025d2:	f007 fc43 	bl	8009e5c <memset>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC;
 80025d6:	f44f 2388 	mov.w	r3, #278528	; 0x44000
 80025da:	9300      	str	r3, [sp, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80025dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80025e0:	9315      	str	r3, [sp, #84]	; 0x54
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 80025e2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80025e6:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80025e8:	2302      	movs	r3, #2
 80025ea:	9301      	str	r3, [sp, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80025ec:	2201      	movs	r2, #1
 80025ee:	9202      	str	r2, [sp, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80025f0:	2208      	movs	r2, #8
 80025f2:	9203      	str	r2, [sp, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80025f4:	2207      	movs	r2, #7
 80025f6:	9204      	str	r2, [sp, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 80025f8:	2204      	movs	r2, #4
 80025fa:	9205      	str	r2, [sp, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80025fc:	9306      	str	r3, [sp, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80025fe:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8002602:	9307      	str	r3, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002604:	4668      	mov	r0, sp
 8002606:	f005 fabf 	bl	8007b88 <HAL_RCCEx_PeriphCLKConfig>
 800260a:	b910      	cbnz	r0, 8002612 <PeriphCommonClock_Config+0x4a>
}
 800260c:	b019      	add	sp, #100	; 0x64
 800260e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002612:	f7ff ff97 	bl	8002544 <Error_Handler>
	...

08002618 <main>:
{
 8002618:	b508      	push	{r3, lr}
  HAL_Init();
 800261a:	f002 f847 	bl	80046ac <HAL_Init>
  SystemClock_Config();
 800261e:	f7ff ff93 	bl	8002548 <SystemClock_Config>
  PeriphCommonClock_Config();
 8002622:	f7ff ffd1 	bl	80025c8 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 8002626:	f7fe fafd 	bl	8000c24 <MX_GPIO_Init>
  MX_I2C1_Init();
 800262a:	f7ff fe93 	bl	8002354 <MX_I2C1_Init>
  MX_IWDG_Init();
 800262e:	f7ff ff25 	bl	800247c <MX_IWDG_Init>
  MX_LPTIM1_Init();
 8002632:	f7ff ff39 	bl	80024a8 <MX_LPTIM1_Init>
  MX_RTC_Init();
 8002636:	f000 ff73 	bl	8003520 <MX_RTC_Init>
  MX_SPI2_Init();
 800263a:	f001 f879 	bl	8003730 <MX_SPI2_Init>
  MX_TIM7_Init();
 800263e:	f001 f9ef 	bl	8003a20 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8002642:	f001 fa35 	bl	8003ab0 <MX_USART1_UART_Init>
  MX_RNG_Init();
 8002646:	f000 ff39 	bl	80034bc <MX_RNG_Init>
  updateDeviceSignature();
 800264a:	f7fe fa91 	bl	8000b70 <updateDeviceSignature>
  HAL_TIM_Base_Start_IT(&htim7);
 800264e:	4833      	ldr	r0, [pc, #204]	; (800271c <main+0x104>)
 8002650:	f006 fd4c 	bl	80090ec <HAL_TIM_Base_Start_IT>
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002654:	4a32      	ldr	r2, [pc, #200]	; (8002720 <main+0x108>)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002656:	e852 3f00 	ldrex	r3, [r2]
 800265a:	f043 0320 	orr.w	r3, r3, #32
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800265e:	e842 3100 	strex	r1, r3, [r2]
 8002662:	2900      	cmp	r1, #0
 8002664:	d1f6      	bne.n	8002654 <main+0x3c>
  gu32PayloadQueueEnqueue = ONE_MIN;//TEN_MIN;	//
 8002666:	4b2f      	ldr	r3, [pc, #188]	; (8002724 <main+0x10c>)
 8002668:	4a2f      	ldr	r2, [pc, #188]	; (8002728 <main+0x110>)
 800266a:	601a      	str	r2, [r3, #0]
  gu32SleepModeTimer1 = 0;
 800266c:	4b2f      	ldr	r3, [pc, #188]	; (800272c <main+0x114>)
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
  gu32SystemResetTimer = THIRTY_MIN;
 8002672:	4b2f      	ldr	r3, [pc, #188]	; (8002730 <main+0x118>)
 8002674:	4a2f      	ldr	r2, [pc, #188]	; (8002734 <main+0x11c>)
 8002676:	601a      	str	r2, [r3, #0]
  if(MCU_Id)
 8002678:	4b2f      	ldr	r3, [pc, #188]	; (8002738 <main+0x120>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	b36b      	cbz	r3, 80026da <main+0xc2>
	  canFilterConfig();
 800267e:	f001 fb43 	bl	8003d08 <canFilterConfig>
	  Diagnostic(enmDiagnostic_CAN_ID);
 8002682:	2002      	movs	r0, #2
 8002684:	f7fe fffc 	bl	8001680 <Diagnostic>
	  MCU_Id = 0;
 8002688:	4b2b      	ldr	r3, [pc, #172]	; (8002738 <main+0x120>)
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	e024      	b.n	80026da <main+0xc2>
				  	  enqueue(&gsmPayload,(char *)getMachineDataString());
 8002690:	f000 fa26 	bl	8002ae0 <getMachineDataString>
 8002694:	4601      	mov	r1, r0
 8002696:	4829      	ldr	r0, [pc, #164]	; (800273c <main+0x124>)
 8002698:	f000 feae 	bl	80033f8 <enqueue>
				  	  gu32PayloadQueueEnqueue = FIFTEEN_SEC; // /* Upload Frequency */ update given by Mahesh Sir.
 800269c:	4b21      	ldr	r3, [pc, #132]	; (8002724 <main+0x10c>)
 800269e:	4a28      	ldr	r2, [pc, #160]	; (8002740 <main+0x128>)
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	e020      	b.n	80026e6 <main+0xce>
			  initGSMSIM868();
 80026a4:	f7fe fb52 	bl	8000d4c <initGSMSIM868>
 80026a8:	e021      	b.n	80026ee <main+0xd6>
			HAL_GPIO_WritePin(LED_COMM_GPIO_Port, LED_COMM_Pin, GPIO_PIN_RESET);
 80026aa:	4c26      	ldr	r4, [pc, #152]	; (8002744 <main+0x12c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026b2:	4620      	mov	r0, r4
 80026b4:	f003 fc18 	bl	8005ee8 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin);
 80026b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026bc:	4620      	mov	r0, r4
 80026be:	f003 fc2d 	bl	8005f1c <HAL_GPIO_TogglePin>
			gu32LEDDelay = ONE_SEC;// HUNDRED_MS;// //FIVE_SEC;
 80026c2:	4b21      	ldr	r3, [pc, #132]	; (8002748 <main+0x130>)
 80026c4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	e016      	b.n	80026fa <main+0xe2>
	  	  if(SUBTriggerFlag == TRUE)
 80026cc:	4b1f      	ldr	r3, [pc, #124]	; (800274c <main+0x134>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d01f      	beq.n	8002714 <main+0xfc>
		HAL_IWDG_Refresh(&hiwdg);
 80026d4:	481e      	ldr	r0, [pc, #120]	; (8002750 <main+0x138>)
 80026d6:	f004 f959 	bl	800698c <HAL_IWDG_Refresh>
			  parseCanMessageQueue();
 80026da:	f001 fc97 	bl	800400c <parseCanMessageQueue>
			  if(gu32PayloadQueueEnqueue == 0)
 80026de:	4b11      	ldr	r3, [pc, #68]	; (8002724 <main+0x10c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0d4      	beq.n	8002690 <main+0x78>
		  if(gu32GSMHangTimer == 0)
 80026e6:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <main+0x13c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0da      	beq.n	80026a4 <main+0x8c>
		  operateGSMSIM868();
 80026ee:	f7ff fcc9 	bl	8002084 <operateGSMSIM868>
		if(gu32LEDDelay == 0)
 80026f2:	4b15      	ldr	r3, [pc, #84]	; (8002748 <main+0x130>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0d7      	beq.n	80026aa <main+0x92>
		 if((gu32SystemResetTimer == 0) || ((FOTACompleteFlag == TRUE) && (isQueueEmpty(&gsmPayload) == 1)))
 80026fa:	4b0d      	ldr	r3, [pc, #52]	; (8002730 <main+0x118>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	b143      	cbz	r3, 8002712 <main+0xfa>
 8002700:	4b15      	ldr	r3, [pc, #84]	; (8002758 <main+0x140>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0e1      	beq.n	80026cc <main+0xb4>
 8002708:	480c      	ldr	r0, [pc, #48]	; (800273c <main+0x124>)
 800270a:	f000 fec9 	bl	80034a0 <isQueueEmpty>
 800270e:	2801      	cmp	r0, #1
 8002710:	d1dc      	bne.n	80026cc <main+0xb4>
			 while(1){}
 8002712:	e7fe      	b.n	8002712 <main+0xfa>
	  		SubRevicedString();
 8002714:	f001 fa5a 	bl	8003bcc <SubRevicedString>
 8002718:	e7dc      	b.n	80026d4 <main+0xbc>
 800271a:	bf00      	nop
 800271c:	200044cc 	.word	0x200044cc
 8002720:	40013800 	.word	0x40013800
 8002724:	20002fc4 	.word	0x20002fc4
 8002728:	00124f80 	.word	0x00124f80
 800272c:	20002fe8 	.word	0x20002fe8
 8002730:	20002ff8 	.word	0x20002ff8
 8002734:	02255100 	.word	0x02255100
 8002738:	2000152c 	.word	0x2000152c
 800273c:	20004340 	.word	0x20004340
 8002740:	000493e0 	.word	0x000493e0
 8002744:	48000400 	.word	0x48000400
 8002748:	20002fd4 	.word	0x20002fd4
 800274c:	200021c8 	.word	0x200021c8
 8002750:	200043bc 	.word	0x200043bc
 8002754:	20002fcc 	.word	0x20002fcc
 8002758:	2000233c 	.word	0x2000233c

0800275c <assert_failed>:
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800275c:	4770      	bx	lr
	...

08002760 <updateCanPayload>:
	//itoa(gu32RunHourMM,gau8RunHrMM,PAYLOAD_DATA_STRING_RADIX);

}

void updateCanPayload(uint32_t data ,char * systemPayload )
{
 8002760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002764:	b085      	sub	sp, #20
 8002766:	4605      	mov	r5, r0
 8002768:	460c      	mov	r4, r1
	char temp[10] = "";
 800276a:	2300      	movs	r3, #0
 800276c:	9301      	str	r3, [sp, #4]
 800276e:	9302      	str	r3, [sp, #8]
 8002770:	f8ad 300c 	strh.w	r3, [sp, #12]
	uint8_t CANTempData = 0;
	if(gu64CanMessageArray[data] != 0 )
 8002774:	4b68      	ldr	r3, [pc, #416]	; (8002918 <updateCanPayload+0x1b8>)
 8002776:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800277a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277e:	4313      	orrs	r3, r2
 8002780:	f000 80a1 	beq.w	80028c6 <updateCanPayload+0x166>
	{
		strcat((char *)systemPayload,"^");
 8002784:	4608      	mov	r0, r1
 8002786:	f7fe f923 	bl	80009d0 <strlen>
 800278a:	4b64      	ldr	r3, [pc, #400]	; (800291c <updateCanPayload+0x1bc>)
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	5223      	strh	r3, [r4, r0]
		strcat((char *)systemPayload,"0x");
 8002790:	4620      	mov	r0, r4
 8002792:	f7fe f91d 	bl	80009d0 <strlen>
 8002796:	1822      	adds	r2, r4, r0
 8002798:	4b61      	ldr	r3, [pc, #388]	; (8002920 <updateCanPayload+0x1c0>)
 800279a:	8819      	ldrh	r1, [r3, #0]
 800279c:	789b      	ldrb	r3, [r3, #2]
 800279e:	5221      	strh	r1, [r4, r0]
 80027a0:	7093      	strb	r3, [r2, #2]
		itoa(gu32CanConfigurationArray[data] ,temp,CAN_PAYLOADSTRING_RADIX);
 80027a2:	2210      	movs	r2, #16
 80027a4:	a901      	add	r1, sp, #4
 80027a6:	4b5f      	ldr	r3, [pc, #380]	; (8002924 <updateCanPayload+0x1c4>)
 80027a8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80027ac:	f007 fb36 	bl	8009e1c <itoa>
		strcat((char *)systemPayload,temp);
 80027b0:	a901      	add	r1, sp, #4
 80027b2:	4620      	mov	r0, r4
 80027b4:	f007 fc34 	bl	800a020 <strcat>
		strcat((char *)systemPayload,",");
 80027b8:	4620      	mov	r0, r4
 80027ba:	f7fe f909 	bl	80009d0 <strlen>
 80027be:	4b5a      	ldr	r3, [pc, #360]	; (8002928 <updateCanPayload+0x1c8>)
 80027c0:	881e      	ldrh	r6, [r3, #0]
 80027c2:	5226      	strh	r6, [r4, r0]
		CANTempData = (((uint64_t)gu64CanMessageArray[data] >> 56) & 255);
 80027c4:	f8df 9150 	ldr.w	r9, [pc, #336]	; 8002918 <updateCanPayload+0x1b8>
 80027c8:	eb09 08c5 	add.w	r8, r9, r5, lsl #3
		sprintf(temp,"%02X",CANTempData);
 80027cc:	4f57      	ldr	r7, [pc, #348]	; (800292c <updateCanPayload+0x1cc>)
 80027ce:	f898 2007 	ldrb.w	r2, [r8, #7]
 80027d2:	4639      	mov	r1, r7
 80027d4:	a801      	add	r0, sp, #4
 80027d6:	f007 fc03 	bl	8009fe0 <siprintf>
        CANTempData = 0;
//		itoa((((uint64_t)gu64CanMessageArray[data] >> 56) & 255),temp,CAN_PAYLOADSTRING_RADIX);
		strcat((char *)systemPayload,temp);
 80027da:	a901      	add	r1, sp, #4
 80027dc:	4620      	mov	r0, r4
 80027de:	f007 fc1f 	bl	800a020 <strcat>
		strcat((char *)systemPayload,",");
 80027e2:	4620      	mov	r0, r4
 80027e4:	f7fe f8f4 	bl	80009d0 <strlen>
 80027e8:	5226      	strh	r6, [r4, r0]
		CANTempData = (((uint64_t)gu64CanMessageArray[data] >> 48) & 255);
		sprintf(temp,"%02X",CANTempData);
 80027ea:	f898 2006 	ldrb.w	r2, [r8, #6]
 80027ee:	4639      	mov	r1, r7
 80027f0:	a801      	add	r0, sp, #4
 80027f2:	f007 fbf5 	bl	8009fe0 <siprintf>
		CANTempData = 0;
//		itoa((((uint64_t)gu64CanMessageArray[data] >> 48) & 255),temp,CAN_PAYLOADSTRING_RADIX);
		strcat((char *)systemPayload,temp);
 80027f6:	a901      	add	r1, sp, #4
 80027f8:	4620      	mov	r0, r4
 80027fa:	f007 fc11 	bl	800a020 <strcat>
		strcat((char *)systemPayload,",");
 80027fe:	4620      	mov	r0, r4
 8002800:	f7fe f8e6 	bl	80009d0 <strlen>
 8002804:	5226      	strh	r6, [r4, r0]
		CANTempData = (((uint64_t)gu64CanMessageArray[data] >> 40) & 255);
		sprintf(temp,"%02X",CANTempData);
 8002806:	f898 2005 	ldrb.w	r2, [r8, #5]
 800280a:	4639      	mov	r1, r7
 800280c:	a801      	add	r0, sp, #4
 800280e:	f007 fbe7 	bl	8009fe0 <siprintf>
		CANTempData = 0;
//		itoa((((uint64_t)gu64CanMessageArray[data] >> 40) & 255),temp,CAN_PAYLOADSTRING_RADIX);
		strcat((char *)systemPayload,temp);
 8002812:	a901      	add	r1, sp, #4
 8002814:	4620      	mov	r0, r4
 8002816:	f007 fc03 	bl	800a020 <strcat>
		strcat((char *)systemPayload,",");
 800281a:	4620      	mov	r0, r4
 800281c:	f7fe f8d8 	bl	80009d0 <strlen>
 8002820:	5226      	strh	r6, [r4, r0]
		CANTempData = (((uint64_t)gu64CanMessageArray[data] >> 32) & 255);
		sprintf(temp,"%02X",CANTempData);
 8002822:	f898 2004 	ldrb.w	r2, [r8, #4]
 8002826:	4639      	mov	r1, r7
 8002828:	a801      	add	r0, sp, #4
 800282a:	f007 fbd9 	bl	8009fe0 <siprintf>
		CANTempData = 0;
//		itoa((((uint64_t)gu64CanMessageArray[data] >> 32) & 255),temp,CAN_PAYLOADSTRING_RADIX);
		strcat((char *)systemPayload,temp);
 800282e:	a901      	add	r1, sp, #4
 8002830:	4620      	mov	r0, r4
 8002832:	f007 fbf5 	bl	800a020 <strcat>
		strcat((char *)systemPayload,",");
 8002836:	4620      	mov	r0, r4
 8002838:	f7fe f8ca 	bl	80009d0 <strlen>
 800283c:	5226      	strh	r6, [r4, r0]
//		itoa((((uint64_t)gu64CanMessageArray[data] >> 24) & 255),temp,CAN_PAYLOADSTRING_RADIX);
		CANTempData = (((uint64_t)gu64CanMessageArray[data] >> 24) & 255);
 800283e:	f859 2035 	ldr.w	r2, [r9, r5, lsl #3]
		sprintf(temp,"%02X",CANTempData);
 8002842:	0e12      	lsrs	r2, r2, #24
 8002844:	4639      	mov	r1, r7
 8002846:	a801      	add	r0, sp, #4
 8002848:	f007 fbca 	bl	8009fe0 <siprintf>
		CANTempData = 0;
		strcat((char *)systemPayload,temp);
 800284c:	a901      	add	r1, sp, #4
 800284e:	4620      	mov	r0, r4
 8002850:	f007 fbe6 	bl	800a020 <strcat>
		strcat((char *)systemPayload,",");
 8002854:	4620      	mov	r0, r4
 8002856:	f7fe f8bb 	bl	80009d0 <strlen>
 800285a:	5226      	strh	r6, [r4, r0]
//		itoa((((uint64_t)gu64CanMessageArray[data] >> 16) & 255),temp,CAN_PAYLOADSTRING_RADIX);
		CANTempData = (((uint64_t)gu64CanMessageArray[data] >> 16) & 255);
 800285c:	f859 2035 	ldr.w	r2, [r9, r5, lsl #3]
		sprintf(temp,"%02X",CANTempData);
 8002860:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8002864:	4639      	mov	r1, r7
 8002866:	a801      	add	r0, sp, #4
 8002868:	f007 fbba 	bl	8009fe0 <siprintf>
		CANTempData = 0;
		strcat((char *)systemPayload,temp);
 800286c:	a901      	add	r1, sp, #4
 800286e:	4620      	mov	r0, r4
 8002870:	f007 fbd6 	bl	800a020 <strcat>
		strcat((char *)systemPayload,",");
 8002874:	4620      	mov	r0, r4
 8002876:	f7fe f8ab 	bl	80009d0 <strlen>
 800287a:	5226      	strh	r6, [r4, r0]
//		itoa(((uint64_t)(gu64CanMessageArray[data] >> 8) & 255),temp,CAN_PAYLOADSTRING_RADIX);
		CANTempData = (((uint64_t)gu64CanMessageArray[data] >> 8) & 255);
 800287c:	f859 2035 	ldr.w	r2, [r9, r5, lsl #3]
		sprintf(temp,"%02X",CANTempData);
 8002880:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002884:	4639      	mov	r1, r7
 8002886:	a801      	add	r0, sp, #4
 8002888:	f007 fbaa 	bl	8009fe0 <siprintf>
		CANTempData = 0;
		strcat((char *)systemPayload,temp);
 800288c:	a901      	add	r1, sp, #4
 800288e:	4620      	mov	r0, r4
 8002890:	f007 fbc6 	bl	800a020 <strcat>
		strcat((char *)systemPayload,",");
 8002894:	4620      	mov	r0, r4
 8002896:	f7fe f89b 	bl	80009d0 <strlen>
 800289a:	5226      	strh	r6, [r4, r0]
//		itoa(((uint64_t)(gu64CanMessageArray[data]) & 255),temp,CAN_PAYLOADSTRING_RADIX); //255
		CANTempData = (((uint64_t)gu64CanMessageArray[data] ) & 255);
		sprintf(temp,"%02X",CANTempData);
 800289c:	f819 2035 	ldrb.w	r2, [r9, r5, lsl #3]
 80028a0:	4639      	mov	r1, r7
 80028a2:	a801      	add	r0, sp, #4
 80028a4:	f007 fb9c 	bl	8009fe0 <siprintf>
		CANTempData = 0;
		strcat((char *)systemPayload,temp);
 80028a8:	a901      	add	r1, sp, #4
 80028aa:	4620      	mov	r0, r4
 80028ac:	f007 fbb8 	bl	800a020 <strcat>
		strcat((char *)systemPayload,",");
 80028b0:	4620      	mov	r0, r4
 80028b2:	f7fe f88d 	bl	80009d0 <strlen>
 80028b6:	5226      	strh	r6, [r4, r0]

		/*Clear Payload Array*/
		/* Removed after discussion with team that we should keep previous data in case of CAN communication not available */
		gu64CanMessageArray[data] = 0;
 80028b8:	2200      	movs	r2, #0
 80028ba:	2300      	movs	r3, #0
 80028bc:	e9c8 2300 	strd	r2, r3, [r8]
		strcat((char *)systemPayload,"0x");
		itoa(gu32CanConfigurationArray[data] ,temp,CAN_PAYLOADSTRING_RADIX);
		strcat((char *)systemPayload,temp);
		strcat((char *)systemPayload,",0,0,0,0,0,0,0,0,");//",0,0,0,0,0,0,0,0,"
	}
}
 80028c0:	b005      	add	sp, #20
 80028c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		strcat((char *)systemPayload,"^");
 80028c6:	4608      	mov	r0, r1
 80028c8:	f7fe f882 	bl	80009d0 <strlen>
 80028cc:	4b13      	ldr	r3, [pc, #76]	; (800291c <updateCanPayload+0x1bc>)
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	5223      	strh	r3, [r4, r0]
		strcat((char *)systemPayload,"0x");
 80028d2:	4620      	mov	r0, r4
 80028d4:	f7fe f87c 	bl	80009d0 <strlen>
 80028d8:	1822      	adds	r2, r4, r0
 80028da:	4b11      	ldr	r3, [pc, #68]	; (8002920 <updateCanPayload+0x1c0>)
 80028dc:	8819      	ldrh	r1, [r3, #0]
 80028de:	789b      	ldrb	r3, [r3, #2]
 80028e0:	5221      	strh	r1, [r4, r0]
 80028e2:	7093      	strb	r3, [r2, #2]
		itoa(gu32CanConfigurationArray[data] ,temp,CAN_PAYLOADSTRING_RADIX);
 80028e4:	2210      	movs	r2, #16
 80028e6:	a901      	add	r1, sp, #4
 80028e8:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <updateCanPayload+0x1c4>)
 80028ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80028ee:	f007 fa95 	bl	8009e1c <itoa>
		strcat((char *)systemPayload,temp);
 80028f2:	a901      	add	r1, sp, #4
 80028f4:	4620      	mov	r0, r4
 80028f6:	f007 fb93 	bl	800a020 <strcat>
		strcat((char *)systemPayload,",0,0,0,0,0,0,0,0,");//",0,0,0,0,0,0,0,0,"
 80028fa:	4620      	mov	r0, r4
 80028fc:	f7fe f868 	bl	80009d0 <strlen>
 8002900:	4607      	mov	r7, r0
 8002902:	1826      	adds	r6, r4, r0
 8002904:	4d0a      	ldr	r5, [pc, #40]	; (8002930 <updateCanPayload+0x1d0>)
 8002906:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002908:	51e0      	str	r0, [r4, r7]
 800290a:	6071      	str	r1, [r6, #4]
 800290c:	60b2      	str	r2, [r6, #8]
 800290e:	60f3      	str	r3, [r6, #12]
 8002910:	882b      	ldrh	r3, [r5, #0]
 8002912:	8233      	strh	r3, [r6, #16]
}
 8002914:	e7d4      	b.n	80028c0 <updateCanPayload+0x160>
 8002916:	bf00      	nop
 8002918:	200026f0 	.word	0x200026f0
 800291c:	0800b694 	.word	0x0800b694
 8002920:	0800b698 	.word	0x0800b698
 8002924:	200015f8 	.word	0x200015f8
 8002928:	0800b6b4 	.word	0x0800b6b4
 800292c:	0800b69c 	.word	0x0800b69c
 8002930:	0800b6a4 	.word	0x0800b6a4

08002934 <CANIDPrase>:
			break;
	}//end of switch(DiagnosticStatus)

}//end of void DiagnosticString(char * systemPayload,enmDiagnosticStatus DiagnosticStatus)
void CANIDPrase(char * systemPayload)
{
 8002934:	b530      	push	{r4, r5, lr}
 8002936:	b085      	sub	sp, #20
 8002938:	4605      	mov	r5, r0
	uint8_t CANIDloop = 1;

	char temp[10] = "";
 800293a:	2300      	movs	r3, #0
 800293c:	9301      	str	r3, [sp, #4]
 800293e:	9302      	str	r3, [sp, #8]
 8002940:	f8ad 300c 	strh.w	r3, [sp, #12]
	for(CANIDloop=1; CANIDloop <= NoOfCANID; CANIDloop++)
 8002944:	2401      	movs	r4, #1
 8002946:	4b0d      	ldr	r3, [pc, #52]	; (800297c <CANIDPrase+0x48>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	42a3      	cmp	r3, r4
 800294c:	d313      	bcc.n	8002976 <CANIDPrase+0x42>
	{
		itoa(gu32CanConfigurationArray[CANIDloop],temp,CAN_PAYLOADSTRING_RADIX);
 800294e:	2210      	movs	r2, #16
 8002950:	a901      	add	r1, sp, #4
 8002952:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <CANIDPrase+0x4c>)
 8002954:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002958:	f007 fa60 	bl	8009e1c <itoa>
		strcat((char *)systemPayload,temp);
 800295c:	a901      	add	r1, sp, #4
 800295e:	4628      	mov	r0, r5
 8002960:	f007 fb5e 	bl	800a020 <strcat>
		strcat((char *)systemPayload,",");
 8002964:	4628      	mov	r0, r5
 8002966:	f7fe f833 	bl	80009d0 <strlen>
 800296a:	4b06      	ldr	r3, [pc, #24]	; (8002984 <CANIDPrase+0x50>)
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	522b      	strh	r3, [r5, r0]
	for(CANIDloop=1; CANIDloop <= NoOfCANID; CANIDloop++)
 8002970:	3401      	adds	r4, #1
 8002972:	b2e4      	uxtb	r4, r4
 8002974:	e7e7      	b.n	8002946 <CANIDPrase+0x12>
	}
}
 8002976:	b005      	add	sp, #20
 8002978:	bd30      	pop	{r4, r5, pc}
 800297a:	bf00      	nop
 800297c:	200019e8 	.word	0x200019e8
 8002980:	200015f8 	.word	0x200015f8
 8002984:	0800b6b4 	.word	0x0800b6b4

08002988 <PaylodTime>:

void PaylodTime(char * systemPayload)
{
 8002988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800298a:	b085      	sub	sp, #20
 800298c:	4605      	mov	r5, r0
	char tempArray[15];
#if(ENABLERTC == TRUE)
//		 Time Stamp		// added by 100229 26-03-2020
		memset((char *) tempArray, 0x00, sizeof(tempArray));
 800298e:	2600      	movs	r6, #0
 8002990:	9600      	str	r6, [sp, #0]
 8002992:	9601      	str	r6, [sp, #4]
 8002994:	9602      	str	r6, [sp, #8]
 8002996:	f8cd 600b 	str.w	r6, [sp, #11]
		Get_Time_Date();
 800299a:	f001 fd93 	bl	80044c4 <Get_Time_Date>
		tempArray[2] = ((gDate.Month / 10) + 0x30);
		tempArray[3] = ((gDate.Month % 10) + 0x30);
		tempArray[4] = ((gDate.Date / 10) + 0x30);
		tempArray[5] = ((gDate.Date % 10) + 0x30);*/

		tempArray[0] = ((RTC_Bcd2ToByte(gDate.Year) / 10) + 0x30);
 800299e:	4f4c      	ldr	r7, [pc, #304]	; (8002ad0 <PaylodTime+0x148>)
 80029a0:	78f8      	ldrb	r0, [r7, #3]
 80029a2:	f005 fdf6 	bl	8008592 <RTC_Bcd2ToByte>
 80029a6:	4c4b      	ldr	r4, [pc, #300]	; (8002ad4 <PaylodTime+0x14c>)
 80029a8:	fba4 2300 	umull	r2, r3, r4, r0
 80029ac:	08db      	lsrs	r3, r3, #3
 80029ae:	3330      	adds	r3, #48	; 0x30
 80029b0:	f88d 3000 	strb.w	r3, [sp]
		tempArray[1] = ((RTC_Bcd2ToByte(gDate.Year) % 10) + 0x30);
 80029b4:	78f8      	ldrb	r0, [r7, #3]
 80029b6:	f005 fdec 	bl	8008592 <RTC_Bcd2ToByte>
 80029ba:	fba4 2300 	umull	r2, r3, r4, r0
 80029be:	08db      	lsrs	r3, r3, #3
 80029c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80029c4:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 80029c8:	3030      	adds	r0, #48	; 0x30
 80029ca:	f88d 0001 	strb.w	r0, [sp, #1]
		tempArray[2] = ((RTC_Bcd2ToByte(gDate.Month) / 10) + 0x30);
 80029ce:	7878      	ldrb	r0, [r7, #1]
 80029d0:	f005 fddf 	bl	8008592 <RTC_Bcd2ToByte>
 80029d4:	fba4 2300 	umull	r2, r3, r4, r0
 80029d8:	08db      	lsrs	r3, r3, #3
 80029da:	3330      	adds	r3, #48	; 0x30
 80029dc:	f88d 3002 	strb.w	r3, [sp, #2]
		tempArray[3] = ((RTC_Bcd2ToByte(gDate.Month) % 10) + 0x30);
 80029e0:	7878      	ldrb	r0, [r7, #1]
 80029e2:	f005 fdd6 	bl	8008592 <RTC_Bcd2ToByte>
 80029e6:	fba4 2300 	umull	r2, r3, r4, r0
 80029ea:	08db      	lsrs	r3, r3, #3
 80029ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80029f0:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 80029f4:	3030      	adds	r0, #48	; 0x30
 80029f6:	f88d 0003 	strb.w	r0, [sp, #3]
		tempArray[4] = ((RTC_Bcd2ToByte(gDate.Date) / 10) + 0x30);
 80029fa:	78b8      	ldrb	r0, [r7, #2]
 80029fc:	f005 fdc9 	bl	8008592 <RTC_Bcd2ToByte>
 8002a00:	fba4 2300 	umull	r2, r3, r4, r0
 8002a04:	08db      	lsrs	r3, r3, #3
 8002a06:	3330      	adds	r3, #48	; 0x30
 8002a08:	f88d 3004 	strb.w	r3, [sp, #4]
		tempArray[5] = ((RTC_Bcd2ToByte(gDate.Date) % 10) + 0x30);
 8002a0c:	78b8      	ldrb	r0, [r7, #2]
 8002a0e:	f005 fdc0 	bl	8008592 <RTC_Bcd2ToByte>
 8002a12:	fba4 2300 	umull	r2, r3, r4, r0
 8002a16:	08db      	lsrs	r3, r3, #3
 8002a18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002a1c:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8002a20:	3030      	adds	r0, #48	; 0x30
 8002a22:	f88d 0005 	strb.w	r0, [sp, #5]
		tempArray[6] = ' ';
 8002a26:	2320      	movs	r3, #32
 8002a28:	f88d 3006 	strb.w	r3, [sp, #6]
		tempArray[9] = ((gTime.Minutes / 10) + 0x30);
		tempArray[10] = ((gTime.Minutes % 10) + 0x30);
		tempArray[11] = ((gTime.Seconds / 10) + 0x30);
		tempArray[12] = ((gTime.Seconds % 10) + 0x30);*/

		tempArray[7] = ((RTC_Bcd2ToByte(gTime.Hours) / 10) + 0x30);
 8002a2c:	4f2a      	ldr	r7, [pc, #168]	; (8002ad8 <PaylodTime+0x150>)
 8002a2e:	7838      	ldrb	r0, [r7, #0]
 8002a30:	f005 fdaf 	bl	8008592 <RTC_Bcd2ToByte>
 8002a34:	fba4 2300 	umull	r2, r3, r4, r0
 8002a38:	08db      	lsrs	r3, r3, #3
 8002a3a:	3330      	adds	r3, #48	; 0x30
 8002a3c:	f88d 3007 	strb.w	r3, [sp, #7]
		tempArray[8] = ((RTC_Bcd2ToByte(gTime.Hours) % 10) + 0x30);
 8002a40:	7838      	ldrb	r0, [r7, #0]
 8002a42:	f005 fda6 	bl	8008592 <RTC_Bcd2ToByte>
 8002a46:	fba4 2300 	umull	r2, r3, r4, r0
 8002a4a:	08db      	lsrs	r3, r3, #3
 8002a4c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002a50:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8002a54:	3030      	adds	r0, #48	; 0x30
 8002a56:	f88d 0008 	strb.w	r0, [sp, #8]
		tempArray[9] = ((RTC_Bcd2ToByte(gTime.Minutes) / 10) + 0x30);
 8002a5a:	7878      	ldrb	r0, [r7, #1]
 8002a5c:	f005 fd99 	bl	8008592 <RTC_Bcd2ToByte>
 8002a60:	fba4 2300 	umull	r2, r3, r4, r0
 8002a64:	08db      	lsrs	r3, r3, #3
 8002a66:	3330      	adds	r3, #48	; 0x30
 8002a68:	f88d 3009 	strb.w	r3, [sp, #9]
		tempArray[10] = ((RTC_Bcd2ToByte(gTime.Minutes) % 10) + 0x30);
 8002a6c:	7878      	ldrb	r0, [r7, #1]
 8002a6e:	f005 fd90 	bl	8008592 <RTC_Bcd2ToByte>
 8002a72:	fba4 2300 	umull	r2, r3, r4, r0
 8002a76:	08db      	lsrs	r3, r3, #3
 8002a78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002a7c:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8002a80:	3030      	adds	r0, #48	; 0x30
 8002a82:	f88d 000a 	strb.w	r0, [sp, #10]
		tempArray[11] = ((RTC_Bcd2ToByte(gTime.Seconds) / 10) + 0x30);
 8002a86:	78b8      	ldrb	r0, [r7, #2]
 8002a88:	f005 fd83 	bl	8008592 <RTC_Bcd2ToByte>
 8002a8c:	fba4 2300 	umull	r2, r3, r4, r0
 8002a90:	08db      	lsrs	r3, r3, #3
 8002a92:	3330      	adds	r3, #48	; 0x30
 8002a94:	f88d 300b 	strb.w	r3, [sp, #11]
		tempArray[12] = ((RTC_Bcd2ToByte(gTime.Seconds) % 10) + 0x30);
 8002a98:	78b8      	ldrb	r0, [r7, #2]
 8002a9a:	f005 fd7a 	bl	8008592 <RTC_Bcd2ToByte>
 8002a9e:	fba4 3400 	umull	r3, r4, r4, r0
 8002aa2:	08e4      	lsrs	r4, r4, #3
 8002aa4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002aa8:	eba0 0444 	sub.w	r4, r0, r4, lsl #1
 8002aac:	3430      	adds	r4, #48	; 0x30
 8002aae:	f88d 400c 	strb.w	r4, [sp, #12]
		tempArray[13] = '\0';
 8002ab2:	f88d 600d 	strb.w	r6, [sp, #13]
		strcat((char *)systemPayload,(char * )tempArray);
 8002ab6:	4669      	mov	r1, sp
 8002ab8:	4628      	mov	r0, r5
 8002aba:	f007 fab1 	bl	800a020 <strcat>
		strcat((char *)systemPayload,(char * )",");
 8002abe:	4628      	mov	r0, r5
 8002ac0:	f7fd ff86 	bl	80009d0 <strlen>
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <PaylodTime+0x154>)
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	522b      	strh	r3, [r5, r0]
#endif
}
 8002aca:	b005      	add	sp, #20
 8002acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20002f90 	.word	0x20002f90
 8002ad4:	cccccccd 	.word	0xcccccccd
 8002ad8:	20002f7c 	.word	0x20002f7c
 8002adc:	0800b6b4 	.word	0x0800b6b4

08002ae0 <getMachineDataString>:
{
 8002ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char * systemPayload = malloc(sizeof(char) * GSM_PAYLOAD_MAX_SIZE);
 8002ae2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002ae6:	f007 f99b 	bl	8009e20 <malloc>
 8002aea:	4604      	mov	r4, r0
	gpsState = strstr(gsmInstance.agpsLocationData,": 1,1,");
 8002aec:	4972      	ldr	r1, [pc, #456]	; (8002cb8 <getMachineDataString+0x1d8>)
 8002aee:	4873      	ldr	r0, [pc, #460]	; (8002cbc <getMachineDataString+0x1dc>)
 8002af0:	f007 faba 	bl	800a068 <strstr>
 8002af4:	4b72      	ldr	r3, [pc, #456]	; (8002cc0 <getMachineDataString+0x1e0>)
 8002af6:	6018      	str	r0, [r3, #0]
	if(gpsState != NULL)
 8002af8:	2800      	cmp	r0, #0
 8002afa:	f000 80c4 	beq.w	8002c86 <getMachineDataString+0x1a6>
		gu32LastGPSFlag = 0;
 8002afe:	4d71      	ldr	r5, [pc, #452]	; (8002cc4 <getMachineDataString+0x1e4>)
 8002b00:	2100      	movs	r1, #0
 8002b02:	f8c5 1130 	str.w	r1, [r5, #304]	; 0x130
		memset(agpsTempLocationData,0x00,sizeof(agpsTempLocationData));
 8002b06:	3598      	adds	r5, #152	; 0x98
 8002b08:	2296      	movs	r2, #150	; 0x96
 8002b0a:	4628      	mov	r0, r5
 8002b0c:	f007 f9a6 	bl	8009e5c <memset>
		memcpy(agpsTempLocationData,gsmInstance.agpsLocationData,strlen(gsmInstance.agpsLocationData));
 8002b10:	4e6a      	ldr	r6, [pc, #424]	; (8002cbc <getMachineDataString+0x1dc>)
 8002b12:	4630      	mov	r0, r6
 8002b14:	f7fd ff5c 	bl	80009d0 <strlen>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	4631      	mov	r1, r6
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	f007 f98f 	bl	8009e40 <memcpy>
	if(systemPayload != NULL)
 8002b22:	2c00      	cmp	r4, #0
 8002b24:	f000 80ad 	beq.w	8002c82 <getMachineDataString+0x1a2>
		memset(systemPayload,0x00,sizeof(char) * GSM_PAYLOAD_MAX_SIZE);
 8002b28:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	4620      	mov	r0, r4
 8002b30:	f007 f994 	bl	8009e5c <memset>
		strcpy((char *)systemPayload,(char * )START_OF_FRAME);
 8002b34:	4b64      	ldr	r3, [pc, #400]	; (8002cc8 <getMachineDataString+0x1e8>)
 8002b36:	881b      	ldrh	r3, [r3, #0]
 8002b38:	8023      	strh	r3, [r4, #0]
		strcat((char *)systemPayload,(char * )",");
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f7fd ff48 	bl	80009d0 <strlen>
 8002b40:	4b62      	ldr	r3, [pc, #392]	; (8002ccc <getMachineDataString+0x1ec>)
 8002b42:	881e      	ldrh	r6, [r3, #0]
 8002b44:	5226      	strh	r6, [r4, r0]
		strcat((char *)systemPayload,(char * )dinfo);
 8002b46:	4962      	ldr	r1, [pc, #392]	; (8002cd0 <getMachineDataString+0x1f0>)
 8002b48:	4620      	mov	r0, r4
 8002b4a:	f007 fa69 	bl	800a020 <strcat>
		strcat((char *)systemPayload,(char * )",");
 8002b4e:	4620      	mov	r0, r4
 8002b50:	f7fd ff3e 	bl	80009d0 <strlen>
 8002b54:	5226      	strh	r6, [r4, r0]
		strcat((char *)systemPayload,(char * )MODEL_NUMBER);
 8002b56:	4620      	mov	r0, r4
 8002b58:	f7fd ff3a 	bl	80009d0 <strlen>
 8002b5c:	4684      	mov	ip, r0
 8002b5e:	1827      	adds	r7, r4, r0
 8002b60:	4d5c      	ldr	r5, [pc, #368]	; (8002cd4 <getMachineDataString+0x1f4>)
 8002b62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b64:	f844 000c 	str.w	r0, [r4, ip]
 8002b68:	6079      	str	r1, [r7, #4]
 8002b6a:	60ba      	str	r2, [r7, #8]
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	cd03      	ldmia	r5!, {r0, r1}
 8002b70:	6138      	str	r0, [r7, #16]
 8002b72:	6179      	str	r1, [r7, #20]
		strcat((char *)systemPayload,(char * )",");
 8002b74:	4620      	mov	r0, r4
 8002b76:	f7fd ff2b 	bl	80009d0 <strlen>
 8002b7a:	5226      	strh	r6, [r4, r0]
		PaylodTime(systemPayload);
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	f7ff ff03 	bl	8002988 <PaylodTime>
		strcat((char *)systemPayload,(char * )FIRMWARE_VER);
 8002b82:	4620      	mov	r0, r4
 8002b84:	f7fd ff24 	bl	80009d0 <strlen>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	1821      	adds	r1, r4, r0
 8002b8c:	4a52      	ldr	r2, [pc, #328]	; (8002cd8 <getMachineDataString+0x1f8>)
 8002b8e:	6810      	ldr	r0, [r2, #0]
 8002b90:	50e0      	str	r0, [r4, r3]
 8002b92:	7913      	ldrb	r3, [r2, #4]
 8002b94:	710b      	strb	r3, [r1, #4]
		strcat((char *)systemPayload,(char * )",");
 8002b96:	4620      	mov	r0, r4
 8002b98:	f7fd ff1a 	bl	80009d0 <strlen>
 8002b9c:	5226      	strh	r6, [r4, r0]
		strcat((char *)systemPayload,(char * )BOOT_REGION);
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	f7fd ff16 	bl	80009d0 <strlen>
 8002ba4:	4b4d      	ldr	r3, [pc, #308]	; (8002cdc <getMachineDataString+0x1fc>)
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	5223      	strh	r3, [r4, r0]
		strcat((char *)systemPayload,(char * )",");
 8002baa:	4620      	mov	r0, r4
 8002bac:	f7fd ff10 	bl	80009d0 <strlen>
 8002bb0:	5226      	strh	r6, [r4, r0]
		if(strlen(agpsTempLocationData) > 0)
 8002bb2:	4b44      	ldr	r3, [pc, #272]	; (8002cc4 <getMachineDataString+0x1e4>)
 8002bb4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d069      	beq.n	8002c90 <getMachineDataString+0x1b0>
			strcat((char *)systemPayload,(char *)agpsTempLocationData);
 8002bbc:	4948      	ldr	r1, [pc, #288]	; (8002ce0 <getMachineDataString+0x200>)
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	f007 fa2e 	bl	800a020 <strcat>
		strcat((char *)systemPayload,",");
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	f7fd ff03 	bl	80009d0 <strlen>
 8002bca:	4b40      	ldr	r3, [pc, #256]	; (8002ccc <getMachineDataString+0x1ec>)
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	5223      	strh	r3, [r4, r0]
		updateCanPayload(1, systemPayload );
 8002bd0:	4621      	mov	r1, r4
 8002bd2:	2001      	movs	r0, #1
 8002bd4:	f7ff fdc4 	bl	8002760 <updateCanPayload>
		updateCanPayload(2, systemPayload );
 8002bd8:	4621      	mov	r1, r4
 8002bda:	2002      	movs	r0, #2
 8002bdc:	f7ff fdc0 	bl	8002760 <updateCanPayload>
		updateCanPayload(3, systemPayload );
 8002be0:	4621      	mov	r1, r4
 8002be2:	2003      	movs	r0, #3
 8002be4:	f7ff fdbc 	bl	8002760 <updateCanPayload>
		updateCanPayload(4, systemPayload );
 8002be8:	4621      	mov	r1, r4
 8002bea:	2004      	movs	r0, #4
 8002bec:	f7ff fdb8 	bl	8002760 <updateCanPayload>
		updateCanPayload(5, systemPayload );
 8002bf0:	4621      	mov	r1, r4
 8002bf2:	2005      	movs	r0, #5
 8002bf4:	f7ff fdb4 	bl	8002760 <updateCanPayload>
		updateCanPayload(6, systemPayload );
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	2006      	movs	r0, #6
 8002bfc:	f7ff fdb0 	bl	8002760 <updateCanPayload>
		updateCanPayload(7, systemPayload );
 8002c00:	4621      	mov	r1, r4
 8002c02:	2007      	movs	r0, #7
 8002c04:	f7ff fdac 	bl	8002760 <updateCanPayload>
		updateCanPayload(8, systemPayload );
 8002c08:	4621      	mov	r1, r4
 8002c0a:	2008      	movs	r0, #8
 8002c0c:	f7ff fda8 	bl	8002760 <updateCanPayload>
		updateCanPayload(9, systemPayload );
 8002c10:	4621      	mov	r1, r4
 8002c12:	2009      	movs	r0, #9
 8002c14:	f7ff fda4 	bl	8002760 <updateCanPayload>
		if(strlen(gsmInstance.agsmSignalStrength ) > 0)
 8002c18:	4b28      	ldr	r3, [pc, #160]	; (8002cbc <getMachineDataString+0x1dc>)
 8002c1a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d03c      	beq.n	8002c9c <getMachineDataString+0x1bc>
			strcat((char *)systemPayload,(char * )gsmInstance.agsmSignalStrength);
 8002c22:	4930      	ldr	r1, [pc, #192]	; (8002ce4 <getMachineDataString+0x204>)
 8002c24:	4620      	mov	r0, r4
 8002c26:	f007 f9fb 	bl	800a020 <strcat>
		strcat((char *)systemPayload,(char * )",");
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	f7fd fed0 	bl	80009d0 <strlen>
 8002c30:	4b26      	ldr	r3, [pc, #152]	; (8002ccc <getMachineDataString+0x1ec>)
 8002c32:	881b      	ldrh	r3, [r3, #0]
 8002c34:	5223      	strh	r3, [r4, r0]
		if(gu32LastGPSFlag == 1)
 8002c36:	4b23      	ldr	r3, [pc, #140]	; (8002cc4 <getMachineDataString+0x1e4>)
 8002c38:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d033      	beq.n	8002ca8 <getMachineDataString+0x1c8>
			strcat((char *)systemPayload,"0");
 8002c40:	4620      	mov	r0, r4
 8002c42:	f7fd fec5 	bl	80009d0 <strlen>
 8002c46:	4b28      	ldr	r3, [pc, #160]	; (8002ce8 <getMachineDataString+0x208>)
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	5223      	strh	r3, [r4, r0]
		strcat((char *)systemPayload,(char * )",");
 8002c4c:	4620      	mov	r0, r4
 8002c4e:	f7fd febf 	bl	80009d0 <strlen>
 8002c52:	4b1e      	ldr	r3, [pc, #120]	; (8002ccc <getMachineDataString+0x1ec>)
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	5223      	strh	r3, [r4, r0]
		strcat((char *)systemPayload,(char * )END_OF_FRAME);
 8002c58:	4620      	mov	r0, r4
 8002c5a:	f7fd feb9 	bl	80009d0 <strlen>
 8002c5e:	4b23      	ldr	r3, [pc, #140]	; (8002cec <getMachineDataString+0x20c>)
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	5223      	strh	r3, [r4, r0]
		gu32CanIdsLoopCounter = 1;
 8002c64:	4b16      	ldr	r3, [pc, #88]	; (8002cc0 <getMachineDataString+0x1e0>)
 8002c66:	2201      	movs	r2, #1
 8002c68:	60da      	str	r2, [r3, #12]
		if(gbitMcuReset == 1)
 8002c6a:	7c1b      	ldrb	r3, [r3, #16]
 8002c6c:	b14b      	cbz	r3, 8002c82 <getMachineDataString+0x1a2>
			gbitMcuReset = 0;
 8002c6e:	4b14      	ldr	r3, [pc, #80]	; (8002cc0 <getMachineDataString+0x1e0>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	741a      	strb	r2, [r3, #16]
			payload_length = strlen((char *)systemPayload);
 8002c74:	4620      	mov	r0, r4
 8002c76:	f7fd feab 	bl	80009d0 <strlen>
			systemPayload[payload_length - 3] = '1';
 8002c7a:	b280      	uxth	r0, r0
 8002c7c:	3803      	subs	r0, #3
 8002c7e:	2331      	movs	r3, #49	; 0x31
 8002c80:	5423      	strb	r3, [r4, r0]
}
 8002c82:	4620      	mov	r0, r4
 8002c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gu32LastGPSFlag = 1;
 8002c86:	4b0f      	ldr	r3, [pc, #60]	; (8002cc4 <getMachineDataString+0x1e4>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 8002c8e:	e748      	b.n	8002b22 <getMachineDataString+0x42>
			strcat((char *)systemPayload,(char *)gpu8NoString);
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <getMachineDataString+0x1e0>)
 8002c92:	6859      	ldr	r1, [r3, #4]
 8002c94:	4620      	mov	r0, r4
 8002c96:	f007 f9c3 	bl	800a020 <strcat>
 8002c9a:	e793      	b.n	8002bc4 <getMachineDataString+0xe4>
			strcat((char *)systemPayload,gpu8Norssi);
 8002c9c:	4b08      	ldr	r3, [pc, #32]	; (8002cc0 <getMachineDataString+0x1e0>)
 8002c9e:	6899      	ldr	r1, [r3, #8]
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	f007 f9bd 	bl	800a020 <strcat>
 8002ca6:	e7c0      	b.n	8002c2a <getMachineDataString+0x14a>
			strcat((char *)systemPayload,"1");
 8002ca8:	4620      	mov	r0, r4
 8002caa:	f7fd fe91 	bl	80009d0 <strlen>
 8002cae:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <getMachineDataString+0x210>)
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	5223      	strh	r3, [r4, r0]
 8002cb4:	e7ca      	b.n	8002c4c <getMachineDataString+0x16c>
 8002cb6:	bf00      	nop
 8002cb8:	0800b6b8 	.word	0x0800b6b8
 8002cbc:	200031d0 	.word	0x200031d0
 8002cc0:	20001534 	.word	0x20001534
 8002cc4:	20002208 	.word	0x20002208
 8002cc8:	0800b588 	.word	0x0800b588
 8002ccc:	0800b6b4 	.word	0x0800b6b4
 8002cd0:	20000020 	.word	0x20000020
 8002cd4:	0800b6c0 	.word	0x0800b6c0
 8002cd8:	0800b6d8 	.word	0x0800b6d8
 8002cdc:	0800b6e0 	.word	0x0800b6e0
 8002ce0:	200022a0 	.word	0x200022a0
 8002ce4:	20003266 	.word	0x20003266
 8002ce8:	0800b604 	.word	0x0800b604
 8002cec:	0800b5d0 	.word	0x0800b5d0
 8002cf0:	0800b658 	.word	0x0800b658

08002cf4 <updateInputVoltage>:
{
//	sprintf(gcSystemSupplyVoltage,"%.2f",gfInputSupplyVoltage);
	uint8_t Integer = 0;
	float Frac =0;
	uint16_t ftoi = 0;
	if(Volt > 0)
 8002cf4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cfc:	dd49      	ble.n	8002d92 <updateInputVoltage+0x9e>
{
 8002cfe:	b410      	push	{r4}
 8002d00:	b083      	sub	sp, #12
	{
		Integer = Volt;
 8002d02:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8002d06:	edcd 7a01 	vstr	s15, [sp, #4]
 8002d0a:	f89d 2004 	ldrb.w	r2, [sp, #4]
		Frac = (Volt - (int)Volt);
 8002d0e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002d12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d16:	ee30 0a67 	vsub.f32	s0, s0, s15
		ftoi = Frac*100;
 8002d1a:	eddf 7a21 	vldr	s15, [pc, #132]	; 8002da0 <updateInputVoltage+0xac>
 8002d1e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002d22:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8002d26:	ee10 3a10 	vmov	r3, s0
 8002d2a:	b29b      	uxth	r3, r3

		if(Integer > 10)
 8002d2c:	2a0a      	cmp	r2, #10
 8002d2e:	d924      	bls.n	8002d7a <updateInputVoltage+0x86>
		{
			voltage[0] = (Integer/10)+48;
 8002d30:	491c      	ldr	r1, [pc, #112]	; (8002da4 <updateInputVoltage+0xb0>)
 8002d32:	fba1 0102 	umull	r0, r1, r1, r2
 8002d36:	08c9      	lsrs	r1, r1, #3
 8002d38:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8002d3c:	481a      	ldr	r0, [pc, #104]	; (8002da8 <updateInputVoltage+0xb4>)
 8002d3e:	7504      	strb	r4, [r0, #20]
			voltage[1] = (Integer%10)+48;
 8002d40:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002d44:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
 8002d48:	3230      	adds	r2, #48	; 0x30
 8002d4a:	7542      	strb	r2, [r0, #21]
		{
			voltage[0] = '0';
			voltage[1] = Integer+48;
		}

		voltage[2] = '.' ;
 8002d4c:	4a16      	ldr	r2, [pc, #88]	; (8002da8 <updateInputVoltage+0xb4>)
 8002d4e:	212e      	movs	r1, #46	; 0x2e
 8002d50:	7591      	strb	r1, [r2, #22]

		if(ftoi > 10)
 8002d52:	2b0a      	cmp	r3, #10
 8002d54:	d917      	bls.n	8002d86 <updateInputVoltage+0x92>
		{
			voltage[3] = (ftoi/10)+48;
 8002d56:	4a13      	ldr	r2, [pc, #76]	; (8002da4 <updateInputVoltage+0xb0>)
 8002d58:	fba2 1203 	umull	r1, r2, r2, r3
 8002d5c:	08d2      	lsrs	r2, r2, #3
 8002d5e:	f102 0030 	add.w	r0, r2, #48	; 0x30
 8002d62:	4911      	ldr	r1, [pc, #68]	; (8002da8 <updateInputVoltage+0xb4>)
 8002d64:	75c8      	strb	r0, [r1, #23]
			voltage[4] = (ftoi%10)+48;
 8002d66:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002d6a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8002d6e:	3330      	adds	r3, #48	; 0x30
 8002d70:	760b      	strb	r3, [r1, #24]
		strcpy(voltage,"0.00");
	}

	//ftoa[0] = "1";

}
 8002d72:	b003      	add	sp, #12
 8002d74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d78:	4770      	bx	lr
			voltage[0] = '0';
 8002d7a:	490b      	ldr	r1, [pc, #44]	; (8002da8 <updateInputVoltage+0xb4>)
 8002d7c:	2030      	movs	r0, #48	; 0x30
 8002d7e:	7508      	strb	r0, [r1, #20]
			voltage[1] = Integer+48;
 8002d80:	4402      	add	r2, r0
 8002d82:	754a      	strb	r2, [r1, #21]
 8002d84:	e7e2      	b.n	8002d4c <updateInputVoltage+0x58>
			voltage[3] = '0';
 8002d86:	4a08      	ldr	r2, [pc, #32]	; (8002da8 <updateInputVoltage+0xb4>)
 8002d88:	2130      	movs	r1, #48	; 0x30
 8002d8a:	75d1      	strb	r1, [r2, #23]
			voltage[4] = ftoi+48;
 8002d8c:	440b      	add	r3, r1
 8002d8e:	7613      	strb	r3, [r2, #24]
 8002d90:	e7ef      	b.n	8002d72 <updateInputVoltage+0x7e>
		strcpy(voltage,"0.00");
 8002d92:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <updateInputVoltage+0xb4>)
 8002d94:	4a05      	ldr	r2, [pc, #20]	; (8002dac <updateInputVoltage+0xb8>)
 8002d96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d9a:	6158      	str	r0, [r3, #20]
 8002d9c:	7619      	strb	r1, [r3, #24]
 8002d9e:	4770      	bx	lr
 8002da0:	42c80000 	.word	0x42c80000
 8002da4:	cccccccd 	.word	0xcccccccd
 8002da8:	20001534 	.word	0x20001534
 8002dac:	0800b6e4 	.word	0x0800b6e4

08002db0 <DiagnosticString>:
{
 8002db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002db4:	b086      	sub	sp, #24
 8002db6:	4604      	mov	r4, r0
 8002db8:	460d      	mov	r5, r1
	char temp[20] = "";
 8002dba:	2300      	movs	r3, #0
 8002dbc:	9301      	str	r3, [sp, #4]
 8002dbe:	9302      	str	r3, [sp, #8]
 8002dc0:	9303      	str	r3, [sp, #12]
 8002dc2:	9304      	str	r3, [sp, #16]
 8002dc4:	9305      	str	r3, [sp, #20]
	switch(DiagnosticStatus)
 8002dc6:	2963      	cmp	r1, #99	; 0x63
 8002dc8:	f200 8238 	bhi.w	800323c <DiagnosticString+0x48c>
 8002dcc:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002dd0:	02360064 	.word	0x02360064
 8002dd4:	00930086 	.word	0x00930086
 8002dd8:	00c600af 	.word	0x00c600af
 8002ddc:	01560120 	.word	0x01560120
 8002de0:	0196017a 	.word	0x0196017a
 8002de4:	01ce01b2 	.word	0x01ce01b2
 8002de8:	023601ea 	.word	0x023601ea
 8002dec:	02360236 	.word	0x02360236
 8002df0:	02360236 	.word	0x02360236
 8002df4:	02360236 	.word	0x02360236
 8002df8:	02360236 	.word	0x02360236
 8002dfc:	02360236 	.word	0x02360236
 8002e00:	02360236 	.word	0x02360236
 8002e04:	02360236 	.word	0x02360236
 8002e08:	02360236 	.word	0x02360236
 8002e0c:	02360236 	.word	0x02360236
 8002e10:	02360236 	.word	0x02360236
 8002e14:	02360236 	.word	0x02360236
 8002e18:	02360236 	.word	0x02360236
 8002e1c:	02360236 	.word	0x02360236
 8002e20:	02360236 	.word	0x02360236
 8002e24:	02360236 	.word	0x02360236
 8002e28:	02360236 	.word	0x02360236
 8002e2c:	02360236 	.word	0x02360236
 8002e30:	02360236 	.word	0x02360236
 8002e34:	02360236 	.word	0x02360236
 8002e38:	02360236 	.word	0x02360236
 8002e3c:	02360236 	.word	0x02360236
 8002e40:	02360236 	.word	0x02360236
 8002e44:	02360236 	.word	0x02360236
 8002e48:	02360236 	.word	0x02360236
 8002e4c:	02360236 	.word	0x02360236
 8002e50:	02360236 	.word	0x02360236
 8002e54:	02360236 	.word	0x02360236
 8002e58:	02360236 	.word	0x02360236
 8002e5c:	02360236 	.word	0x02360236
 8002e60:	02360236 	.word	0x02360236
 8002e64:	02360236 	.word	0x02360236
 8002e68:	02360236 	.word	0x02360236
 8002e6c:	02360236 	.word	0x02360236
 8002e70:	02360236 	.word	0x02360236
 8002e74:	02360236 	.word	0x02360236
 8002e78:	02360236 	.word	0x02360236
 8002e7c:	02360236 	.word	0x02360236
 8002e80:	02360236 	.word	0x02360236
 8002e84:	02360236 	.word	0x02360236
 8002e88:	02360236 	.word	0x02360236
 8002e8c:	02360236 	.word	0x02360236
 8002e90:	02360236 	.word	0x02360236
 8002e94:	02260236 	.word	0x02260236
			strcat((char *)systemPayload,"FS");
 8002e98:	f7fd fd9a 	bl	80009d0 <strlen>
 8002e9c:	1822      	adds	r2, r4, r0
 8002e9e:	4bcf      	ldr	r3, [pc, #828]	; (80031dc <DiagnosticString+0x42c>)
 8002ea0:	8819      	ldrh	r1, [r3, #0]
 8002ea2:	789b      	ldrb	r3, [r3, #2]
 8002ea4:	5221      	strh	r1, [r4, r0]
 8002ea6:	7093      	strb	r3, [r2, #2]
			strcat((char *)systemPayload,(char * )",");
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	f7fd fd91 	bl	80009d0 <strlen>
 8002eae:	4bcc      	ldr	r3, [pc, #816]	; (80031e0 <DiagnosticString+0x430>)
 8002eb0:	881e      	ldrh	r6, [r3, #0]
 8002eb2:	5226      	strh	r6, [r4, r0]
			itoa(DiagnosticStatus,temp,CAN_PAYLOADSTRING_RADIX);
 8002eb4:	2210      	movs	r2, #16
 8002eb6:	a901      	add	r1, sp, #4
 8002eb8:	4628      	mov	r0, r5
 8002eba:	f006 ffaf 	bl	8009e1c <itoa>
			strcat((char *)systemPayload,temp);
 8002ebe:	a901      	add	r1, sp, #4
 8002ec0:	4620      	mov	r0, r4
 8002ec2:	f007 f8ad 	bl	800a020 <strcat>
			strcat((char *)systemPayload,(char * )",");
 8002ec6:	4620      	mov	r0, r4
 8002ec8:	f7fd fd82 	bl	80009d0 <strlen>
 8002ecc:	5226      	strh	r6, [r4, r0]
			FOTACompleteFlag = TRUE;
 8002ece:	4bc5      	ldr	r3, [pc, #788]	; (80031e4 <DiagnosticString+0x434>)
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
}//end of void DiagnosticString(char * systemPayload,enmDiagnosticStatus DiagnosticStatus)
 8002ed6:	b006      	add	sp, #24
 8002ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			strcat((char *)systemPayload,"CAN ID's : ");
 8002edc:	f7fd fd78 	bl	80009d0 <strlen>
 8002ee0:	4605      	mov	r5, r0
 8002ee2:	1826      	adds	r6, r4, r0
 8002ee4:	4bc0      	ldr	r3, [pc, #768]	; (80031e8 <DiagnosticString+0x438>)
 8002ee6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002ee8:	5160      	str	r0, [r4, r5]
 8002eea:	6071      	str	r1, [r6, #4]
 8002eec:	60b2      	str	r2, [r6, #8]
			CANIDPrase(systemPayload);
 8002eee:	4620      	mov	r0, r4
 8002ef0:	f7ff fd20 	bl	8002934 <CANIDPrase>
			break;
 8002ef4:	e7ef      	b.n	8002ed6 <DiagnosticString+0x126>
			strcat((char *)systemPayload,"FF");
 8002ef6:	f7fd fd6b 	bl	80009d0 <strlen>
 8002efa:	1822      	adds	r2, r4, r0
 8002efc:	4bbb      	ldr	r3, [pc, #748]	; (80031ec <DiagnosticString+0x43c>)
 8002efe:	8819      	ldrh	r1, [r3, #0]
 8002f00:	789b      	ldrb	r3, [r3, #2]
 8002f02:	5221      	strh	r1, [r4, r0]
 8002f04:	7093      	strb	r3, [r2, #2]
			strcat((char *)systemPayload,(char * )",");
 8002f06:	4620      	mov	r0, r4
 8002f08:	f7fd fd62 	bl	80009d0 <strlen>
 8002f0c:	4bb4      	ldr	r3, [pc, #720]	; (80031e0 <DiagnosticString+0x430>)
 8002f0e:	881e      	ldrh	r6, [r3, #0]
 8002f10:	5226      	strh	r6, [r4, r0]
			itoa(DiagnosticStatus,temp,CAN_PAYLOADSTRING_RADIX);
 8002f12:	2210      	movs	r2, #16
 8002f14:	a901      	add	r1, sp, #4
 8002f16:	4628      	mov	r0, r5
 8002f18:	f006 ff80 	bl	8009e1c <itoa>
			strcat((char *)systemPayload,temp);
 8002f1c:	a901      	add	r1, sp, #4
 8002f1e:	4620      	mov	r0, r4
 8002f20:	f007 f87e 	bl	800a020 <strcat>
			strcat((char *)systemPayload,(char * )",");
 8002f24:	4620      	mov	r0, r4
 8002f26:	f7fd fd53 	bl	80009d0 <strlen>
 8002f2a:	5226      	strh	r6, [r4, r0]
			break;
 8002f2c:	e7d3      	b.n	8002ed6 <DiagnosticString+0x126>
		strcat((char *)systemPayload,"FR");
 8002f2e:	f7fd fd4f 	bl	80009d0 <strlen>
 8002f32:	1822      	adds	r2, r4, r0
 8002f34:	4bae      	ldr	r3, [pc, #696]	; (80031f0 <DiagnosticString+0x440>)
 8002f36:	8819      	ldrh	r1, [r3, #0]
 8002f38:	789b      	ldrb	r3, [r3, #2]
 8002f3a:	5221      	strh	r1, [r4, r0]
 8002f3c:	7093      	strb	r3, [r2, #2]
		strcat((char *)systemPayload,(char * )",");
 8002f3e:	4620      	mov	r0, r4
 8002f40:	f7fd fd46 	bl	80009d0 <strlen>
 8002f44:	4ba6      	ldr	r3, [pc, #664]	; (80031e0 <DiagnosticString+0x430>)
 8002f46:	881d      	ldrh	r5, [r3, #0]
 8002f48:	5225      	strh	r5, [r4, r0]
		strcat((char *)systemPayload,(char *)gau8FotaURL);
 8002f4a:	49aa      	ldr	r1, [pc, #680]	; (80031f4 <DiagnosticString+0x444>)
 8002f4c:	4620      	mov	r0, r4
 8002f4e:	f007 f867 	bl	800a020 <strcat>
		strcat((char *)systemPayload,(char * )",");
 8002f52:	4620      	mov	r0, r4
 8002f54:	f7fd fd3c 	bl	80009d0 <strlen>
 8002f58:	5225      	strh	r5, [r4, r0]
			break;
 8002f5a:	e7bc      	b.n	8002ed6 <DiagnosticString+0x126>
			strcat((char *)systemPayload,"FF");
 8002f5c:	f7fd fd38 	bl	80009d0 <strlen>
 8002f60:	1822      	adds	r2, r4, r0
 8002f62:	4ba2      	ldr	r3, [pc, #648]	; (80031ec <DiagnosticString+0x43c>)
 8002f64:	8819      	ldrh	r1, [r3, #0]
 8002f66:	789b      	ldrb	r3, [r3, #2]
 8002f68:	5221      	strh	r1, [r4, r0]
 8002f6a:	7093      	strb	r3, [r2, #2]
			strcat((char *)systemPayload,(char * )",");
 8002f6c:	4620      	mov	r0, r4
 8002f6e:	f7fd fd2f 	bl	80009d0 <strlen>
 8002f72:	4b9b      	ldr	r3, [pc, #620]	; (80031e0 <DiagnosticString+0x430>)
 8002f74:	881f      	ldrh	r7, [r3, #0]
 8002f76:	5227      	strh	r7, [r4, r0]
			itoa(DiagnosticStatus,temp,CAN_PAYLOADSTRING_RADIX);
 8002f78:	2210      	movs	r2, #16
 8002f7a:	a901      	add	r1, sp, #4
 8002f7c:	4628      	mov	r0, r5
 8002f7e:	f006 ff4d 	bl	8009e1c <itoa>
			strcat((char *)systemPayload,temp);
 8002f82:	a901      	add	r1, sp, #4
 8002f84:	4620      	mov	r0, r4
 8002f86:	f007 f84b 	bl	800a020 <strcat>
			strcat((char *)systemPayload,(char * )",");
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	f7fd fd20 	bl	80009d0 <strlen>
 8002f90:	5227      	strh	r7, [r4, r0]
			strcat((char *)systemPayload,"Input Supply : ");
 8002f92:	4620      	mov	r0, r4
 8002f94:	f7fd fd1c 	bl	80009d0 <strlen>
 8002f98:	4606      	mov	r6, r0
 8002f9a:	eb04 0c00 	add.w	ip, r4, r0
 8002f9e:	4d96      	ldr	r5, [pc, #600]	; (80031f8 <DiagnosticString+0x448>)
 8002fa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fa2:	51a0      	str	r0, [r4, r6]
 8002fa4:	f8cc 1004 	str.w	r1, [ip, #4]
 8002fa8:	f8cc 2008 	str.w	r2, [ip, #8]
 8002fac:	f8cc 300c 	str.w	r3, [ip, #12]
			updateInputVoltage(gfInputSupplyVoltage);
 8002fb0:	4b92      	ldr	r3, [pc, #584]	; (80031fc <DiagnosticString+0x44c>)
 8002fb2:	ed93 0a00 	vldr	s0, [r3]
 8002fb6:	f7ff fe9d 	bl	8002cf4 <updateInputVoltage>
			strcat((char *)systemPayload,(char * )voltage);
 8002fba:	f8df 825c 	ldr.w	r8, [pc, #604]	; 8003218 <DiagnosticString+0x468>
 8002fbe:	4641      	mov	r1, r8
 8002fc0:	4620      	mov	r0, r4
 8002fc2:	f007 f82d 	bl	800a020 <strcat>
			strcat((char *)systemPayload,(char * )",");
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	f7fd fd02 	bl	80009d0 <strlen>
 8002fcc:	5227      	strh	r7, [r4, r0]
			strcat((char *)systemPayload,"Internal Battery Supply : ");
 8002fce:	4620      	mov	r0, r4
 8002fd0:	f7fd fcfe 	bl	80009d0 <strlen>
 8002fd4:	4684      	mov	ip, r0
 8002fd6:	1826      	adds	r6, r4, r0
 8002fd8:	4d89      	ldr	r5, [pc, #548]	; (8003200 <DiagnosticString+0x450>)
 8002fda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fdc:	f844 000c 	str.w	r0, [r4, ip]
 8002fe0:	6071      	str	r1, [r6, #4]
 8002fe2:	60b2      	str	r2, [r6, #8]
 8002fe4:	60f3      	str	r3, [r6, #12]
 8002fe6:	cd03      	ldmia	r5!, {r0, r1}
 8002fe8:	6130      	str	r0, [r6, #16]
 8002fea:	6171      	str	r1, [r6, #20]
 8002fec:	882a      	ldrh	r2, [r5, #0]
 8002fee:	78ab      	ldrb	r3, [r5, #2]
 8002ff0:	8332      	strh	r2, [r6, #24]
 8002ff2:	76b3      	strb	r3, [r6, #26]
			updateInputVoltage(gfBatteryVoltage);
 8002ff4:	4b83      	ldr	r3, [pc, #524]	; (8003204 <DiagnosticString+0x454>)
 8002ff6:	ed93 0a00 	vldr	s0, [r3]
 8002ffa:	f7ff fe7b 	bl	8002cf4 <updateInputVoltage>
			strcat((char *)systemPayload,(char * )voltage);
 8002ffe:	4641      	mov	r1, r8
 8003000:	4620      	mov	r0, r4
 8003002:	f007 f80d 	bl	800a020 <strcat>
			strcat((char *)systemPayload,(char * )",");
 8003006:	4620      	mov	r0, r4
 8003008:	f7fd fce2 	bl	80009d0 <strlen>
 800300c:	5227      	strh	r7, [r4, r0]
			break;
 800300e:	e762      	b.n	8002ed6 <DiagnosticString+0x126>
			strcat((char *)systemPayload,"FF");
 8003010:	f7fd fcde 	bl	80009d0 <strlen>
 8003014:	1822      	adds	r2, r4, r0
 8003016:	4b75      	ldr	r3, [pc, #468]	; (80031ec <DiagnosticString+0x43c>)
 8003018:	8819      	ldrh	r1, [r3, #0]
 800301a:	789b      	ldrb	r3, [r3, #2]
 800301c:	5221      	strh	r1, [r4, r0]
 800301e:	7093      	strb	r3, [r2, #2]
			strcat((char *)systemPayload,(char * )",");
 8003020:	4620      	mov	r0, r4
 8003022:	f7fd fcd5 	bl	80009d0 <strlen>
 8003026:	4b6e      	ldr	r3, [pc, #440]	; (80031e0 <DiagnosticString+0x430>)
 8003028:	881b      	ldrh	r3, [r3, #0]
 800302a:	5223      	strh	r3, [r4, r0]
			itoa(DiagnosticStatus,temp,CAN_PAYLOADSTRING_RADIX);
 800302c:	2210      	movs	r2, #16
 800302e:	a901      	add	r1, sp, #4
 8003030:	4628      	mov	r0, r5
 8003032:	f006 fef3 	bl	8009e1c <itoa>
			strcat((char *)systemPayload,temp);
 8003036:	a901      	add	r1, sp, #4
 8003038:	4620      	mov	r0, r4
 800303a:	f006 fff1 	bl	800a020 <strcat>
			strcat((char *)systemPayload,(char * )",Received File Size : ");
 800303e:	4620      	mov	r0, r4
 8003040:	f7fd fcc6 	bl	80009d0 <strlen>
 8003044:	4607      	mov	r7, r0
 8003046:	1826      	adds	r6, r4, r0
 8003048:	4d6f      	ldr	r5, [pc, #444]	; (8003208 <DiagnosticString+0x458>)
 800304a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800304c:	51e0      	str	r0, [r4, r7]
 800304e:	6071      	str	r1, [r6, #4]
 8003050:	60b2      	str	r2, [r6, #8]
 8003052:	60f3      	str	r3, [r6, #12]
 8003054:	6828      	ldr	r0, [r5, #0]
 8003056:	6130      	str	r0, [r6, #16]
 8003058:	88aa      	ldrh	r2, [r5, #4]
 800305a:	79ab      	ldrb	r3, [r5, #6]
 800305c:	82b2      	strh	r2, [r6, #20]
 800305e:	75b3      	strb	r3, [r6, #22]
			strcat((char *)systemPayload,gu32FotaFileSizeinBytes);
 8003060:	496a      	ldr	r1, [pc, #424]	; (800320c <DiagnosticString+0x45c>)
 8003062:	4620      	mov	r0, r4
 8003064:	f006 ffdc 	bl	800a020 <strcat>
			strcat((char *)systemPayload,(char * )" Bytes,");
 8003068:	4620      	mov	r0, r4
 800306a:	f7fd fcb1 	bl	80009d0 <strlen>
 800306e:	4603      	mov	r3, r0
 8003070:	1825      	adds	r5, r4, r0
 8003072:	4a67      	ldr	r2, [pc, #412]	; (8003210 <DiagnosticString+0x460>)
 8003074:	ca03      	ldmia	r2!, {r0, r1}
 8003076:	50e0      	str	r0, [r4, r3]
 8003078:	6069      	str	r1, [r5, #4]
			break;
 800307a:	e72c      	b.n	8002ed6 <DiagnosticString+0x126>
			strcat((char *)systemPayload,"FF");
 800307c:	f7fd fca8 	bl	80009d0 <strlen>
 8003080:	1822      	adds	r2, r4, r0
 8003082:	4b5a      	ldr	r3, [pc, #360]	; (80031ec <DiagnosticString+0x43c>)
 8003084:	8819      	ldrh	r1, [r3, #0]
 8003086:	789b      	ldrb	r3, [r3, #2]
 8003088:	5221      	strh	r1, [r4, r0]
 800308a:	7093      	strb	r3, [r2, #2]
			strcat((char *)systemPayload,(char * )",");
 800308c:	4620      	mov	r0, r4
 800308e:	f7fd fc9f 	bl	80009d0 <strlen>
 8003092:	4b53      	ldr	r3, [pc, #332]	; (80031e0 <DiagnosticString+0x430>)
 8003094:	881e      	ldrh	r6, [r3, #0]
 8003096:	5226      	strh	r6, [r4, r0]
			itoa(DiagnosticStatus,temp,CAN_PAYLOADSTRING_RADIX);
 8003098:	2210      	movs	r2, #16
 800309a:	a901      	add	r1, sp, #4
 800309c:	4628      	mov	r0, r5
 800309e:	f006 febd 	bl	8009e1c <itoa>
			strcat((char *)systemPayload,temp);
 80030a2:	a901      	add	r1, sp, #4
 80030a4:	4620      	mov	r0, r4
 80030a6:	f006 ffbb 	bl	800a020 <strcat>
			strcat((char *)systemPayload,(char * )",");
 80030aa:	4620      	mov	r0, r4
 80030ac:	f7fd fc90 	bl	80009d0 <strlen>
 80030b0:	5226      	strh	r6, [r4, r0]
			strcat((char *)systemPayload,(char * )gsmInstance.u32GSMHttpResponseCode);
 80030b2:	4958      	ldr	r1, [pc, #352]	; (8003214 <DiagnosticString+0x464>)
 80030b4:	4620      	mov	r0, r4
 80030b6:	f006 ffb3 	bl	800a020 <strcat>
			strcat((char *)systemPayload,(char * )",");
 80030ba:	4620      	mov	r0, r4
 80030bc:	f7fd fc88 	bl	80009d0 <strlen>
 80030c0:	5226      	strh	r6, [r4, r0]
			break;
 80030c2:	e708      	b.n	8002ed6 <DiagnosticString+0x126>
			strcat((char *)systemPayload,"FF");
 80030c4:	f7fd fc84 	bl	80009d0 <strlen>
 80030c8:	1822      	adds	r2, r4, r0
 80030ca:	4b48      	ldr	r3, [pc, #288]	; (80031ec <DiagnosticString+0x43c>)
 80030cc:	8819      	ldrh	r1, [r3, #0]
 80030ce:	789b      	ldrb	r3, [r3, #2]
 80030d0:	5221      	strh	r1, [r4, r0]
 80030d2:	7093      	strb	r3, [r2, #2]
			strcat((char *)systemPayload,(char * )",");
 80030d4:	4620      	mov	r0, r4
 80030d6:	f7fd fc7b 	bl	80009d0 <strlen>
 80030da:	4b41      	ldr	r3, [pc, #260]	; (80031e0 <DiagnosticString+0x430>)
 80030dc:	881e      	ldrh	r6, [r3, #0]
 80030de:	5226      	strh	r6, [r4, r0]
			itoa(DiagnosticStatus,temp,CAN_PAYLOADSTRING_RADIX);
 80030e0:	2210      	movs	r2, #16
 80030e2:	a901      	add	r1, sp, #4
 80030e4:	4628      	mov	r0, r5
 80030e6:	f006 fe99 	bl	8009e1c <itoa>
			strcat((char *)systemPayload,temp);
 80030ea:	a901      	add	r1, sp, #4
 80030ec:	4620      	mov	r0, r4
 80030ee:	f006 ff97 	bl	800a020 <strcat>
			strcat((char *)systemPayload,(char * )",");
 80030f2:	4620      	mov	r0, r4
 80030f4:	f7fd fc6c 	bl	80009d0 <strlen>
 80030f8:	5226      	strh	r6, [r4, r0]
			break;
 80030fa:	e6ec      	b.n	8002ed6 <DiagnosticString+0x126>
			strcat((char *)systemPayload,"FF");
 80030fc:	f7fd fc68 	bl	80009d0 <strlen>
 8003100:	1822      	adds	r2, r4, r0
 8003102:	4b3a      	ldr	r3, [pc, #232]	; (80031ec <DiagnosticString+0x43c>)
 8003104:	8819      	ldrh	r1, [r3, #0]
 8003106:	789b      	ldrb	r3, [r3, #2]
 8003108:	5221      	strh	r1, [r4, r0]
 800310a:	7093      	strb	r3, [r2, #2]
			strcat((char *)systemPayload,(char * )",");
 800310c:	4620      	mov	r0, r4
 800310e:	f7fd fc5f 	bl	80009d0 <strlen>
 8003112:	4b33      	ldr	r3, [pc, #204]	; (80031e0 <DiagnosticString+0x430>)
 8003114:	881e      	ldrh	r6, [r3, #0]
 8003116:	5226      	strh	r6, [r4, r0]
			itoa(DiagnosticStatus,temp,CAN_PAYLOADSTRING_RADIX);
 8003118:	2210      	movs	r2, #16
 800311a:	a901      	add	r1, sp, #4
 800311c:	4628      	mov	r0, r5
 800311e:	f006 fe7d 	bl	8009e1c <itoa>
			strcat((char *)systemPayload,temp);
 8003122:	a901      	add	r1, sp, #4
 8003124:	4620      	mov	r0, r4
 8003126:	f006 ff7b 	bl	800a020 <strcat>
			strcat((char *)systemPayload,(char * )",");
 800312a:	4620      	mov	r0, r4
 800312c:	f7fd fc50 	bl	80009d0 <strlen>
 8003130:	5226      	strh	r6, [r4, r0]
			break;
 8003132:	e6d0      	b.n	8002ed6 <DiagnosticString+0x126>
			strcat((char *)systemPayload,"FF");
 8003134:	f7fd fc4c 	bl	80009d0 <strlen>
 8003138:	1822      	adds	r2, r4, r0
 800313a:	4b2c      	ldr	r3, [pc, #176]	; (80031ec <DiagnosticString+0x43c>)
 800313c:	8819      	ldrh	r1, [r3, #0]
 800313e:	789b      	ldrb	r3, [r3, #2]
 8003140:	5221      	strh	r1, [r4, r0]
 8003142:	7093      	strb	r3, [r2, #2]
			strcat((char *)systemPayload,(char * )",");
 8003144:	4620      	mov	r0, r4
 8003146:	f7fd fc43 	bl	80009d0 <strlen>
 800314a:	4b25      	ldr	r3, [pc, #148]	; (80031e0 <DiagnosticString+0x430>)
 800314c:	881e      	ldrh	r6, [r3, #0]
 800314e:	5226      	strh	r6, [r4, r0]
			itoa(DiagnosticStatus,temp,CAN_PAYLOADSTRING_RADIX);
 8003150:	2210      	movs	r2, #16
 8003152:	a901      	add	r1, sp, #4
 8003154:	4628      	mov	r0, r5
 8003156:	f006 fe61 	bl	8009e1c <itoa>
			strcat((char *)systemPayload,temp);
 800315a:	a901      	add	r1, sp, #4
 800315c:	4620      	mov	r0, r4
 800315e:	f006 ff5f 	bl	800a020 <strcat>
			strcat((char *)systemPayload,(char * )",");
 8003162:	4620      	mov	r0, r4
 8003164:	f7fd fc34 	bl	80009d0 <strlen>
 8003168:	5226      	strh	r6, [r4, r0]
		break;
 800316a:	e6b4      	b.n	8002ed6 <DiagnosticString+0x126>
			strcat((char *)systemPayload,"FF");
 800316c:	f7fd fc30 	bl	80009d0 <strlen>
 8003170:	1822      	adds	r2, r4, r0
 8003172:	4b1e      	ldr	r3, [pc, #120]	; (80031ec <DiagnosticString+0x43c>)
 8003174:	8819      	ldrh	r1, [r3, #0]
 8003176:	789b      	ldrb	r3, [r3, #2]
 8003178:	5221      	strh	r1, [r4, r0]
 800317a:	7093      	strb	r3, [r2, #2]
			strcat((char *)systemPayload,(char * )",");
 800317c:	4620      	mov	r0, r4
 800317e:	f7fd fc27 	bl	80009d0 <strlen>
 8003182:	4b17      	ldr	r3, [pc, #92]	; (80031e0 <DiagnosticString+0x430>)
 8003184:	881e      	ldrh	r6, [r3, #0]
 8003186:	5226      	strh	r6, [r4, r0]
			itoa(DiagnosticStatus,temp,CAN_PAYLOADSTRING_RADIX);
 8003188:	2210      	movs	r2, #16
 800318a:	a901      	add	r1, sp, #4
 800318c:	4628      	mov	r0, r5
 800318e:	f006 fe45 	bl	8009e1c <itoa>
			strcat((char *)systemPayload,temp);
 8003192:	a901      	add	r1, sp, #4
 8003194:	4620      	mov	r0, r4
 8003196:	f006 ff43 	bl	800a020 <strcat>
			strcat((char *)systemPayload,(char * )",");
 800319a:	4620      	mov	r0, r4
 800319c:	f7fd fc18 	bl	80009d0 <strlen>
 80031a0:	5226      	strh	r6, [r4, r0]
			break;
 80031a2:	e698      	b.n	8002ed6 <DiagnosticString+0x126>
			strcat((char *)systemPayload,"FF");
 80031a4:	f7fd fc14 	bl	80009d0 <strlen>
 80031a8:	1822      	adds	r2, r4, r0
 80031aa:	4b10      	ldr	r3, [pc, #64]	; (80031ec <DiagnosticString+0x43c>)
 80031ac:	8819      	ldrh	r1, [r3, #0]
 80031ae:	789b      	ldrb	r3, [r3, #2]
 80031b0:	5221      	strh	r1, [r4, r0]
 80031b2:	7093      	strb	r3, [r2, #2]
			strcat((char *)systemPayload,(char * )",");
 80031b4:	4620      	mov	r0, r4
 80031b6:	f7fd fc0b 	bl	80009d0 <strlen>
 80031ba:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <DiagnosticString+0x430>)
 80031bc:	881e      	ldrh	r6, [r3, #0]
 80031be:	5226      	strh	r6, [r4, r0]
			itoa(DiagnosticStatus,temp,CAN_PAYLOADSTRING_RADIX);
 80031c0:	2210      	movs	r2, #16
 80031c2:	a901      	add	r1, sp, #4
 80031c4:	4628      	mov	r0, r5
 80031c6:	f006 fe29 	bl	8009e1c <itoa>
			strcat((char *)systemPayload,temp);
 80031ca:	a901      	add	r1, sp, #4
 80031cc:	4620      	mov	r0, r4
 80031ce:	f006 ff27 	bl	800a020 <strcat>
			strcat((char *)systemPayload,(char * )",");
 80031d2:	4620      	mov	r0, r4
 80031d4:	f7fd fbfc 	bl	80009d0 <strlen>
 80031d8:	5226      	strh	r6, [r4, r0]
			break;
 80031da:	e67c      	b.n	8002ed6 <DiagnosticString+0x126>
 80031dc:	0800b6ec 	.word	0x0800b6ec
 80031e0:	0800b6b4 	.word	0x0800b6b4
 80031e4:	20002208 	.word	0x20002208
 80031e8:	0800b6f0 	.word	0x0800b6f0
 80031ec:	0800b6fc 	.word	0x0800b6fc
 80031f0:	0800b700 	.word	0x0800b700
 80031f4:	20002150 	.word	0x20002150
 80031f8:	0800b704 	.word	0x0800b704
 80031fc:	20002378 	.word	0x20002378
 8003200:	0800b714 	.word	0x0800b714
 8003204:	20002374 	.word	0x20002374
 8003208:	0800b730 	.word	0x0800b730
 800320c:	2000115c 	.word	0x2000115c
 8003210:	0800b748 	.word	0x0800b748
 8003214:	2000361f 	.word	0x2000361f
 8003218:	20001548 	.word	0x20001548
			strcat((char *)systemPayload,"IDLE");
 800321c:	f7fd fbd8 	bl	80009d0 <strlen>
 8003220:	4603      	mov	r3, r0
 8003222:	1821      	adds	r1, r4, r0
 8003224:	4a0d      	ldr	r2, [pc, #52]	; (800325c <DiagnosticString+0x4ac>)
 8003226:	6810      	ldr	r0, [r2, #0]
 8003228:	50e0      	str	r0, [r4, r3]
 800322a:	7913      	ldrb	r3, [r2, #4]
 800322c:	710b      	strb	r3, [r1, #4]
			strcat((char *)systemPayload,(char * )",");
 800322e:	4620      	mov	r0, r4
 8003230:	f7fd fbce 	bl	80009d0 <strlen>
 8003234:	4b0a      	ldr	r3, [pc, #40]	; (8003260 <DiagnosticString+0x4b0>)
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	5223      	strh	r3, [r4, r0]
			break;
 800323a:	e64c      	b.n	8002ed6 <DiagnosticString+0x126>
			strcat((char *)systemPayload,"IDLE");
 800323c:	f7fd fbc8 	bl	80009d0 <strlen>
 8003240:	4603      	mov	r3, r0
 8003242:	1821      	adds	r1, r4, r0
 8003244:	4a05      	ldr	r2, [pc, #20]	; (800325c <DiagnosticString+0x4ac>)
 8003246:	6810      	ldr	r0, [r2, #0]
 8003248:	50e0      	str	r0, [r4, r3]
 800324a:	7913      	ldrb	r3, [r2, #4]
 800324c:	710b      	strb	r3, [r1, #4]
			strcat((char *)systemPayload,(char * )",");
 800324e:	4620      	mov	r0, r4
 8003250:	f7fd fbbe 	bl	80009d0 <strlen>
 8003254:	4b02      	ldr	r3, [pc, #8]	; (8003260 <DiagnosticString+0x4b0>)
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	5223      	strh	r3, [r4, r0]
}//end of void DiagnosticString(char * systemPayload,enmDiagnosticStatus DiagnosticStatus)
 800325a:	e63c      	b.n	8002ed6 <DiagnosticString+0x126>
 800325c:	0800b750 	.word	0x0800b750
 8003260:	0800b6b4 	.word	0x0800b6b4

08003264 <getDiagDataString>:
{
 8003264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003268:	4680      	mov	r8, r0
	char * systemPayload = malloc(sizeof(char) * GSM_PAYLOAD_MAX_SIZE);
 800326a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800326e:	f006 fdd7 	bl	8009e20 <malloc>
	if(systemPayload != NULL)
 8003272:	4604      	mov	r4, r0
 8003274:	2800      	cmp	r0, #0
 8003276:	d070      	beq.n	800335a <getDiagDataString+0xf6>
		memset(systemPayload,0x00,sizeof(char) * GSM_PAYLOAD_MAX_SIZE);
 8003278:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800327c:	2100      	movs	r1, #0
 800327e:	f006 fded 	bl	8009e5c <memset>
		strcpy((char *)systemPayload,(char * )START_OF_FRAME);
 8003282:	4b4e      	ldr	r3, [pc, #312]	; (80033bc <getDiagDataString+0x158>)
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	8023      	strh	r3, [r4, #0]
		strcat((char *)systemPayload,(char * )",");
 8003288:	4620      	mov	r0, r4
 800328a:	f7fd fba1 	bl	80009d0 <strlen>
 800328e:	4b4c      	ldr	r3, [pc, #304]	; (80033c0 <getDiagDataString+0x15c>)
 8003290:	881e      	ldrh	r6, [r3, #0]
 8003292:	5226      	strh	r6, [r4, r0]
		strcat((char *)systemPayload,(char * )dinfo);
 8003294:	494b      	ldr	r1, [pc, #300]	; (80033c4 <getDiagDataString+0x160>)
 8003296:	4620      	mov	r0, r4
 8003298:	f006 fec2 	bl	800a020 <strcat>
		strcat((char *)systemPayload,(char * )",");
 800329c:	4620      	mov	r0, r4
 800329e:	f7fd fb97 	bl	80009d0 <strlen>
 80032a2:	5226      	strh	r6, [r4, r0]
		strcat((char *)systemPayload,"Diagnostic");
 80032a4:	4620      	mov	r0, r4
 80032a6:	f7fd fb93 	bl	80009d0 <strlen>
 80032aa:	4602      	mov	r2, r0
 80032ac:	1825      	adds	r5, r4, r0
 80032ae:	4b46      	ldr	r3, [pc, #280]	; (80033c8 <getDiagDataString+0x164>)
 80032b0:	cb03      	ldmia	r3!, {r0, r1}
 80032b2:	50a0      	str	r0, [r4, r2]
 80032b4:	6069      	str	r1, [r5, #4]
 80032b6:	881a      	ldrh	r2, [r3, #0]
 80032b8:	789b      	ldrb	r3, [r3, #2]
 80032ba:	812a      	strh	r2, [r5, #8]
 80032bc:	72ab      	strb	r3, [r5, #10]
		strcat((char *)systemPayload,(char * )",");
 80032be:	4620      	mov	r0, r4
 80032c0:	f7fd fb86 	bl	80009d0 <strlen>
 80032c4:	5226      	strh	r6, [r4, r0]
		strcat((char *)systemPayload,(char * )MODEL_NUMBER);
 80032c6:	4620      	mov	r0, r4
 80032c8:	f7fd fb82 	bl	80009d0 <strlen>
 80032cc:	4684      	mov	ip, r0
 80032ce:	1827      	adds	r7, r4, r0
 80032d0:	4d3e      	ldr	r5, [pc, #248]	; (80033cc <getDiagDataString+0x168>)
 80032d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032d4:	f844 000c 	str.w	r0, [r4, ip]
 80032d8:	6079      	str	r1, [r7, #4]
 80032da:	60ba      	str	r2, [r7, #8]
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	cd03      	ldmia	r5!, {r0, r1}
 80032e0:	6138      	str	r0, [r7, #16]
 80032e2:	6179      	str	r1, [r7, #20]
		strcat((char *)systemPayload,(char * )",");
 80032e4:	4620      	mov	r0, r4
 80032e6:	f7fd fb73 	bl	80009d0 <strlen>
 80032ea:	5226      	strh	r6, [r4, r0]
		PaylodTime(systemPayload);
 80032ec:	4620      	mov	r0, r4
 80032ee:	f7ff fb4b 	bl	8002988 <PaylodTime>
		strcat((char *)systemPayload,(char * )FIRMWARE_VER);
 80032f2:	4620      	mov	r0, r4
 80032f4:	f7fd fb6c 	bl	80009d0 <strlen>
 80032f8:	4603      	mov	r3, r0
 80032fa:	1821      	adds	r1, r4, r0
 80032fc:	4a34      	ldr	r2, [pc, #208]	; (80033d0 <getDiagDataString+0x16c>)
 80032fe:	6810      	ldr	r0, [r2, #0]
 8003300:	50e0      	str	r0, [r4, r3]
 8003302:	7913      	ldrb	r3, [r2, #4]
 8003304:	710b      	strb	r3, [r1, #4]
		strcat((char *)systemPayload,(char * )",");
 8003306:	4620      	mov	r0, r4
 8003308:	f7fd fb62 	bl	80009d0 <strlen>
 800330c:	5226      	strh	r6, [r4, r0]
		strcat((char *)systemPayload,(char * )BOOT_REGION);
 800330e:	4620      	mov	r0, r4
 8003310:	f7fd fb5e 	bl	80009d0 <strlen>
 8003314:	4b2f      	ldr	r3, [pc, #188]	; (80033d4 <getDiagDataString+0x170>)
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	5223      	strh	r3, [r4, r0]
		strcat((char *)systemPayload,(char * )",");
 800331a:	4620      	mov	r0, r4
 800331c:	f7fd fb58 	bl	80009d0 <strlen>
 8003320:	5226      	strh	r6, [r4, r0]
		DiagnosticString(systemPayload,DiagnosticStatus);
 8003322:	4641      	mov	r1, r8
 8003324:	4620      	mov	r0, r4
 8003326:	f7ff fd43 	bl	8002db0 <DiagnosticString>
		if(gu8PowerOnFlag == TRUE)
 800332a:	4b2b      	ldr	r3, [pc, #172]	; (80033d8 <getDiagDataString+0x174>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d016      	beq.n	8003360 <getDiagDataString+0xfc>
		if(fotaPloadFlag == TRUE)
 8003332:	4b2a      	ldr	r3, [pc, #168]	; (80033dc <getDiagDataString+0x178>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d020      	beq.n	800337c <getDiagDataString+0x118>
		strcat((char *)systemPayload,(char * )END_OF_FRAME);
 800333a:	4620      	mov	r0, r4
 800333c:	f7fd fb48 	bl	80009d0 <strlen>
 8003340:	4b27      	ldr	r3, [pc, #156]	; (80033e0 <getDiagDataString+0x17c>)
 8003342:	881b      	ldrh	r3, [r3, #0]
 8003344:	5223      	strh	r3, [r4, r0]
		gu32CanIdsLoopCounter = 1;
 8003346:	4b27      	ldr	r3, [pc, #156]	; (80033e4 <getDiagDataString+0x180>)
 8003348:	2201      	movs	r2, #1
 800334a:	60da      	str	r2, [r3, #12]
		if(gu8PowerOnFlag == TRUE)
 800334c:	4b22      	ldr	r3, [pc, #136]	; (80033d8 <getDiagDataString+0x174>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	4293      	cmp	r3, r2
 8003352:	d02e      	beq.n	80033b2 <getDiagDataString+0x14e>
		 MCU_Id = 0;
 8003354:	4b24      	ldr	r3, [pc, #144]	; (80033e8 <getDiagDataString+0x184>)
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
}
 800335a:	4620      	mov	r0, r4
 800335c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			strcat((char *)systemPayload,"CAN ID's : ");
 8003360:	4620      	mov	r0, r4
 8003362:	f7fd fb35 	bl	80009d0 <strlen>
 8003366:	4605      	mov	r5, r0
 8003368:	1826      	adds	r6, r4, r0
 800336a:	4b20      	ldr	r3, [pc, #128]	; (80033ec <getDiagDataString+0x188>)
 800336c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800336e:	5160      	str	r0, [r4, r5]
 8003370:	6071      	str	r1, [r6, #4]
 8003372:	60b2      	str	r2, [r6, #8]
			CANIDPrase(systemPayload);
 8003374:	4620      	mov	r0, r4
 8003376:	f7ff fadd 	bl	8002934 <CANIDPrase>
 800337a:	e7da      	b.n	8003332 <getDiagDataString+0xce>
			strcat((char *)systemPayload,"FR");
 800337c:	4620      	mov	r0, r4
 800337e:	f7fd fb27 	bl	80009d0 <strlen>
 8003382:	1822      	adds	r2, r4, r0
 8003384:	4b1a      	ldr	r3, [pc, #104]	; (80033f0 <getDiagDataString+0x18c>)
 8003386:	8819      	ldrh	r1, [r3, #0]
 8003388:	789b      	ldrb	r3, [r3, #2]
 800338a:	5221      	strh	r1, [r4, r0]
 800338c:	7093      	strb	r3, [r2, #2]
			strcat((char *)systemPayload,(char * )",");
 800338e:	4620      	mov	r0, r4
 8003390:	f7fd fb1e 	bl	80009d0 <strlen>
 8003394:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <getDiagDataString+0x15c>)
 8003396:	881d      	ldrh	r5, [r3, #0]
 8003398:	5225      	strh	r5, [r4, r0]
			strcat((char *)systemPayload,(char *)gau8FotaURL);
 800339a:	4916      	ldr	r1, [pc, #88]	; (80033f4 <getDiagDataString+0x190>)
 800339c:	4620      	mov	r0, r4
 800339e:	f006 fe3f 	bl	800a020 <strcat>
			strcat((char *)systemPayload,(char * )",");
 80033a2:	4620      	mov	r0, r4
 80033a4:	f7fd fb14 	bl	80009d0 <strlen>
 80033a8:	5225      	strh	r5, [r4, r0]
			fotaPloadFlag = FALSE;
 80033aa:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <getDiagDataString+0x178>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	701a      	strb	r2, [r3, #0]
 80033b0:	e7c3      	b.n	800333a <getDiagDataString+0xd6>
			gu8PowerOnFlag = FALSE;
 80033b2:	4b09      	ldr	r3, [pc, #36]	; (80033d8 <getDiagDataString+0x174>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	701a      	strb	r2, [r3, #0]
 80033b8:	e7cc      	b.n	8003354 <getDiagDataString+0xf0>
 80033ba:	bf00      	nop
 80033bc:	0800b588 	.word	0x0800b588
 80033c0:	0800b6b4 	.word	0x0800b6b4
 80033c4:	20000020 	.word	0x20000020
 80033c8:	0800b5d8 	.word	0x0800b5d8
 80033cc:	0800b6c0 	.word	0x0800b6c0
 80033d0:	0800b6d8 	.word	0x0800b6d8
 80033d4:	0800b6e0 	.word	0x0800b6e0
 80033d8:	20001530 	.word	0x20001530
 80033dc:	20002204 	.word	0x20002204
 80033e0:	0800b5d0 	.word	0x0800b5d0
 80033e4:	20001534 	.word	0x20001534
 80033e8:	2000152c 	.word	0x2000152c
 80033ec:	0800b6f0 	.word	0x0800b6f0
 80033f0:	0800b700 	.word	0x0800b700
 80033f4:	20002150 	.word	0x20002150

080033f8 <enqueue>:
 Change History:
 Author            	Date                Remarks
 KloudQ Team        22/05/19			initial code
******************************************************************************/
void enqueue(strctQUEUE * queue,char * data)
{
 80033f8:	b538      	push	{r3, r4, r5, lr}
 80033fa:	4604      	mov	r4, r0
 80033fc:	460d      	mov	r5, r1
	/* if data is completely transfered, reset the queue */
	if(queue->head <= queue->tail)
 80033fe:	6802      	ldr	r2, [r0, #0]
 8003400:	6843      	ldr	r3, [r0, #4]
 8003402:	429a      	cmp	r2, r3
 8003404:	dc02      	bgt.n	800340c <enqueue+0x14>
	{
		queue->head = 0;
 8003406:	2300      	movs	r3, #0
 8003408:	6003      	str	r3, [r0, #0]
		queue->tail = 0;
 800340a:	6043      	str	r3, [r0, #4]
	}

	/* If queue has data clear it */
	if(queue->data[queue->head] != NULL)
 800340c:	6823      	ldr	r3, [r4, #0]
 800340e:	3302      	adds	r3, #2
 8003410:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8003414:	b130      	cbz	r0, 8003424 <enqueue+0x2c>
	{
		free(queue->data[queue->head]);
 8003416:	f006 fd0b 	bl	8009e30 <free>
		queue->data[queue->head] = NULL;
 800341a:	6823      	ldr	r3, [r4, #0]
 800341c:	3302      	adds	r3, #2
 800341e:	2200      	movs	r2, #0
 8003420:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	}

	/* Write data to queue head */
	queue->data[queue->head]= data;
 8003424:	6823      	ldr	r3, [r4, #0]
 8003426:	1c9a      	adds	r2, r3, #2
 8003428:	f844 5022 	str.w	r5, [r4, r2, lsl #2]

	/* move to head to next location */
	queue->head++;
 800342c:	3301      	adds	r3, #1
 800342e:	6023      	str	r3, [r4, #0]

	/* If queue is full */
	if(queue->head > (MAX_QUEUE_SIZE - 1))
 8003430:	2b09      	cmp	r3, #9
 8003432:	dd04      	ble.n	800343e <enqueue+0x46>
	{
		/*Raise Queue Overflow flag */
		GSMQueueFullFlag = 1;
 8003434:	4b02      	ldr	r3, [pc, #8]	; (8003440 <enqueue+0x48>)
 8003436:	2201      	movs	r2, #1
 8003438:	601a      	str	r2, [r3, #0]
		queue->head = (MAX_QUEUE_SIZE - 1);
 800343a:	2309      	movs	r3, #9
 800343c:	6023      	str	r3, [r4, #0]
	}
}
 800343e:	bd38      	pop	{r3, r4, r5, pc}
 8003440:	20002348 	.word	0x20002348

08003444 <dequeue>:
 Change History:
 Author            	Date                Remarks
 KloudQ Team        22/05/19			initial code
******************************************************************************/
void dequeue(strctQUEUE * queue)
{
 8003444:	b510      	push	{r4, lr}
 8003446:	4604      	mov	r4, r0
	/* After data is uploaded free the pointer in queue->data */
    if(((queue->tail == 0) && (queue->head == 0)) || (queue->tail == queue->head))
 8003448:	6843      	ldr	r3, [r0, #4]
 800344a:	b90b      	cbnz	r3, 8003450 <dequeue+0xc>
 800344c:	6802      	ldr	r2, [r0, #0]
 800344e:	b112      	cbz	r2, 8003456 <dequeue+0x12>
 8003450:	6822      	ldr	r2, [r4, #0]
 8003452:	4293      	cmp	r3, r2
 8003454:	d114      	bne.n	8003480 <dequeue+0x3c>
    {
    	if(queue->data[queue->tail] != NULL)
 8003456:	3302      	adds	r3, #2
 8003458:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800345c:	b130      	cbz	r0, 800346c <dequeue+0x28>
    	{
            free(queue->data[queue->tail]);
 800345e:	f006 fce7 	bl	8009e30 <free>
            queue->data[queue->tail] = NULL;
 8003462:	6863      	ldr	r3, [r4, #4]
 8003464:	3302      	adds	r3, #2
 8003466:	2200      	movs	r2, #0
 8003468:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    	}
        if((queue->tail >= queue->head) && (queue->tail != 0)  && (queue->head != 0))
 800346c:	6863      	ldr	r3, [r4, #4]
 800346e:	6822      	ldr	r2, [r4, #0]
 8003470:	4293      	cmp	r3, r2
 8003472:	db14      	blt.n	800349e <dequeue+0x5a>
 8003474:	b19b      	cbz	r3, 800349e <dequeue+0x5a>
 8003476:	b192      	cbz	r2, 800349e <dequeue+0x5a>
        {
        	queue->head = 0;
 8003478:	2300      	movs	r3, #0
 800347a:	6023      	str	r3, [r4, #0]
			queue->tail = 0;
 800347c:	6063      	str	r3, [r4, #4]
 800347e:	e00e      	b.n	800349e <dequeue+0x5a>
        }
    }
    else
    {
        free(queue->data[queue->tail]);
 8003480:	3302      	adds	r3, #2
 8003482:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8003486:	f006 fcd3 	bl	8009e30 <free>
        queue->data[queue->tail] = NULL;
 800348a:	6863      	ldr	r3, [r4, #4]
 800348c:	1c9a      	adds	r2, r3, #2
 800348e:	2100      	movs	r1, #0
 8003490:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
        queue->tail++;
 8003494:	3301      	adds	r3, #1
 8003496:	6063      	str	r3, [r4, #4]
        if(queue->tail > (MAX_QUEUE_SIZE-1))
 8003498:	2b09      	cmp	r3, #9
 800349a:	dd00      	ble.n	800349e <dequeue+0x5a>
		{
			queue->tail=0;
 800349c:	6061      	str	r1, [r4, #4]
		}
    }
}
 800349e:	bd10      	pop	{r4, pc}

080034a0 <isQueueEmpty>:
 Author            	Date                Remarks
 KloudQ Team        22/05/19			initial code
******************************************************************************/
uint32_t isQueueEmpty(strctQUEUE * queue)
{
	if(queue->data[queue->tail] != NULL)
 80034a0:	6843      	ldr	r3, [r0, #4]
 80034a2:	1c9a      	adds	r2, r3, #2
 80034a4:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80034a8:	b10a      	cbz	r2, 80034ae <isQueueEmpty+0xe>
		return 0;
 80034aa:	2000      	movs	r0, #0
	else
		return((queue->head) == (queue->tail));
}
 80034ac:	4770      	bx	lr
		return((queue->head) == (queue->tail));
 80034ae:	6800      	ldr	r0, [r0, #0]
 80034b0:	4283      	cmp	r3, r0
 80034b2:	bf14      	ite	ne
 80034b4:	2000      	movne	r0, #0
 80034b6:	2001      	moveq	r0, #1
 80034b8:	4770      	bx	lr
	...

080034bc <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80034bc:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80034be:	4805      	ldr	r0, [pc, #20]	; (80034d4 <MX_RNG_Init+0x18>)
 80034c0:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <MX_RNG_Init+0x1c>)
 80034c2:	6003      	str	r3, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80034c4:	f004 fe32 	bl	800812c <HAL_RNG_Init>
 80034c8:	b900      	cbnz	r0, 80034cc <MX_RNG_Init+0x10>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80034ca:	bd08      	pop	{r3, pc}
    Error_Handler();
 80034cc:	f7ff f83a 	bl	8002544 <Error_Handler>
}
 80034d0:	e7fb      	b.n	80034ca <MX_RNG_Init+0xe>
 80034d2:	bf00      	nop
 80034d4:	20004404 	.word	0x20004404
 80034d8:	50060800 	.word	0x50060800

080034dc <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{

  if(rngHandle->Instance==RNG)
 80034dc:	6802      	ldr	r2, [r0, #0]
 80034de:	4b0f      	ldr	r3, [pc, #60]	; (800351c <HAL_RNG_MspInit+0x40>)
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d000      	beq.n	80034e6 <HAL_RNG_MspInit+0xa>
 80034e4:	4770      	bx	lr
{
 80034e6:	b500      	push	{lr}
 80034e8:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80034ea:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80034ee:	f5a3 337e 	sub.w	r3, r3, #260096	; 0x3f800
 80034f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034f4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80034f8:	64da      	str	r2, [r3, #76]	; 0x4c
 80034fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003500:	9301      	str	r3, [sp, #4]
 8003502:	9b01      	ldr	r3, [sp, #4]

    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 0, 0);
 8003504:	2200      	movs	r2, #0
 8003506:	4611      	mov	r1, r2
 8003508:	2050      	movs	r0, #80	; 0x50
 800350a:	f001 ff73 	bl	80053f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 800350e:	2050      	movs	r0, #80	; 0x50
 8003510:	f001 ffb6 	bl	8005480 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8003514:	b003      	add	sp, #12
 8003516:	f85d fb04 	ldr.w	pc, [sp], #4
 800351a:	bf00      	nop
 800351c:	50060800 	.word	0x50060800

08003520 <MX_RTC_Init>:
RTC_HandleTypeDef hrtc;
uint32_t mtime = 0;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003520:	b510      	push	{r4, lr}
 8003522:	b092      	sub	sp, #72	; 0x48

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003524:	2400      	movs	r4, #0
 8003526:	940d      	str	r4, [sp, #52]	; 0x34
 8003528:	940e      	str	r4, [sp, #56]	; 0x38
 800352a:	940f      	str	r4, [sp, #60]	; 0x3c
 800352c:	9410      	str	r4, [sp, #64]	; 0x40
 800352e:	9411      	str	r4, [sp, #68]	; 0x44
  RTC_DateTypeDef sDate = {0};
 8003530:	940c      	str	r4, [sp, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8003532:	222c      	movs	r2, #44	; 0x2c
 8003534:	4621      	mov	r1, r4
 8003536:	a801      	add	r0, sp, #4
 8003538:	f006 fc90 	bl	8009e5c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800353c:	482a      	ldr	r0, [pc, #168]	; (80035e8 <MX_RTC_Init+0xc8>)
 800353e:	4b2b      	ldr	r3, [pc, #172]	; (80035ec <MX_RTC_Init+0xcc>)
 8003540:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003542:	6044      	str	r4, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003544:	237f      	movs	r3, #127	; 0x7f
 8003546:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8003548:	23ff      	movs	r3, #255	; 0xff
 800354a:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800354c:	6104      	str	r4, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800354e:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003550:	6184      	str	r4, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003552:	61c4      	str	r4, [r0, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003554:	f004 ff6a 	bl	800842c <HAL_RTC_Init>
 8003558:	2800      	cmp	r0, #0
 800355a:	d139      	bne.n	80035d0 <MX_RTC_Init+0xb0>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800355c:	2300      	movs	r3, #0
 800355e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  sTime.Minutes = 0x0;
 8003562:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
  sTime.Seconds = 0x0;
 8003566:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800356a:	9310      	str	r3, [sp, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800356c:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800356e:	2201      	movs	r2, #1
 8003570:	a90d      	add	r1, sp, #52	; 0x34
 8003572:	481d      	ldr	r0, [pc, #116]	; (80035e8 <MX_RTC_Init+0xc8>)
 8003574:	f005 f816 	bl	80085a4 <HAL_RTC_SetTime>
 8003578:	bb68      	cbnz	r0, 80035d6 <MX_RTC_Init+0xb6>
  {
    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800357a:	2201      	movs	r2, #1
 800357c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8003580:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  sDate.Date = 0x1;
 8003584:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
  sDate.Year = 0x0;
 8003588:	2300      	movs	r3, #0
 800358a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800358e:	a90c      	add	r1, sp, #48	; 0x30
 8003590:	4815      	ldr	r0, [pc, #84]	; (80035e8 <MX_RTC_Init+0xc8>)
 8003592:	f005 f929 	bl	80087e8 <HAL_RTC_SetDate>
 8003596:	bb08      	cbnz	r0, 80035dc <MX_RTC_Init+0xbc>
  {
    Error_Handler();
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8003598:	2300      	movs	r3, #0
 800359a:	f88d 3004 	strb.w	r3, [sp, #4]
  sAlarm.AlarmTime.Minutes = 0x30;
 800359e:	2230      	movs	r2, #48	; 0x30
 80035a0:	f88d 2005 	strb.w	r2, [sp, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 80035a4:	f88d 3006 	strb.w	r3, [sp, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80035a8:	9302      	str	r3, [sp, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80035aa:	9304      	str	r3, [sp, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80035ac:	9305      	str	r3, [sp, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80035ae:	4a10      	ldr	r2, [pc, #64]	; (80035f0 <MX_RTC_Init+0xd0>)
 80035b0:	9206      	str	r2, [sp, #24]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80035b2:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80035b4:	9309      	str	r3, [sp, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 80035b6:	2201      	movs	r2, #1
 80035b8:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 80035bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035c0:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80035c2:	a901      	add	r1, sp, #4
 80035c4:	4808      	ldr	r0, [pc, #32]	; (80035e8 <MX_RTC_Init+0xc8>)
 80035c6:	f005 f9e5 	bl	8008994 <HAL_RTC_SetAlarm_IT>
 80035ca:	b950      	cbnz	r0, 80035e2 <MX_RTC_Init+0xc2>
//  {
//	  Error_Handler();
//  }
  /* USER CODE END RTC_Init 2 */

}
 80035cc:	b012      	add	sp, #72	; 0x48
 80035ce:	bd10      	pop	{r4, pc}
    Error_Handler();
 80035d0:	f7fe ffb8 	bl	8002544 <Error_Handler>
 80035d4:	e7c2      	b.n	800355c <MX_RTC_Init+0x3c>
    Error_Handler();
 80035d6:	f7fe ffb5 	bl	8002544 <Error_Handler>
 80035da:	e7ce      	b.n	800357a <MX_RTC_Init+0x5a>
    Error_Handler();
 80035dc:	f7fe ffb2 	bl	8002544 <Error_Handler>
 80035e0:	e7da      	b.n	8003598 <MX_RTC_Init+0x78>
    Error_Handler();
 80035e2:	f7fe ffaf 	bl	8002544 <Error_Handler>
}
 80035e6:	e7f1      	b.n	80035cc <MX_RTC_Init+0xac>
 80035e8:	20004430 	.word	0x20004430
 80035ec:	40002800 	.word	0x40002800
 80035f0:	80800080 	.word	0x80800080

080035f4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80035f4:	b510      	push	{r4, lr}
 80035f6:	b098      	sub	sp, #96	; 0x60
 80035f8:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035fa:	2260      	movs	r2, #96	; 0x60
 80035fc:	2100      	movs	r1, #0
 80035fe:	4668      	mov	r0, sp
 8003600:	f006 fc2c 	bl	8009e5c <memset>
  if(rtcHandle->Instance==RTC)
 8003604:	6822      	ldr	r2, [r4, #0]
 8003606:	4b11      	ldr	r3, [pc, #68]	; (800364c <HAL_RTC_MspInit+0x58>)
 8003608:	429a      	cmp	r2, r3
 800360a:	d001      	beq.n	8003610 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800360c:	b018      	add	sp, #96	; 0x60
 800360e:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003610:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003614:	9300      	str	r3, [sp, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003616:	f44f 7300 	mov.w	r3, #512	; 0x200
 800361a:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800361c:	4668      	mov	r0, sp
 800361e:	f004 fab3 	bl	8007b88 <HAL_RCCEx_PeriphCLKConfig>
 8003622:	b978      	cbnz	r0, 8003644 <HAL_RTC_MspInit+0x50>
    __HAL_RCC_RTC_ENABLE();
 8003624:	4a0a      	ldr	r2, [pc, #40]	; (8003650 <HAL_RTC_MspInit+0x5c>)
 8003626:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800362a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800362e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8003632:	2200      	movs	r2, #0
 8003634:	4611      	mov	r1, r2
 8003636:	2029      	movs	r0, #41	; 0x29
 8003638:	f001 fedc 	bl	80053f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800363c:	2029      	movs	r0, #41	; 0x29
 800363e:	f001 ff1f 	bl	8005480 <HAL_NVIC_EnableIRQ>
}
 8003642:	e7e3      	b.n	800360c <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8003644:	f7fe ff7e 	bl	8002544 <Error_Handler>
 8003648:	e7ec      	b.n	8003624 <HAL_RTC_MspInit+0x30>
 800364a:	bf00      	nop
 800364c:	40002800 	.word	0x40002800
 8003650:	40021000 	.word	0x40021000

08003654 <HAL_RTC_AlarmAEventCallback>:
  * RTC Alarm is Deactivated as it was get in callback function for 4 -5 time,
  * as we have activated it again in setAlarm.
  */

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003654:	b538      	push	{r3, r4, r5, lr}
 8003656:	4605      	mov	r5, r0
  /* Turn LED2 on: Alarm generation */
//	unCanTransmitMsgs.u8CanTxMsgByte0 = WAKE_UP;
	unCanTransmitMsgs.u8CanTxMsgByte0 = 0;
 8003658:	4b18      	ldr	r3, [pc, #96]	; (80036bc <HAL_RTC_AlarmAEventCallback+0x68>)
 800365a:	2400      	movs	r4, #0
 800365c:	71dc      	strb	r4, [r3, #7]
	unCanTransmitMsgs.u8CanTxMsgByte1 = 0;
 800365e:	719c      	strb	r4, [r3, #6]
	unCanTransmitMsgs.u8CanTxMsgByte2 = 0;
 8003660:	715c      	strb	r4, [r3, #5]
	unCanTransmitMsgs.u8CanTxMsgByte3 = 0;
 8003662:	711c      	strb	r4, [r3, #4]
	unCanTransmitMsgs.u8CanTxMsgByte4 = 0;
 8003664:	70dc      	strb	r4, [r3, #3]
	unCanTransmitMsgs.u8CanTxMsgByte5 = 0;
 8003666:	709c      	strb	r4, [r3, #2]
	unCanTransmitMsgs.u8CanTxMsgByte6 = 0;
 8003668:	705c      	strb	r4, [r3, #1]
	unCanTransmitMsgs.u8CanTxMsgByte7 = 0;
 800366a:	701c      	strb	r4, [r3, #0]
	//unCanTransmitMsgs.u8CanTxMsgByte7 = WAKE_UP;
	HAL_CAN_AbortTxRequest(&hcan1, TxMailbox);
 800366c:	4b14      	ldr	r3, [pc, #80]	; (80036c0 <HAL_RTC_AlarmAEventCallback+0x6c>)
 800366e:	6819      	ldr	r1, [r3, #0]
 8003670:	4814      	ldr	r0, [pc, #80]	; (80036c4 <HAL_RTC_AlarmAEventCallback+0x70>)
 8003672:	f001 fc61 	bl	8004f38 <HAL_CAN_AbortTxRequest>
//	gu32MCUCurrentWorkingMode = enmMCUMode_RUN;
	canCurrentState = enmCANQUERY_IDLE;
 8003676:	4b14      	ldr	r3, [pc, #80]	; (80036c8 <HAL_RTC_AlarmAEventCallback+0x74>)
 8003678:	701c      	strb	r4, [r3, #0]
	memset(gua8KeyData,0x00,sizeof(gua8KeyData));
 800367a:	4b14      	ldr	r3, [pc, #80]	; (80036cc <HAL_RTC_AlarmAEventCallback+0x78>)
 800367c:	601c      	str	r4, [r3, #0]
 800367e:	605c      	str	r4, [r3, #4]


//	gu32GSMPowerStateFlag = 0;

	if(gu32MCUModeExitFlag == 0)
 8003680:	4b13      	ldr	r3, [pc, #76]	; (80036d0 <HAL_RTC_AlarmAEventCallback+0x7c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	b913      	cbnz	r3, 800368c <HAL_RTC_AlarmAEventCallback+0x38>
		gu32MCUModeExitFlag = 1;
 8003686:	4b12      	ldr	r3, [pc, #72]	; (80036d0 <HAL_RTC_AlarmAEventCallback+0x7c>)
 8003688:	2201      	movs	r2, #1
 800368a:	601a      	str	r2, [r3, #0]

//	if(u8ExSleepModeFlag == 1)
//			u8ExSleepModeFlag = 0;

	if(gu32CanQueryCounter != 0)
 800368c:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <HAL_RTC_AlarmAEventCallback+0x80>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	b113      	cbz	r3, 8003698 <HAL_RTC_AlarmAEventCallback+0x44>
			gu32CanQueryCounter = 0;
 8003692:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <HAL_RTC_AlarmAEventCallback+0x80>)
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]

		gu32KeyDataFlag = 1;
 8003698:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <HAL_RTC_AlarmAEventCallback+0x84>)
 800369a:	2201      	movs	r2, #1
 800369c:	601a      	str	r2, [r3, #0]
//	 gu8CANRxResponseFlag = 0;
	 updateCANQueryState = 0;
 800369e:	2300      	movs	r3, #0
 80036a0:	4a0e      	ldr	r2, [pc, #56]	; (80036dc <HAL_RTC_AlarmAEventCallback+0x88>)
 80036a2:	7013      	strb	r3, [r2, #0]
	// u8GenSeedFlag = 0;
	// u8PreTxData = WAKE_UP;
	 u8keyVerifyErr = 0;
 80036a4:	4a0e      	ldr	r2, [pc, #56]	; (80036e0 <HAL_RTC_AlarmAEventCallback+0x8c>)
 80036a6:	7013      	strb	r3, [r2, #0]
	gu32CANReqResponseTimeout =TEN_SEC;// THIRTY_SEC;
 80036a8:	4b0e      	ldr	r3, [pc, #56]	; (80036e4 <HAL_RTC_AlarmAEventCallback+0x90>)
 80036aa:	4a0f      	ldr	r2, [pc, #60]	; (80036e8 <HAL_RTC_AlarmAEventCallback+0x94>)
 80036ac:	601a      	str	r2, [r3, #0]
	HAL_RTC_DeactivateAlarm(hrtc,RTC_ALARM_A);
 80036ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036b2:	4628      	mov	r0, r5
 80036b4:	f004 fdb4 	bl	8008220 <HAL_RTC_DeactivateAlarm>

}
 80036b8:	bd38      	pop	{r3, r4, r5, pc}
 80036ba:	bf00      	nop
 80036bc:	20004bf8 	.word	0x20004bf8
 80036c0:	20004b98 	.word	0x20004b98
 80036c4:	200030d8 	.word	0x200030d8
 80036c8:	20002ef4 	.word	0x20002ef4
 80036cc:	20004b88 	.word	0x20004b88
 80036d0:	20002898 	.word	0x20002898
 80036d4:	20002ef0 	.word	0x20002ef0
 80036d8:	20002894 	.word	0x20002894
 80036dc:	200019e6 	.word	0x200019e6
 80036e0:	2000288b 	.word	0x2000288b
 80036e4:	20002ff0 	.word	0x20002ff0
 80036e8:	00030d40 	.word	0x00030d40

080036ec <GSM_CharReception_Callback>:
 Author           	Date                Remarks
 KloudQ Team       11-04-18
******************************************************************************/

void GSM_CharReception_Callback(void)
{
 80036ec:	b410      	push	{r4}
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80036ee:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <GSM_CharReception_Callback+0x34>)
 80036f0:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 80036f2:	b2d2      	uxtb	r2, r2
	u8gsmResponse =LL_USART_ReceiveData8(USART1);
 80036f4:	490b      	ldr	r1, [pc, #44]	; (8003724 <GSM_CharReception_Callback+0x38>)
 80036f6:	700a      	strb	r2, [r1, #0]
	gsmInstance.as8GSM_Response_Buff[gsmInstance.u8GSM_Response_Character_Counter++] = u8gsmResponse;
 80036f8:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <GSM_CharReception_Callback+0x3c>)
 80036fa:	f8d3 0e38 	ldr.w	r0, [r3, #3640]	; 0xe38
 80036fe:	1c44      	adds	r4, r0, #1
 8003700:	f8c3 4e38 	str.w	r4, [r3, #3640]	; 0xe38
 8003704:	4403      	add	r3, r0
 8003706:	f883 2452 	strb.w	r2, [r3, #1106]	; 0x452
	gu32GSMCharacterTimeout = FIVEHUNDRED_MS;
 800370a:	4b08      	ldr	r3, [pc, #32]	; (800372c <GSM_CharReception_Callback+0x40>)
 800370c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003710:	601a      	str	r2, [r3, #0]

	if(u8GSMCharRcv == 0)
 8003712:	684b      	ldr	r3, [r1, #4]
 8003714:	b90b      	cbnz	r3, 800371a <GSM_CharReception_Callback+0x2e>
		u8GSMCharRcv = 1;
 8003716:	2201      	movs	r2, #1
 8003718:	604a      	str	r2, [r1, #4]
}
 800371a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	40013800 	.word	0x40013800
 8003724:	20002350 	.word	0x20002350
 8003728:	200031d0 	.word	0x200031d0
 800372c:	20002fc0 	.word	0x20002fc0

08003730 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003730:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003732:	4810      	ldr	r0, [pc, #64]	; (8003774 <MX_SPI2_Init+0x44>)
 8003734:	4b10      	ldr	r3, [pc, #64]	; (8003778 <MX_SPI2_Init+0x48>)
 8003736:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003738:	f44f 7382 	mov.w	r3, #260	; 0x104
 800373c:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800373e:	2300      	movs	r3, #0
 8003740:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8003742:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003746:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003748:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800374a:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800374c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003750:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003752:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003754:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003756:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003758:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800375a:	2207      	movs	r2, #7
 800375c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800375e:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003760:	2308      	movs	r3, #8
 8003762:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003764:	f005 fad4 	bl	8008d10 <HAL_SPI_Init>
 8003768:	b900      	cbnz	r0, 800376c <MX_SPI2_Init+0x3c>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800376a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800376c:	f7fe feea 	bl	8002544 <Error_Handler>
}
 8003770:	e7fb      	b.n	800376a <MX_SPI2_Init+0x3a>
 8003772:	bf00      	nop
 8003774:	20004468 	.word	0x20004468
 8003778:	40003800 	.word	0x40003800

0800377c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800377c:	b510      	push	{r4, lr}
 800377e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003780:	2300      	movs	r3, #0
 8003782:	9303      	str	r3, [sp, #12]
 8003784:	9304      	str	r3, [sp, #16]
 8003786:	9305      	str	r3, [sp, #20]
 8003788:	9306      	str	r3, [sp, #24]
 800378a:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 800378c:	6802      	ldr	r2, [r0, #0]
 800378e:	4b18      	ldr	r3, [pc, #96]	; (80037f0 <HAL_SPI_MspInit+0x74>)
 8003790:	429a      	cmp	r2, r3
 8003792:	d001      	beq.n	8003798 <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003794:	b008      	add	sp, #32
 8003796:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003798:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 800379c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800379e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037a2:	659a      	str	r2, [r3, #88]	; 0x58
 80037a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80037a6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80037aa:	9201      	str	r2, [sp, #4]
 80037ac:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037b0:	f042 0202 	orr.w	r2, r2, #2
 80037b4:	64da      	str	r2, [r3, #76]	; 0x4c
 80037b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	9302      	str	r3, [sp, #8]
 80037be:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI2_SCK_SERIAL_FLASH_Pin|SPI2_MISO_SERIAL_FLASH_Pin|SPI2_MOSI_SERIAL_FLASH_Pin;
 80037c0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80037c4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c6:	2302      	movs	r3, #2
 80037c8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ca:	2400      	movs	r4, #0
 80037cc:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ce:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80037d0:	2305      	movs	r3, #5
 80037d2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037d4:	a903      	add	r1, sp, #12
 80037d6:	4807      	ldr	r0, [pc, #28]	; (80037f4 <HAL_SPI_MspInit+0x78>)
 80037d8:	f002 f982 	bl	8005ae0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 6, 0);
 80037dc:	4622      	mov	r2, r4
 80037de:	2106      	movs	r1, #6
 80037e0:	2024      	movs	r0, #36	; 0x24
 80037e2:	f001 fe07 	bl	80053f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80037e6:	2024      	movs	r0, #36	; 0x24
 80037e8:	f001 fe4a 	bl	8005480 <HAL_NVIC_EnableIRQ>
}
 80037ec:	e7d2      	b.n	8003794 <HAL_SPI_MspInit+0x18>
 80037ee:	bf00      	nop
 80037f0:	40003800 	.word	0x40003800
 80037f4:	48000400 	.word	0x48000400

080037f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037f8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037fa:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <HAL_MspInit+0x2c>)
 80037fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037fe:	f042 0201 	orr.w	r2, r2, #1
 8003802:	661a      	str	r2, [r3, #96]	; 0x60
 8003804:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003806:	f002 0201 	and.w	r2, r2, #1
 800380a:	9200      	str	r2, [sp, #0]
 800380c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800380e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003810:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003814:	659a      	str	r2, [r3, #88]	; 0x58
 8003816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381c:	9301      	str	r3, [sp, #4]
 800381e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003820:	b002      	add	sp, #8
 8003822:	4770      	bx	lr
 8003824:	40021000 	.word	0x40021000

08003828 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003828:	e7fe      	b.n	8003828 <NMI_Handler>

0800382a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800382a:	e7fe      	b.n	800382a <HardFault_Handler>

0800382c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800382c:	e7fe      	b.n	800382c <MemManage_Handler>

0800382e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800382e:	e7fe      	b.n	800382e <BusFault_Handler>

08003830 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003830:	e7fe      	b.n	8003830 <UsageFault_Handler>

08003832 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003832:	4770      	bx	lr

08003834 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003834:	4770      	bx	lr

08003836 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003836:	4770      	bx	lr

08003838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003838:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800383a:	f000 ff47 	bl	80046cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800383e:	bd08      	pop	{r3, pc}

08003840 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003840:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003842:	4802      	ldr	r0, [pc, #8]	; (800384c <DMA1_Channel1_IRQHandler+0xc>)
 8003844:	f001 fe8e 	bl	8005564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003848:	bd08      	pop	{r3, pc}
 800384a:	bf00      	nop
 800384c:	20003090 	.word	0x20003090

08003850 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8003850:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003852:	4802      	ldr	r0, [pc, #8]	; (800385c <ADC1_IRQHandler+0xc>)
 8003854:	f000 ff6c 	bl	8004730 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8003858:	bd08      	pop	{r3, pc}
 800385a:	bf00      	nop
 800385c:	2000302c 	.word	0x2000302c

08003860 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8003860:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003862:	4802      	ldr	r0, [pc, #8]	; (800386c <CAN1_TX_IRQHandler+0xc>)
 8003864:	f001 fc82 	bl	800516c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003868:	bd08      	pop	{r3, pc}
 800386a:	bf00      	nop
 800386c:	200030d8 	.word	0x200030d8

08003870 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003870:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003872:	4802      	ldr	r0, [pc, #8]	; (800387c <CAN1_RX0_IRQHandler+0xc>)
 8003874:	f001 fc7a 	bl	800516c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003878:	bd08      	pop	{r3, pc}
 800387a:	bf00      	nop
 800387c:	200030d8 	.word	0x200030d8

08003880 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003880:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003882:	4802      	ldr	r0, [pc, #8]	; (800388c <CAN1_RX1_IRQHandler+0xc>)
 8003884:	f001 fc72 	bl	800516c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003888:	bd08      	pop	{r3, pc}
 800388a:	bf00      	nop
 800388c:	200030d8 	.word	0x200030d8

08003890 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8003890:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003892:	4802      	ldr	r0, [pc, #8]	; (800389c <CAN1_SCE_IRQHandler+0xc>)
 8003894:	f001 fc6a 	bl	800516c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8003898:	bd08      	pop	{r3, pc}
 800389a:	bf00      	nop
 800389c:	200030d8 	.word	0x200030d8

080038a0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80038a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80038a2:	4802      	ldr	r0, [pc, #8]	; (80038ac <I2C1_EV_IRQHandler+0xc>)
 80038a4:	f002 fc74 	bl	8006190 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80038a8:	bd08      	pop	{r3, pc}
 80038aa:	bf00      	nop
 80038ac:	20004370 	.word	0x20004370

080038b0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80038b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80038b2:	4802      	ldr	r0, [pc, #8]	; (80038bc <I2C1_ER_IRQHandler+0xc>)
 80038b4:	f002 ff35 	bl	8006722 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80038b8:	bd08      	pop	{r3, pc}
 80038ba:	bf00      	nop
 80038bc:	20004370 	.word	0x20004370

080038c0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80038c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80038c2:	4802      	ldr	r0, [pc, #8]	; (80038cc <SPI2_IRQHandler+0xc>)
 80038c4:	f005 fb76 	bl	8008fb4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80038c8:	bd08      	pop	{r3, pc}
 80038ca:	bf00      	nop
 80038cc:	20004468 	.word	0x20004468

080038d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80038d0:	b508      	push	{r3, lr}
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 80038d2:	4b04      	ldr	r3, [pc, #16]	; (80038e4 <USART1_IRQHandler+0x14>)
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	f013 0f20 	tst.w	r3, #32
 80038da:	d001      	beq.n	80038e0 <USART1_IRQHandler+0x10>
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART1)!=RESET)
	{
		/* RXNE flag will be cleared by reading of RDR register (done in call) */
		/* Call function in charge of handling Character reception */
		GSM_CharReception_Callback();
 80038dc:	f7ff ff06 	bl	80036ec <GSM_CharReception_Callback>
	}
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80038e0:	bd08      	pop	{r3, pc}
 80038e2:	bf00      	nop
 80038e4:	40013800 	.word	0x40013800

080038e8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 80038e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80038ea:	4802      	ldr	r0, [pc, #8]	; (80038f4 <RTC_Alarm_IRQHandler+0xc>)
 80038ec:	f004 fd0c 	bl	8008308 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80038f0:	bd08      	pop	{r3, pc}
 80038f2:	bf00      	nop
 80038f4:	20004430 	.word	0x20004430

080038f8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80038f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80038fa:	4802      	ldr	r0, [pc, #8]	; (8003904 <TIM7_IRQHandler+0xc>)
 80038fc:	f005 fc4f 	bl	800919e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003900:	bd08      	pop	{r3, pc}
 8003902:	bf00      	nop
 8003904:	200044cc 	.word	0x200044cc

08003908 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8003908:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800390a:	4802      	ldr	r0, [pc, #8]	; (8003914 <LPTIM1_IRQHandler+0xc>)
 800390c:	f003 f9a5 	bl	8006c5a <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8003910:	bd08      	pop	{r3, pc}
 8003912:	bf00      	nop
 8003914:	200043cc 	.word	0x200043cc

08003918 <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 8003918:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 800391a:	4802      	ldr	r0, [pc, #8]	; (8003924 <RNG_IRQHandler+0xc>)
 800391c:	f004 fc4e 	bl	80081bc <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 8003920:	bd08      	pop	{r3, pc}
 8003922:	bf00      	nop
 8003924:	20004404 	.word	0x20004404

08003928 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8003928:	2001      	movs	r0, #1
 800392a:	4770      	bx	lr

0800392c <_kill>:

int _kill(int pid, int sig)
{
 800392c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800392e:	f006 fa33 	bl	8009d98 <__errno>
 8003932:	2316      	movs	r3, #22
 8003934:	6003      	str	r3, [r0, #0]
	return -1;
}
 8003936:	f04f 30ff 	mov.w	r0, #4294967295
 800393a:	bd08      	pop	{r3, pc}

0800393c <_exit>:

void _exit (int status)
{
 800393c:	b508      	push	{r3, lr}
	_kill(status, -1);
 800393e:	f04f 31ff 	mov.w	r1, #4294967295
 8003942:	f7ff fff3 	bl	800392c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003946:	e7fe      	b.n	8003946 <_exit+0xa>

08003948 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003948:	b570      	push	{r4, r5, r6, lr}
 800394a:	460c      	mov	r4, r1
 800394c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800394e:	2500      	movs	r5, #0
 8003950:	42b5      	cmp	r5, r6
 8003952:	da07      	bge.n	8003964 <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8003954:	f3af 8000 	nop.w
 8003958:	4621      	mov	r1, r4
 800395a:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800395e:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8003960:	460c      	mov	r4, r1
 8003962:	e7f5      	b.n	8003950 <_read+0x8>
	}

return len;
}
 8003964:	4630      	mov	r0, r6
 8003966:	bd70      	pop	{r4, r5, r6, pc}

08003968 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003968:	b570      	push	{r4, r5, r6, lr}
 800396a:	460c      	mov	r4, r1
 800396c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800396e:	2500      	movs	r5, #0
 8003970:	42b5      	cmp	r5, r6
 8003972:	da05      	bge.n	8003980 <_write+0x18>
	{
		__io_putchar(*ptr++);
 8003974:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003978:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800397c:	3501      	adds	r5, #1
 800397e:	e7f7      	b.n	8003970 <_write+0x8>
	}
	return len;
}
 8003980:	4630      	mov	r0, r6
 8003982:	bd70      	pop	{r4, r5, r6, pc}

08003984 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8003984:	b508      	push	{r3, lr}
 8003986:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003988:	4a0b      	ldr	r2, [pc, #44]	; (80039b8 <_sbrk+0x34>)
 800398a:	6812      	ldr	r2, [r2, #0]
 800398c:	b142      	cbz	r2, 80039a0 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 800398e:	4a0a      	ldr	r2, [pc, #40]	; (80039b8 <_sbrk+0x34>)
 8003990:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8003992:	4403      	add	r3, r0
 8003994:	466a      	mov	r2, sp
 8003996:	4293      	cmp	r3, r2
 8003998:	d806      	bhi.n	80039a8 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 800399a:	4a07      	ldr	r2, [pc, #28]	; (80039b8 <_sbrk+0x34>)
 800399c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800399e:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80039a0:	4a05      	ldr	r2, [pc, #20]	; (80039b8 <_sbrk+0x34>)
 80039a2:	4906      	ldr	r1, [pc, #24]	; (80039bc <_sbrk+0x38>)
 80039a4:	6011      	str	r1, [r2, #0]
 80039a6:	e7f2      	b.n	800398e <_sbrk+0xa>
		errno = ENOMEM;
 80039a8:	f006 f9f6 	bl	8009d98 <__errno>
 80039ac:	230c      	movs	r3, #12
 80039ae:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80039b0:	f04f 30ff 	mov.w	r0, #4294967295
 80039b4:	e7f3      	b.n	800399e <_sbrk+0x1a>
 80039b6:	bf00      	nop
 80039b8:	20002358 	.word	0x20002358
 80039bc:	20004c18 	.word	0x20004c18

080039c0 <_close>:

int _close(int file)
{
	return -1;
}
 80039c0:	f04f 30ff 	mov.w	r0, #4294967295
 80039c4:	4770      	bx	lr

080039c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80039c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039ca:	604b      	str	r3, [r1, #4]
	return 0;
}
 80039cc:	2000      	movs	r0, #0
 80039ce:	4770      	bx	lr

080039d0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80039d0:	2001      	movs	r0, #1
 80039d2:	4770      	bx	lr

080039d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80039d4:	2000      	movs	r0, #0
 80039d6:	4770      	bx	lr

080039d8 <SystemInit>:

void SystemInit(void)
{
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 80039d8:	4b0f      	ldr	r3, [pc, #60]	; (8003a18 <SystemInit+0x40>)
 80039da:	f04f 2208 	mov.w	r2, #134219776	; 0x8000800
 80039de:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80039e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80039e4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80039e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80039ec:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <SystemInit+0x44>)
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	f042 0201 	orr.w	r2, r2, #1
 80039f4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80039f6:	2100      	movs	r1, #0
 80039f8:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8003a00:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8003a04:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003a06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a0a:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a12:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003a14:	6199      	str	r1, [r3, #24]
}
 8003a16:	4770      	bx	lr
 8003a18:	e000ed00 	.word	0xe000ed00
 8003a1c:	40021000 	.word	0x40021000

08003a20 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003a20:	b500      	push	{lr}
 8003a22:	b085      	sub	sp, #20

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a24:	2300      	movs	r3, #0
 8003a26:	9301      	str	r3, [sp, #4]
 8003a28:	9302      	str	r3, [sp, #8]
 8003a2a:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003a2c:	480e      	ldr	r0, [pc, #56]	; (8003a68 <MX_TIM7_Init+0x48>)
 8003a2e:	4a0f      	ldr	r2, [pc, #60]	; (8003a6c <MX_TIM7_Init+0x4c>)
 8003a30:	6002      	str	r2, [r0, #0]
  htim7.Init.Prescaler = 0;
 8003a32:	6043      	str	r3, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a34:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 2428;
 8003a36:	f640 127c 	movw	r2, #2428	; 0x97c
 8003a3a:	60c2      	str	r2, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a3c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003a3e:	f005 fcb3 	bl	80093a8 <HAL_TIM_Base_Init>
 8003a42:	b950      	cbnz	r0, 8003a5a <MX_TIM7_Init+0x3a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a44:	2300      	movs	r3, #0
 8003a46:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a48:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003a4a:	a901      	add	r1, sp, #4
 8003a4c:	4806      	ldr	r0, [pc, #24]	; (8003a68 <MX_TIM7_Init+0x48>)
 8003a4e:	f005 fd25 	bl	800949c <HAL_TIMEx_MasterConfigSynchronization>
 8003a52:	b928      	cbnz	r0, 8003a60 <MX_TIM7_Init+0x40>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003a54:	b005      	add	sp, #20
 8003a56:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003a5a:	f7fe fd73 	bl	8002544 <Error_Handler>
 8003a5e:	e7f1      	b.n	8003a44 <MX_TIM7_Init+0x24>
    Error_Handler();
 8003a60:	f7fe fd70 	bl	8002544 <Error_Handler>
}
 8003a64:	e7f6      	b.n	8003a54 <MX_TIM7_Init+0x34>
 8003a66:	bf00      	nop
 8003a68:	200044cc 	.word	0x200044cc
 8003a6c:	40001400 	.word	0x40001400

08003a70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM7)
 8003a70:	6802      	ldr	r2, [r0, #0]
 8003a72:	4b0e      	ldr	r3, [pc, #56]	; (8003aac <HAL_TIM_Base_MspInit+0x3c>)
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d000      	beq.n	8003a7a <HAL_TIM_Base_MspInit+0xa>
 8003a78:	4770      	bx	lr
{
 8003a7a:	b500      	push	{lr}
 8003a7c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003a7e:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8003a82:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a84:	f042 0220 	orr.w	r2, r2, #32
 8003a88:	659a      	str	r2, [r3, #88]	; 0x58
 8003a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8c:	f003 0320 	and.w	r3, r3, #32
 8003a90:	9301      	str	r3, [sp, #4]
 8003a92:	9b01      	ldr	r3, [sp, #4]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003a94:	2200      	movs	r2, #0
 8003a96:	4611      	mov	r1, r2
 8003a98:	2037      	movs	r0, #55	; 0x37
 8003a9a:	f001 fcab 	bl	80053f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003a9e:	2037      	movs	r0, #55	; 0x37
 8003aa0:	f001 fcee 	bl	8005480 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003aa4:	b003      	add	sp, #12
 8003aa6:	f85d fb04 	ldr.w	pc, [sp], #4
 8003aaa:	bf00      	nop
 8003aac:	40001400 	.word	0x40001400

08003ab0 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003ab0:	b510      	push	{r4, lr}
 8003ab2:	b0a8      	sub	sp, #160	; 0xa0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	9121      	str	r1, [sp, #132]	; 0x84
 8003ab8:	9122      	str	r1, [sp, #136]	; 0x88
 8003aba:	9123      	str	r1, [sp, #140]	; 0x8c
 8003abc:	9124      	str	r1, [sp, #144]	; 0x90
 8003abe:	9125      	str	r1, [sp, #148]	; 0x94
 8003ac0:	9126      	str	r1, [sp, #152]	; 0x98
 8003ac2:	9127      	str	r1, [sp, #156]	; 0x9c

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac4:	911b      	str	r1, [sp, #108]	; 0x6c
 8003ac6:	911c      	str	r1, [sp, #112]	; 0x70
 8003ac8:	911d      	str	r1, [sp, #116]	; 0x74
 8003aca:	911e      	str	r1, [sp, #120]	; 0x78
 8003acc:	911f      	str	r1, [sp, #124]	; 0x7c
 8003ace:	9120      	str	r1, [sp, #128]	; 0x80
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ad0:	225c      	movs	r2, #92	; 0x5c
 8003ad2:	a804      	add	r0, sp, #16
 8003ad4:	f006 f9c2 	bl	8009e5c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	9303      	str	r3, [sp, #12]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003adc:	a803      	add	r0, sp, #12
 8003ade:	f004 f853 	bl	8007b88 <HAL_RCCEx_PeriphCLKConfig>
 8003ae2:	2800      	cmp	r0, #0
 8003ae4:	d164      	bne.n	8003bb0 <MX_USART1_UART_Init+0x100>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003ae6:	4b35      	ldr	r3, [pc, #212]	; (8003bbc <MX_USART1_UART_Init+0x10c>)
 8003ae8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003aea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003aee:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003af0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003af2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003af6:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8003af8:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003afa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003afc:	f042 0201 	orr.w	r2, r2, #1
 8003b00:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003b0a:	9b01      	ldr	r3, [sp, #4]
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8003b0c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003b10:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003b12:	2302      	movs	r3, #2
 8003b14:	931c      	str	r3, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003b16:	2300      	movs	r3, #0
 8003b18:	931d      	str	r3, [sp, #116]	; 0x74
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003b1a:	931e      	str	r3, [sp, #120]	; 0x78
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003b1c:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003b1e:	2307      	movs	r3, #7
 8003b20:	9320      	str	r3, [sp, #128]	; 0x80
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b22:	a91b      	add	r1, sp, #108	; 0x6c
 8003b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b28:	f005 fd64 	bl	80095f4 <LL_GPIO_Init>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b2c:	4b24      	ldr	r3, [pc, #144]	; (8003bc0 <MX_USART1_UART_Init+0x110>)
 8003b2e:	68da      	ldr	r2, [r3, #12]
 8003b30:	f3c2 2202 	ubfx	r2, r2, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b34:	f1c2 0307 	rsb	r3, r2, #7
 8003b38:	2b04      	cmp	r3, #4
 8003b3a:	bf28      	it	cs
 8003b3c:	2304      	movcs	r3, #4
 8003b3e:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b40:	1d13      	adds	r3, r2, #4
 8003b42:	2b06      	cmp	r3, #6
 8003b44:	d937      	bls.n	8003bb6 <MX_USART1_UART_Init+0x106>
 8003b46:	3a03      	subs	r2, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b48:	f04f 33ff 	mov.w	r3, #4294967295
 8003b4c:	408b      	lsls	r3, r1
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b56:	011b      	lsls	r3, r3, #4
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	4a1a      	ldr	r2, [pc, #104]	; (8003bc4 <MX_USART1_UART_Init+0x114>)
 8003b5c:	f882 3325 	strb.w	r3, [r2, #805]	; 0x325
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b60:	2320      	movs	r3, #32
 8003b62:	6053      	str	r3, [r2, #4]
  NVIC_EnableIRQ(USART1_IRQn);

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8003b64:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8003b68:	9321      	str	r3, [sp, #132]	; 0x84
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	9322      	str	r3, [sp, #136]	; 0x88
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003b6e:	9323      	str	r3, [sp, #140]	; 0x8c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003b70:	9324      	str	r3, [sp, #144]	; 0x90
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003b72:	220c      	movs	r2, #12
 8003b74:	9225      	str	r2, [sp, #148]	; 0x94
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003b76:	9326      	str	r3, [sp, #152]	; 0x98
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003b78:	9327      	str	r3, [sp, #156]	; 0x9c
  LL_USART_Init(USART1, &USART_InitStruct);
 8003b7a:	4c13      	ldr	r4, [pc, #76]	; (8003bc8 <MX_USART1_UART_Init+0x118>)
 8003b7c:	a921      	add	r1, sp, #132	; 0x84
 8003b7e:	4620      	mov	r0, r4
 8003b80:	f006 f806 	bl	8009b90 <LL_USART_Init>
  SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
 8003b84:	68a3      	ldr	r3, [r4, #8]
 8003b86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b8a:	60a3      	str	r3, [r4, #8]
  CLEAR_BIT(USARTx->CR3, USART_CR3_DDRE);
 8003b8c:	68a3      	ldr	r3, [r4, #8]
 8003b8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b92:	60a3      	str	r3, [r4, #8]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b94:	6863      	ldr	r3, [r4, #4]
 8003b96:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003b9a:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003b9c:	68a3      	ldr	r3, [r4, #8]
 8003b9e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003ba2:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003ba4:	6823      	ldr	r3, [r4, #0]
 8003ba6:	f043 0301 	orr.w	r3, r3, #1
 8003baa:	6023      	str	r3, [r4, #0]
  LL_USART_Enable(USART1);
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003bac:	b028      	add	sp, #160	; 0xa0
 8003bae:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003bb0:	f7fe fcc8 	bl	8002544 <Error_Handler>
 8003bb4:	e797      	b.n	8003ae6 <MX_USART1_UART_Init+0x36>
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	e7c6      	b.n	8003b48 <MX_USART1_UART_Init+0x98>
 8003bba:	bf00      	nop
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	e000ed00 	.word	0xe000ed00
 8003bc4:	e000e100 	.word	0xe000e100
 8003bc8:	40013800 	.word	0x40013800

08003bcc <SubRevicedString>:


#include "user_MqttSubSperator.h"

void SubRevicedString()
{//$,054061957514975180815242966,2,3,D1,1,@
 8003bcc:	b570      	push	{r4, r5, r6, lr}
 8003bce:	b0a6      	sub	sp, #152	; 0x98
 //$,054061957514975180815242966,7,"url",@$,054061957514975180815242966,1,7,"url",@
	uint16_t key = 0;
	char gau8TempSUBRequest[150] = {'0'};
 8003bd0:	2330      	movs	r3, #48	; 0x30
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	2292      	movs	r2, #146	; 0x92
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	a801      	add	r0, sp, #4
 8003bda:	f006 f93f 	bl	8009e5c <memset>
	char *token = NULL;
	token = strtok(gau8SUBRequest,",");//$
 8003bde:	4c3a      	ldr	r4, [pc, #232]	; (8003cc8 <SubRevicedString+0xfc>)
 8003be0:	4621      	mov	r1, r4
 8003be2:	483a      	ldr	r0, [pc, #232]	; (8003ccc <SubRevicedString+0x100>)
 8003be4:	f006 fa58 	bl	800a098 <strtok>
	token = strtok(NULL,",");//HW
 8003be8:	4621      	mov	r1, r4
 8003bea:	2000      	movs	r0, #0
 8003bec:	f006 fa54 	bl	800a098 <strtok>
	token = strtok(NULL,",");//2way
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	f006 fa50 	bl	800a098 <strtok>
 8003bf8:	4604      	mov	r4, r0

	if(atoi(token) == 2) //2 All 2 way code
 8003bfa:	f006 f8c8 	bl	8009d8e <atoi>
 8003bfe:	2802      	cmp	r0, #2
 8003c00:	d03e      	beq.n	8003c80 <SubRevicedString+0xb4>
		key = atoi(token);
	}
	else
	{

		key = atoi(token);
 8003c02:	4620      	mov	r0, r4
 8003c04:	f006 f8c3 	bl	8009d8e <atoi>
 8003c08:	b280      	uxth	r0, r0
	}

	switch (key)
 8003c0a:	2803      	cmp	r0, #3
 8003c0c:	d055      	beq.n	8003cba <SubRevicedString+0xee>
 8003c0e:	2807      	cmp	r0, #7
 8003c10:	d150      	bne.n	8003cb4 <SubRevicedString+0xe8>
	{
		case enmSUBSTRINGINDETIFY_FOTA:
		{
			token = strtok(NULL,",");//Data
 8003c12:	4d2d      	ldr	r5, [pc, #180]	; (8003cc8 <SubRevicedString+0xfc>)
 8003c14:	4629      	mov	r1, r5
 8003c16:	2000      	movs	r0, #0
 8003c18:	f006 fa3e 	bl	800a098 <strtok>
 8003c1c:	4604      	mov	r4, r0
			memset(gau8TempSUBRequest,0x00,sizeof(gau8TempSUBRequest));
 8003c1e:	2296      	movs	r2, #150	; 0x96
 8003c20:	2100      	movs	r1, #0
 8003c22:	4668      	mov	r0, sp
 8003c24:	f006 f91a 	bl	8009e5c <memset>
			memcpy(gau8TempSUBRequest, token, strlen(strtok(token,",")));
 8003c28:	4629      	mov	r1, r5
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	f006 fa34 	bl	800a098 <strtok>
 8003c30:	f7fc fece 	bl	80009d0 <strlen>
 8003c34:	4602      	mov	r2, r0
 8003c36:	4621      	mov	r1, r4
 8003c38:	4668      	mov	r0, sp
 8003c3a:	f006 f901 	bl	8009e40 <memcpy>

			const char *URL = strstr(gau8TempSUBRequest,"http");
 8003c3e:	4924      	ldr	r1, [pc, #144]	; (8003cd0 <SubRevicedString+0x104>)
 8003c40:	4668      	mov	r0, sp
 8003c42:	f006 fa11 	bl	800a068 <strstr>
 8003c46:	4604      	mov	r4, r0
			const char *BIN = strstr(gau8TempSUBRequest,".bin");
 8003c48:	4922      	ldr	r1, [pc, #136]	; (8003cd4 <SubRevicedString+0x108>)
 8003c4a:	4668      	mov	r0, sp
 8003c4c:	f006 fa0c 	bl	800a068 <strstr>
			const size_t mlen = BIN - URL;
 8003c50:	1b05      	subs	r5, r0, r4
//			gu32FotaRquestFlag = TRUE;
			if((URL != NULL) && (BIN != NULL))
 8003c52:	b1ec      	cbz	r4, 8003c90 <SubRevicedString+0xc4>
 8003c54:	b1e0      	cbz	r0, 8003c90 <SubRevicedString+0xc4>
			{
				memset(gau8FotaURL,0x00,sizeof(gau8FotaURL));
 8003c56:	4e20      	ldr	r6, [pc, #128]	; (8003cd8 <SubRevicedString+0x10c>)
 8003c58:	2264      	movs	r2, #100	; 0x64
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	4630      	mov	r0, r6
 8003c5e:	f006 f8fd 	bl	8009e5c <memset>
				memcpy(gau8FotaURL,URL,mlen+4);
 8003c62:	1d2a      	adds	r2, r5, #4
 8003c64:	4621      	mov	r1, r4
 8003c66:	4630      	mov	r0, r6
 8003c68:	f006 f8ea 	bl	8009e40 <memcpy>
				Diagnostic(enmDiagnostic_FOTA_REQ_RX);
 8003c6c:	2004      	movs	r0, #4
 8003c6e:	f7fd fd07 	bl	8001680 <Diagnostic>
				gu32FotaRquestFlag = TRUE;
 8003c72:	4b1a      	ldr	r3, [pc, #104]	; (8003cdc <SubRevicedString+0x110>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	601a      	str	r2, [r3, #0]
				SUBTriggerFlag = FALSE;
 8003c78:	4b19      	ldr	r3, [pc, #100]	; (8003ce0 <SubRevicedString+0x114>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	701a      	strb	r2, [r3, #0]
 8003c7e:	e01c      	b.n	8003cba <SubRevicedString+0xee>
		token = strtok(NULL,",");//Operation
 8003c80:	4911      	ldr	r1, [pc, #68]	; (8003cc8 <SubRevicedString+0xfc>)
 8003c82:	2000      	movs	r0, #0
 8003c84:	f006 fa08 	bl	800a098 <strtok>
		key = atoi(token);
 8003c88:	f006 f881 	bl	8009d8e <atoi>
 8003c8c:	b280      	uxth	r0, r0
 8003c8e:	e7bc      	b.n	8003c0a <SubRevicedString+0x3e>
			}
			else
			{
				memset(gau8FotaURL,0x00,sizeof(gau8FotaURL));
 8003c90:	4c11      	ldr	r4, [pc, #68]	; (8003cd8 <SubRevicedString+0x10c>)
 8003c92:	2264      	movs	r2, #100	; 0x64
 8003c94:	2100      	movs	r1, #0
 8003c96:	4620      	mov	r0, r4
 8003c98:	f006 f8e0 	bl	8009e5c <memset>
				memcpy(gau8FotaURL,gau8TempSUBRequest,strlen(gau8TempSUBRequest));
 8003c9c:	4668      	mov	r0, sp
 8003c9e:	f7fc fe97 	bl	80009d0 <strlen>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	4669      	mov	r1, sp
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	f006 f8ca 	bl	8009e40 <memcpy>
//			  Diagnostic(enmDiagnostic_FOTA_REQ_RX_ERROR);
			  SUBTriggerFlag = FALSE;
 8003cac:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <SubRevicedString+0x114>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	701a      	strb	r2, [r3, #0]
 8003cb2:	e002      	b.n	8003cba <SubRevicedString+0xee>
////				Diagnostic(enmDiagnostic_IMOBI_REQ_RX);
//			}

			break;
		default:
			SUBTriggerFlag = FALSE;
 8003cb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ce0 <SubRevicedString+0x114>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	701a      	strb	r2, [r3, #0]
			break;
	}


	memset(gau8SUBRequest,0x00,sizeof(gau8SUBRequest));
 8003cba:	2296      	movs	r2, #150	; 0x96
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	4803      	ldr	r0, [pc, #12]	; (8003ccc <SubRevicedString+0x100>)
 8003cc0:	f006 f8cc 	bl	8009e5c <memset>
}
 8003cc4:	b026      	add	sp, #152	; 0x98
 8003cc6:	bd70      	pop	{r4, r5, r6, pc}
 8003cc8:	0800b6b4 	.word	0x0800b6b4
 8003ccc:	200005d4 	.word	0x200005d4
 8003cd0:	0800b7cc 	.word	0x0800b7cc
 8003cd4:	0800b7d4 	.word	0x0800b7d4
 8003cd8:	20002150 	.word	0x20002150
 8003cdc:	20001aec 	.word	0x20001aec
 8003ce0:	200021c8 	.word	0x200021c8

08003ce4 <HAL_ADC_ConvCpltCallback>:
 KloudQ Team        21/01/19			Added info header
******************************************************************************/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
	/*Sequence conversion complete . Read Processed Value */
	if(hadc->Instance == ADC1)
 8003ce4:	6802      	ldr	r2, [r0, #0]
 8003ce6:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <HAL_ADC_ConvCpltCallback+0x1c>)
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d000      	beq.n	8003cee <HAL_ADC_ConvCpltCallback+0xa>
	}
	else
	{
		/* Unknown Interrupt */
	}
}
 8003cec:	4770      	bx	lr
		if(g32AdcConversionStatus == FALSE)
 8003cee:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <HAL_ADC_ConvCpltCallback+0x20>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1fa      	bne.n	8003cec <HAL_ADC_ConvCpltCallback+0x8>
			g32AdcConversionStatus = TRUE;
 8003cf6:	4b03      	ldr	r3, [pc, #12]	; (8003d04 <HAL_ADC_ConvCpltCallback+0x20>)
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003cfc:	e7f6      	b.n	8003cec <HAL_ADC_ConvCpltCallback+0x8>
 8003cfe:	bf00      	nop
 8003d00:	50040000 	.word	0x50040000
 8003d04:	20002360 	.word	0x20002360

08003d08 <canFilterConfig>:
 KloudQ Team        22/03/2020			initial Definitions
 kloudq				27/03/2020			Bit Calculation Added
 kloudq				20/04/2021			Added support for STM32L433 MCU
******************************************************************************/
void canFilterConfig(void)
{
 8003d08:	b510      	push	{r4, lr}
	/*##-1- Configure the CAN peripheral #######################################*/
	/*##-1- Configure the CAN peripheral #######################################*/
	hcan1.Instance = CAN1;
 8003d0a:	4b5f      	ldr	r3, [pc, #380]	; (8003e88 <canFilterConfig+0x180>)
 8003d0c:	4a5f      	ldr	r2, [pc, #380]	; (8003e8c <canFilterConfig+0x184>)
 8003d0e:	601a      	str	r2, [r3, #0]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8003d10:	2200      	movs	r2, #0
 8003d12:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = ENABLE;
 8003d14:	2101      	movs	r1, #1
 8003d16:	7659      	strb	r1, [r3, #25]
	hcan1.Init.AutoWakeUp = ENABLE;
 8003d18:	7699      	strb	r1, [r3, #26]
	hcan1.Init.AutoRetransmission = ENABLE;
 8003d1a:	76d9      	strb	r1, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003d1c:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = ENABLE;
 8003d1e:	7759      	strb	r1, [r3, #29]

#if(CAN_MODE == NORMAL)
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003d20:	609a      	str	r2, [r3, #8]
#elif(CAN_MODE == SILENT)
	hcan1.Init.Mode = CAN_MODE_SILENT;
#endif
	/* Seg 1 and Seg 2 are kept constant for all bit rates .
	 * Only Prescaler value will change . Refer table in notes */
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003d22:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8003d24:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8003d28:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003d2a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d2e:	615a      	str	r2, [r3, #20]

	switch(gu32CanConfigurationArray[0])
 8003d30:	4b57      	ldr	r3, [pc, #348]	; (8003e90 <canFilterConfig+0x188>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b64      	cmp	r3, #100	; 0x64
 8003d36:	f000 8084 	beq.w	8003e42 <canFilterConfig+0x13a>
 8003d3a:	d961      	bls.n	8003e00 <canFilterConfig+0xf8>
 8003d3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003d40:	d077      	beq.n	8003e32 <canFilterConfig+0x12a>
 8003d42:	d96e      	bls.n	8003e22 <canFilterConfig+0x11a>
 8003d44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d48:	f040 8088 	bne.w	8003e5c <canFilterConfig+0x154>
	{
		case 1000:
			hcan1.Init.Prescaler = 3;
 8003d4c:	4b4e      	ldr	r3, [pc, #312]	; (8003e88 <canFilterConfig+0x180>)
 8003d4e:	2203      	movs	r2, #3
 8003d50:	605a      	str	r2, [r3, #4]
		/* Illegal BaudRate Configured . Use Default 500 Kbps */
			hcan1.Init.Prescaler = 6;
		break;
	}

	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003d52:	484d      	ldr	r0, [pc, #308]	; (8003e88 <canFilterConfig+0x180>)
 8003d54:	f000 fe24 	bl	80049a0 <HAL_CAN_Init>
 8003d58:	2800      	cmp	r0, #0
 8003d5a:	f000 8083 	beq.w	8003e64 <canFilterConfig+0x15c>
		assertError(enmTORERRORS_CAN1_INIT,enmERRORSTATE_ACTIVE);
 8003d5e:	2101      	movs	r1, #1
 8003d60:	4608      	mov	r0, r1
 8003d62:	f7fc ff35 	bl	8000bd0 <assertError>
	else
		 assertError(enmTORERRORS_CAN1_INIT,enmERRORSTATE_NOERROR);

	/*##-2- Configure the CAN Filter ###########################################*/
	  sFilterConfig.FilterBank = 0;
 8003d66:	494b      	ldr	r1, [pc, #300]	; (8003e94 <canFilterConfig+0x18c>)
 8003d68:	2300      	movs	r3, #0
 8003d6a:	614b      	str	r3, [r1, #20]
	  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003d6c:	618b      	str	r3, [r1, #24]
	  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8003d6e:	2201      	movs	r2, #1
 8003d70:	61ca      	str	r2, [r1, #28]
	  sFilterConfig.FilterIdHigh = 0x0000;
 8003d72:	600b      	str	r3, [r1, #0]
	  sFilterConfig.FilterIdLow = 0x0000;
 8003d74:	604b      	str	r3, [r1, #4]
	  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8003d76:	608b      	str	r3, [r1, #8]
	  sFilterConfig.FilterMaskIdLow = 0x0000;
 8003d78:	60cb      	str	r3, [r1, #12]
	  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8003d7a:	610b      	str	r3, [r1, #16]
	  sFilterConfig.FilterActivation = ENABLE;
 8003d7c:	620a      	str	r2, [r1, #32]
	  sFilterConfig.SlaveStartFilterBank = 14;
 8003d7e:	230e      	movs	r3, #14
 8003d80:	624b      	str	r3, [r1, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8003d82:	4841      	ldr	r0, [pc, #260]	; (8003e88 <canFilterConfig+0x180>)
 8003d84:	f000 ff7e 	bl	8004c84 <HAL_CAN_ConfigFilter>
 8003d88:	2800      	cmp	r0, #0
 8003d8a:	d070      	beq.n	8003e6e <canFilterConfig+0x166>
		assertError(enmTORERRORS_CAN1_CONFIGFILTER,enmERRORSTATE_ACTIVE);
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	2002      	movs	r0, #2
 8003d90:	f7fc ff1e 	bl	8000bd0 <assertError>
	else
		assertError(enmTORERRORS_CAN1_CONFIGFILTER,enmERRORSTATE_NOERROR);

	/*##-3- Start the CAN peripheral ###########################################*/
	  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8003d94:	483c      	ldr	r0, [pc, #240]	; (8003e88 <canFilterConfig+0x180>)
 8003d96:	f001 f84d 	bl	8004e34 <HAL_CAN_Start>
 8003d9a:	2800      	cmp	r0, #0
 8003d9c:	d16c      	bne.n	8003e78 <canFilterConfig+0x170>
	    /* Start Error */
	    Error_Handler();
	  }

	/*##-4- Activate CAN RX notification #######################################*/
	  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8003d9e:	2102      	movs	r1, #2
 8003da0:	4839      	ldr	r0, [pc, #228]	; (8003e88 <canFilterConfig+0x180>)
 8003da2:	f001 f9b5 	bl	8005110 <HAL_CAN_ActivateNotification>
 8003da6:	2800      	cmp	r0, #0
 8003da8:	d169      	bne.n	8003e7e <canFilterConfig+0x176>
//		/* Notification Error */
//		  assertError(enmTORERRORS_CAN1_CONFIGFILTER,enmERRORSTATE_ACTIVE);
//	  }

	  /*##-5- Configure Transmission process #####################################*/
	TxHeader.StdId = 0x321;
 8003daa:	4b3b      	ldr	r3, [pc, #236]	; (8003e98 <canFilterConfig+0x190>)
 8003dac:	f240 3221 	movw	r2, #801	; 0x321
 8003db0:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0x01;
 8003db2:	2201      	movs	r2, #1
 8003db4:	605a      	str	r2, [r3, #4]
	TxHeader.RTR = CAN_RTR_DATA;
 8003db6:	2400      	movs	r4, #0
 8003db8:	60dc      	str	r4, [r3, #12]
	TxHeader.IDE = CAN_ID_EXT;
 8003dba:	2104      	movs	r1, #4
 8003dbc:	6099      	str	r1, [r3, #8]
	TxHeader.DLC = 2;
 8003dbe:	2102      	movs	r1, #2
 8003dc0:	6119      	str	r1, [r3, #16]
	TxHeader.TransmitGlobalTime = ENABLE;
 8003dc2:	751a      	strb	r2, [r3, #20]

	unSoftwaredetails.u32BGaussMonth = 7;// 5(dec) converted to Hex
 8003dc4:	4b35      	ldr	r3, [pc, #212]	; (8003e9c <canFilterConfig+0x194>)
 8003dc6:	2107      	movs	r1, #7
 8003dc8:	8059      	strh	r1, [r3, #2]
	unSoftwaredetails.u32BGaussYear = 22; // 22(dec) converted to Hex
 8003dca:	2116      	movs	r1, #22
 8003dcc:	8019      	strh	r1, [r3, #0]
	unSoftwaredetails.u32BGaussDate = 13; // 13(dec) converted to Hex
 8003dce:	210d      	movs	r1, #13
 8003dd0:	8099      	strh	r1, [r3, #4]
	unSoftwaredetails.u32BgaussVersion = 30001;// 3.0.x16(dec) to Hex
 8003dd2:	f247 5131 	movw	r1, #30001	; 0x7531
 8003dd6:	80d9      	strh	r1, [r3, #6]

	unTelInfo.u32BGaussHeartBeat = 1;
 8003dd8:	4931      	ldr	r1, [pc, #196]	; (8003ea0 <canFilterConfig+0x198>)
 8003dda:	780b      	ldrb	r3, [r1, #0]
 8003ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003de0:	700b      	strb	r3, [r1, #0]
	gua8KeyData[0] = 0x01;
 8003de2:	4b30      	ldr	r3, [pc, #192]	; (8003ea4 <canFilterConfig+0x19c>)
 8003de4:	701a      	strb	r2, [r3, #0]


	memset(u32CanIdsReceived,0x00,sizeof(u32CanIdsReceived));
 8003de6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003dea:	4621      	mov	r1, r4
 8003dec:	482e      	ldr	r0, [pc, #184]	; (8003ea8 <canFilterConfig+0x1a0>)
 8003dee:	f006 f835 	bl	8009e5c <memset>
	memset(unCanReceivedMsgs,0x00,sizeof(unCanReceivedMsgs));
 8003df2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003df6:	4621      	mov	r1, r4
 8003df8:	482c      	ldr	r0, [pc, #176]	; (8003eac <canFilterConfig+0x1a4>)
 8003dfa:	f006 f82f 	bl	8009e5c <memset>

}
 8003dfe:	bd10      	pop	{r4, pc}
	switch(gu32CanConfigurationArray[0])
 8003e00:	2b32      	cmp	r3, #50	; 0x32
 8003e02:	d022      	beq.n	8003e4a <canFilterConfig+0x142>
 8003e04:	d905      	bls.n	8003e12 <canFilterConfig+0x10a>
 8003e06:	2b53      	cmp	r3, #83	; 0x53
 8003e08:	d128      	bne.n	8003e5c <canFilterConfig+0x154>
			hcan1.Init.Prescaler = 36;
 8003e0a:	4b1f      	ldr	r3, [pc, #124]	; (8003e88 <canFilterConfig+0x180>)
 8003e0c:	2224      	movs	r2, #36	; 0x24
 8003e0e:	605a      	str	r2, [r3, #4]
		break;
 8003e10:	e79f      	b.n	8003d52 <canFilterConfig+0x4a>
	switch(gu32CanConfigurationArray[0])
 8003e12:	2b0a      	cmp	r3, #10
 8003e14:	d01d      	beq.n	8003e52 <canFilterConfig+0x14a>
 8003e16:	2b14      	cmp	r3, #20
 8003e18:	d120      	bne.n	8003e5c <canFilterConfig+0x154>
			hcan1.Init.Prescaler = 150;
 8003e1a:	4b1b      	ldr	r3, [pc, #108]	; (8003e88 <canFilterConfig+0x180>)
 8003e1c:	2296      	movs	r2, #150	; 0x96
 8003e1e:	605a      	str	r2, [r3, #4]
		break;
 8003e20:	e797      	b.n	8003d52 <canFilterConfig+0x4a>
	switch(gu32CanConfigurationArray[0])
 8003e22:	2b7d      	cmp	r3, #125	; 0x7d
 8003e24:	d009      	beq.n	8003e3a <canFilterConfig+0x132>
 8003e26:	2bfa      	cmp	r3, #250	; 0xfa
 8003e28:	d118      	bne.n	8003e5c <canFilterConfig+0x154>
			hcan1.Init.Prescaler = 12;
 8003e2a:	4b17      	ldr	r3, [pc, #92]	; (8003e88 <canFilterConfig+0x180>)
 8003e2c:	220c      	movs	r2, #12
 8003e2e:	605a      	str	r2, [r3, #4]
		break;
 8003e30:	e78f      	b.n	8003d52 <canFilterConfig+0x4a>
			hcan1.Init.Prescaler = 6;
 8003e32:	4b15      	ldr	r3, [pc, #84]	; (8003e88 <canFilterConfig+0x180>)
 8003e34:	2206      	movs	r2, #6
 8003e36:	605a      	str	r2, [r3, #4]
		break;
 8003e38:	e78b      	b.n	8003d52 <canFilterConfig+0x4a>
			hcan1.Init.Prescaler = 24;
 8003e3a:	4b13      	ldr	r3, [pc, #76]	; (8003e88 <canFilterConfig+0x180>)
 8003e3c:	2218      	movs	r2, #24
 8003e3e:	605a      	str	r2, [r3, #4]
		break;
 8003e40:	e787      	b.n	8003d52 <canFilterConfig+0x4a>
			hcan1.Init.Prescaler = 30;
 8003e42:	4b11      	ldr	r3, [pc, #68]	; (8003e88 <canFilterConfig+0x180>)
 8003e44:	221e      	movs	r2, #30
 8003e46:	605a      	str	r2, [r3, #4]
		break;
 8003e48:	e783      	b.n	8003d52 <canFilterConfig+0x4a>
			hcan1.Init.Prescaler = 60;
 8003e4a:	4b0f      	ldr	r3, [pc, #60]	; (8003e88 <canFilterConfig+0x180>)
 8003e4c:	223c      	movs	r2, #60	; 0x3c
 8003e4e:	605a      	str	r2, [r3, #4]
		break;
 8003e50:	e77f      	b.n	8003d52 <canFilterConfig+0x4a>
			hcan1.Init.Prescaler = 300;
 8003e52:	4b0d      	ldr	r3, [pc, #52]	; (8003e88 <canFilterConfig+0x180>)
 8003e54:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e58:	605a      	str	r2, [r3, #4]
		break;
 8003e5a:	e77a      	b.n	8003d52 <canFilterConfig+0x4a>
			hcan1.Init.Prescaler = 6;
 8003e5c:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <canFilterConfig+0x180>)
 8003e5e:	2206      	movs	r2, #6
 8003e60:	605a      	str	r2, [r3, #4]
		break;
 8003e62:	e776      	b.n	8003d52 <canFilterConfig+0x4a>
		 assertError(enmTORERRORS_CAN1_INIT,enmERRORSTATE_NOERROR);
 8003e64:	2100      	movs	r1, #0
 8003e66:	2001      	movs	r0, #1
 8003e68:	f7fc feb2 	bl	8000bd0 <assertError>
 8003e6c:	e77b      	b.n	8003d66 <canFilterConfig+0x5e>
		assertError(enmTORERRORS_CAN1_CONFIGFILTER,enmERRORSTATE_NOERROR);
 8003e6e:	2100      	movs	r1, #0
 8003e70:	2002      	movs	r0, #2
 8003e72:	f7fc fead 	bl	8000bd0 <assertError>
 8003e76:	e78d      	b.n	8003d94 <canFilterConfig+0x8c>
	    Error_Handler();
 8003e78:	f7fe fb64 	bl	8002544 <Error_Handler>
 8003e7c:	e78f      	b.n	8003d9e <canFilterConfig+0x96>
		  assertError(enmTORERRORS_CAN1_CONFIGFILTER,enmERRORSTATE_ACTIVE);
 8003e7e:	2101      	movs	r1, #1
 8003e80:	2002      	movs	r0, #2
 8003e82:	f7fc fea5 	bl	8000bd0 <assertError>
 8003e86:	e790      	b.n	8003daa <canFilterConfig+0xa2>
 8003e88:	200030d8 	.word	0x200030d8
 8003e8c:	40006400 	.word	0x40006400
 8003e90:	200015f8 	.word	0x200015f8
 8003e94:	20004518 	.word	0x20004518
 8003e98:	20004bac 	.word	0x20004bac
 8003e9c:	20004b80 	.word	0x20004b80
 8003ea0:	20004ba4 	.word	0x20004ba4
 8003ea4:	20004b88 	.word	0x20004b88
 8003ea8:	200016c4 	.word	0x200016c4
 8003eac:	20004540 	.word	0x20004540

08003eb0 <HAL_CAN_RxFifo0MsgPendingCallback>:
 Author            	Date                Remarks
 KloudQ Team        20/04/21			initial code
******************************************************************************/
extern uint32_t gu32GSMPowerStateFlag;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003eb0:	b510      	push	{r4, lr}
 8003eb2:	4604      	mov	r4, r0
	/* LED Only for testing/ Indication . Can be removed in production if not required  */

	/* Get RX message . Exit Sleep Mode */
//	memset(TxData,0x00,sizeof(TxData));
//	gu32CANQueryCommandResponseReceivedFlag = TRUE;
	HAL_GPIO_TogglePin(LED_COMM_GPIO_Port, LED_COMM_Pin);
 8003eb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003eb8:	482a      	ldr	r0, [pc, #168]	; (8003f64 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8003eba:	f002 f82f 	bl	8005f1c <HAL_GPIO_TogglePin>
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8003ebe:	4b2a      	ldr	r3, [pc, #168]	; (8003f68 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8003ec0:	4a2a      	ldr	r2, [pc, #168]	; (8003f6c <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	4620      	mov	r0, r4
 8003ec6:	f001 f86b 	bl	8004fa0 <HAL_CAN_GetRxMessage>
 8003eca:	b9e0      	cbnz	r0, 8003f06 <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
	{
		/* Reception Error */
		Error_Handler();
	}

	gu8NoCANDATATimeOut = THREE_SEC;
 8003ecc:	4b28      	ldr	r3, [pc, #160]	; (8003f70 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8003ece:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003ed2:	601a      	str	r2, [r3, #0]

	/* Parse the incoming data only if array location is available
		 * Added on 3/3/21 - For payload overwrite issue */
	if(u32CanIdsReceived[u32CanRxMsgLoopCounter] == 0)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	4a27      	ldr	r2, [pc, #156]	; (8003f74 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8003ed8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8003edc:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 8003ee0:	2a00      	cmp	r2, #0
 8003ee2:	d136      	bne.n	8003f52 <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
	{
		if(RxHeader.IDE == CAN_ID_EXT)
 8003ee4:	4a21      	ldr	r2, [pc, #132]	; (8003f6c <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8003ee6:	6892      	ldr	r2, [r2, #8]
 8003ee8:	2a04      	cmp	r2, #4
 8003eea:	d00f      	beq.n	8003f0c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>
		{
			u32CanIdsReceived[u32CanRxMsgLoopCounter] = RxHeader.ExtId;
			unCanIdsReceived[u32CanRxMsgLoopCounter].u32J1939CommandId = RxHeader.ExtId;
		}
		else if(RxHeader.IDE == CAN_ID_STD)
 8003eec:	b9ca      	cbnz	r2, 8003f22 <HAL_CAN_RxFifo0MsgPendingCallback+0x72>
		{
			u32CanIdsReceived[u32CanRxMsgLoopCounter] = RxHeader.StdId;
 8003eee:	4a1f      	ldr	r2, [pc, #124]	; (8003f6c <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8003ef0:	6811      	ldr	r1, [r2, #0]
 8003ef2:	4a20      	ldr	r2, [pc, #128]	; (8003f74 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8003ef4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8003ef8:	f8c2 10cc 	str.w	r1, [r2, #204]	; 0xcc
			unCanIdsReceived[u32CanRxMsgLoopCounter].u32J1939CommandId = RxHeader.StdId;
 8003efc:	4a1c      	ldr	r2, [pc, #112]	; (8003f70 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8003efe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8003f02:	6091      	str	r1, [r2, #8]
 8003f04:	e00d      	b.n	8003f22 <HAL_CAN_RxFifo0MsgPendingCallback+0x72>
		Error_Handler();
 8003f06:	f7fe fb1d 	bl	8002544 <Error_Handler>
 8003f0a:	e7df      	b.n	8003ecc <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
			u32CanIdsReceived[u32CanRxMsgLoopCounter] = RxHeader.ExtId;
 8003f0c:	4a17      	ldr	r2, [pc, #92]	; (8003f6c <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8003f0e:	6851      	ldr	r1, [r2, #4]
 8003f10:	4a18      	ldr	r2, [pc, #96]	; (8003f74 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8003f12:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8003f16:	f8c2 10cc 	str.w	r1, [r2, #204]	; 0xcc
			unCanIdsReceived[u32CanRxMsgLoopCounter].u32J1939CommandId = RxHeader.ExtId;
 8003f1a:	4a15      	ldr	r2, [pc, #84]	; (8003f70 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8003f1c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8003f20:	6091      	str	r1, [r2, #8]
		}

		//Motorola format
		unCanReceivedMsgs[u32CanRxMsgLoopCounter].u8CanMsgByte0 = (RxData[7]);
 8003f22:	4a11      	ldr	r2, [pc, #68]	; (8003f68 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8003f24:	79d4      	ldrb	r4, [r2, #7]
 8003f26:	4814      	ldr	r0, [pc, #80]	; (8003f78 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8003f28:	eb00 01c3 	add.w	r1, r0, r3, lsl #3
 8003f2c:	71cc      	strb	r4, [r1, #7]
		unCanReceivedMsgs[u32CanRxMsgLoopCounter].u8CanMsgByte1 = (RxData[6]);
 8003f2e:	7994      	ldrb	r4, [r2, #6]
 8003f30:	718c      	strb	r4, [r1, #6]
		unCanReceivedMsgs[u32CanRxMsgLoopCounter].u8CanMsgByte2 = (RxData[5]);
 8003f32:	7954      	ldrb	r4, [r2, #5]
 8003f34:	714c      	strb	r4, [r1, #5]
		unCanReceivedMsgs[u32CanRxMsgLoopCounter].u8CanMsgByte3 = (RxData[4]);
 8003f36:	7914      	ldrb	r4, [r2, #4]
 8003f38:	710c      	strb	r4, [r1, #4]
		unCanReceivedMsgs[u32CanRxMsgLoopCounter].u8CanMsgByte4 = (RxData[3]);
 8003f3a:	78d4      	ldrb	r4, [r2, #3]
 8003f3c:	70cc      	strb	r4, [r1, #3]
		unCanReceivedMsgs[u32CanRxMsgLoopCounter].u8CanMsgByte5 = (RxData[2]);
 8003f3e:	7894      	ldrb	r4, [r2, #2]
 8003f40:	708c      	strb	r4, [r1, #2]
		unCanReceivedMsgs[u32CanRxMsgLoopCounter].u8CanMsgByte6 = (RxData[1]);
 8003f42:	7854      	ldrb	r4, [r2, #1]
 8003f44:	704c      	strb	r4, [r1, #1]
		unCanReceivedMsgs[u32CanRxMsgLoopCounter].u8CanMsgByte7 = (RxData[0]);
 8003f46:	7812      	ldrb	r2, [r2, #0]
 8003f48:	f800 2033 	strb.w	r2, [r0, r3, lsl #3]
		u32CanRxMsgLoopCounter++;
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	4a08      	ldr	r2, [pc, #32]	; (8003f70 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8003f50:	6053      	str	r3, [r2, #4]
	}

	
	if(u32CanRxMsgLoopCounter >= CAN_BUFFER_LENGTH)
 8003f52:	4b07      	ldr	r3, [pc, #28]	; (8003f70 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2bc7      	cmp	r3, #199	; 0xc7
 8003f58:	d902      	bls.n	8003f60 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
		u32CanRxMsgLoopCounter = 0;
 8003f5a:	4b05      	ldr	r3, [pc, #20]	; (8003f70 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	605a      	str	r2, [r3, #4]

}
 8003f60:	bd10      	pop	{r4, pc}
 8003f62:	bf00      	nop
 8003f64:	48000400 	.word	0x48000400
 8003f68:	20004b9c 	.word	0x20004b9c
 8003f6c:	20004bc4 	.word	0x20004bc4
 8003f70:	200023a8 	.word	0x200023a8
 8003f74:	200015f8 	.word	0x200015f8
 8003f78:	20004540 	.word	0x20004540

08003f7c <HAL_CAN_ErrorCallback>:
 Change History:
 Author            	Date                Remarks
 KloudQ Team        20/04/21			initial code
******************************************************************************/
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003f7c:	b508      	push	{r3, lr}
	canTestVariable = hcan->ErrorCode;
 8003f7e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003f80:	4b04      	ldr	r3, [pc, #16]	; (8003f94 <HAL_CAN_ErrorCallback+0x18>)
 8003f82:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	HAL_CAN_DeInit(&hcan1);
 8003f86:	4804      	ldr	r0, [pc, #16]	; (8003f98 <HAL_CAN_ErrorCallback+0x1c>)
 8003f88:	f000 ffb4 	bl	8004ef4 <HAL_CAN_DeInit>
	canFilterConfig();
 8003f8c:	f7ff febc 	bl	8003d08 <canFilterConfig>
}
 8003f90:	bd08      	pop	{r3, pc}
 8003f92:	bf00      	nop
 8003f94:	200023a8 	.word	0x200023a8
 8003f98:	200030d8 	.word	0x200030d8

08003f9c <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{

}
 8003f9c:	4770      	bx	lr
	...

08003fa0 <isCommandIdConfigured>:
uint32_t isCommandIdConfigured(uint32_t canId)
{
	static uint32_t LoopCounter = 0;
	static uint32_t u32PositioninConfigArray = 0;

	if(LoopCounter == 0)
 8003fa0:	4b18      	ldr	r3, [pc, #96]	; (8004004 <isCommandIdConfigured+0x64>)
 8003fa2:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 8003fa6:	b933      	cbnz	r3, 8003fb6 <isCommandIdConfigured+0x16>
	{
		u32IdSearchFlag = 1;
 8003fa8:	4a16      	ldr	r2, [pc, #88]	; (8004004 <isCommandIdConfigured+0x64>)
 8003faa:	2101      	movs	r1, #1
 8003fac:	f8c2 1330 	str.w	r1, [r2, #816]	; 0x330
		u32PositioninConfigArray = 0;
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	f8c2 1334 	str.w	r1, [r2, #820]	; 0x334
	}

	if(u32IdSearchFlag == 1)
 8003fb6:	4a13      	ldr	r2, [pc, #76]	; (8004004 <isCommandIdConfigured+0x64>)
 8003fb8:	f8d2 2330 	ldr.w	r2, [r2, #816]	; 0x330
 8003fbc:	2a01      	cmp	r2, #1
 8003fbe:	d003      	beq.n	8003fc8 <isCommandIdConfigured+0x28>
				u32IdSearchFlag = 2;
			}
		}
	}
	return u32PositioninConfigArray;
}
 8003fc0:	4b10      	ldr	r3, [pc, #64]	; (8004004 <isCommandIdConfigured+0x64>)
 8003fc2:	f8d3 0334 	ldr.w	r0, [r3, #820]	; 0x334
 8003fc6:	4770      	bx	lr
		if(gu32CanConfigurationArray[LoopCounter] == canId)
 8003fc8:	4a0f      	ldr	r2, [pc, #60]	; (8004008 <isCommandIdConfigured+0x68>)
 8003fca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003fce:	4282      	cmp	r2, r0
 8003fd0:	d00d      	beq.n	8003fee <isCommandIdConfigured+0x4e>
			LoopCounter++;
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	4a0b      	ldr	r2, [pc, #44]	; (8004004 <isCommandIdConfigured+0x64>)
 8003fd6:	f8c2 332c 	str.w	r3, [r2, #812]	; 0x32c
			if (LoopCounter == MAX_CAN_IDS_SUPPORTED)
 8003fda:	2b32      	cmp	r3, #50	; 0x32
 8003fdc:	d1f0      	bne.n	8003fc0 <isCommandIdConfigured+0x20>
				LoopCounter = 0;
 8003fde:	4613      	mov	r3, r2
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c
				u32IdSearchFlag = 2;
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
 8003fec:	e7e8      	b.n	8003fc0 <isCommandIdConfigured+0x20>
			u32PositioninConfigArray = LoopCounter;
 8003fee:	4a05      	ldr	r2, [pc, #20]	; (8004004 <isCommandIdConfigured+0x64>)
 8003ff0:	f8c2 3334 	str.w	r3, [r2, #820]	; 0x334
			u32IdSearchFlag = 2;
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	f8c2 3330 	str.w	r3, [r2, #816]	; 0x330
			LoopCounter = 0;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	f8c2 332c 	str.w	r3, [r2, #812]	; 0x32c
 8004000:	e7de      	b.n	8003fc0 <isCommandIdConfigured+0x20>
 8004002:	bf00      	nop
 8004004:	200023a8 	.word	0x200023a8
 8004008:	200015f8 	.word	0x200015f8

0800400c <parseCanMessageQueue>:
 KTL				27-5-2020			Convert to Array Logic . Tested
******************************************************************************/
uint32_t temp = 0;
uint32_t gu32CanIdParserCounter = 0;
void parseCanMessageQueue(void)
{
 800400c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	static uint32_t u32CanMsgID = 0;
	static uint32_t u32ParserState = 0;
	static uint32_t u32IdStatus = 0;

	if(u32CanIdsReceived[gu32CanIdParserCounter] != 0)
 8004010:	4b4b      	ldr	r3, [pc, #300]	; (8004140 <parseCanMessageQueue+0x134>)
 8004012:	f8d3 2338 	ldr.w	r2, [r3, #824]	; 0x338
 8004016:	4b4b      	ldr	r3, [pc, #300]	; (8004144 <parseCanMessageQueue+0x138>)
 8004018:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800401c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004020:	2b00      	cmp	r3, #0
 8004022:	d07e      	beq.n	8004122 <parseCanMessageQueue+0x116>
	{
		if(u32ParserState == 0)
 8004024:	4946      	ldr	r1, [pc, #280]	; (8004140 <parseCanMessageQueue+0x134>)
 8004026:	f8d1 133c 	ldr.w	r1, [r1, #828]	; 0x33c
 800402a:	b931      	cbnz	r1, 800403a <parseCanMessageQueue+0x2e>
		{
			/* Message Available. Parse The Message */
			u32CanMsgID = u32CanIdsReceived[gu32CanIdParserCounter];
 800402c:	4a44      	ldr	r2, [pc, #272]	; (8004140 <parseCanMessageQueue+0x134>)
 800402e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
			u32ParserState = 1;
 8004032:	2301      	movs	r3, #1
 8004034:	f8c2 333c 	str.w	r3, [r2, #828]	; 0x33c
 8004038:	e077      	b.n	800412a <parseCanMessageQueue+0x11e>
		}
		else if(u32ParserState == 1)
 800403a:	2901      	cmp	r1, #1
 800403c:	d175      	bne.n	800412a <parseCanMessageQueue+0x11e>
		{
			/* In Process */
			if(u32IdSearchFlag == 2)
 800403e:	4b40      	ldr	r3, [pc, #256]	; (8004140 <parseCanMessageQueue+0x134>)
 8004040:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 8004044:	2b02      	cmp	r3, #2
 8004046:	d164      	bne.n	8004112 <parseCanMessageQueue+0x106>
			{
				/* Search Process Completed */
				if(u32IdStatus != 0)
 8004048:	4b3d      	ldr	r3, [pc, #244]	; (8004140 <parseCanMessageQueue+0x134>)
 800404a:	f8d3 0344 	ldr.w	r0, [r3, #836]	; 0x344
 800404e:	2800      	cmp	r0, #0
 8004050:	d04c      	beq.n	80040ec <parseCanMessageQueue+0xe0>
				{

					gu64CanMessageArray[u32IdStatus] =  ((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte7 << 56)|
 8004052:	4b3d      	ldr	r3, [pc, #244]	; (8004148 <parseCanMessageQueue+0x13c>)
 8004054:	f813 6032 	ldrb.w	r6, [r3, r2, lsl #3]
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte6 << 48)|
 8004058:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800405c:	785c      	ldrb	r4, [r3, #1]
 800405e:	0421      	lsls	r1, r4, #16
					gu64CanMessageArray[u32IdStatus] =  ((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte7 << 56)|
 8004060:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte5 << 40)|
 8004064:	789c      	ldrb	r4, [r3, #2]
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte6 << 48)|
 8004066:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte4 << 32)|
 800406a:	78de      	ldrb	r6, [r3, #3]
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte3 << 24)|
 800406c:	f893 8004 	ldrb.w	r8, [r3, #4]
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte2 << 16)|
 8004070:	795c      	ldrb	r4, [r3, #5]
 8004072:	0424      	lsls	r4, r4, #16
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte3 << 24)|
 8004074:	ea44 6808 	orr.w	r8, r4, r8, lsl #24
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte1 << 8) |
 8004078:	f893 a006 	ldrb.w	sl, [r3, #6]
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte2 << 16)|
 800407c:	ea48 280a 	orr.w	r8, r8, sl, lsl #8
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte0);
 8004080:	f893 a007 	ldrb.w	sl, [r3, #7]
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte1 << 8) |
 8004084:	ea48 040a 	orr.w	r4, r8, sl
 8004088:	ea41 0506 	orr.w	r5, r1, r6
					gu64CanMessageArray[u32IdStatus] =  ((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte7 << 56)|
 800408c:	4b2c      	ldr	r3, [pc, #176]	; (8004140 <parseCanMessageQueue+0x134>)
 800408e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8004092:	e9c3 45d2 	strd	r4, r5, [r3, #840]	; 0x348
					if(gu64CanMessageArray[u32IdStatus] == 0)
 8004096:	ea54 0305 	orrs.w	r3, r4, r5
 800409a:	d106      	bne.n	80040aa <parseCanMessageQueue+0x9e>
					{
						gu64CanMessageArray[u32IdStatus] = 0;
 800409c:	4b28      	ldr	r3, [pc, #160]	; (8004140 <parseCanMessageQueue+0x134>)
 800409e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80040a2:	2400      	movs	r4, #0
 80040a4:	2500      	movs	r5, #0
 80040a6:	e9c0 45d2 	strd	r4, r5, [r0, #840]	; 0x348
					}

					// Reset Array Value for new Message
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte7 = 0;
 80040aa:	4927      	ldr	r1, [pc, #156]	; (8004148 <parseCanMessageQueue+0x13c>)
 80040ac:	2300      	movs	r3, #0
 80040ae:	f801 3032 	strb.w	r3, [r1, r2, lsl #3]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte6 = 0;
 80040b2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80040b6:	704b      	strb	r3, [r1, #1]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte5 = 0;
 80040b8:	708b      	strb	r3, [r1, #2]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte4 = 0;
 80040ba:	70cb      	strb	r3, [r1, #3]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte3 = 0;
 80040bc:	710b      	strb	r3, [r1, #4]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte2 = 0;
 80040be:	714b      	strb	r3, [r1, #5]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte1 = 0;
 80040c0:	718b      	strb	r3, [r1, #6]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte0 = 0;
 80040c2:	71cb      	strb	r3, [r1, #7]
					u32CanIdsReceived[gu32CanIdParserCounter] = 0;
 80040c4:	491f      	ldr	r1, [pc, #124]	; (8004144 <parseCanMessageQueue+0x138>)
 80040c6:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80040ca:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
					u32IdStatus = 0;
 80040ce:	491c      	ldr	r1, [pc, #112]	; (8004140 <parseCanMessageQueue+0x134>)
 80040d0:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte2 = 0;
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte1 = 0;
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte0 = 0;
					u32CanIdsReceived[gu32CanIdParserCounter] = 0;
				}
				u32IdSearchFlag = 0;
 80040d4:	4b1a      	ldr	r3, [pc, #104]	; (8004140 <parseCanMessageQueue+0x134>)
 80040d6:	2100      	movs	r1, #0
 80040d8:	f8c3 1330 	str.w	r1, [r3, #816]	; 0x330
				u32ParserState = 0;
 80040dc:	f8c3 133c 	str.w	r1, [r3, #828]	; 0x33c
				u32CanMsgID = 0;
 80040e0:	f8c3 1340 	str.w	r1, [r3, #832]	; 0x340
				gu32CanIdParserCounter++;
 80040e4:	3201      	adds	r2, #1
 80040e6:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
 80040ea:	e01e      	b.n	800412a <parseCanMessageQueue+0x11e>
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte7 = 0;
 80040ec:	4b16      	ldr	r3, [pc, #88]	; (8004148 <parseCanMessageQueue+0x13c>)
 80040ee:	2100      	movs	r1, #0
 80040f0:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte6 = 0;
 80040f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80040f8:	7059      	strb	r1, [r3, #1]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte5 = 0;
 80040fa:	7099      	strb	r1, [r3, #2]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte4 = 0;
 80040fc:	70d9      	strb	r1, [r3, #3]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte3 = 0;
 80040fe:	7119      	strb	r1, [r3, #4]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte2 = 0;
 8004100:	7159      	strb	r1, [r3, #5]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte1 = 0;
 8004102:	7199      	strb	r1, [r3, #6]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte0 = 0;
 8004104:	71d9      	strb	r1, [r3, #7]
					u32CanIdsReceived[gu32CanIdParserCounter] = 0;
 8004106:	4b0f      	ldr	r3, [pc, #60]	; (8004144 <parseCanMessageQueue+0x138>)
 8004108:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800410c:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
 8004110:	e7e0      	b.n	80040d4 <parseCanMessageQueue+0xc8>
			}
			else
				u32IdStatus = isCommandIdConfigured(u32CanMsgID);
 8004112:	4c0b      	ldr	r4, [pc, #44]	; (8004140 <parseCanMessageQueue+0x134>)
 8004114:	f8d4 0340 	ldr.w	r0, [r4, #832]	; 0x340
 8004118:	f7ff ff42 	bl	8003fa0 <isCommandIdConfigured>
 800411c:	f8c4 0344 	str.w	r0, [r4, #836]	; 0x344
 8004120:	e003      	b.n	800412a <parseCanMessageQueue+0x11e>
		}
	}
	else
	{
		gu32CanIdParserCounter++;
 8004122:	3201      	adds	r2, #1
 8004124:	4b06      	ldr	r3, [pc, #24]	; (8004140 <parseCanMessageQueue+0x134>)
 8004126:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
	}
	if(gu32CanIdParserCounter >= CAN_BUFFER_LENGTH)
 800412a:	4b05      	ldr	r3, [pc, #20]	; (8004140 <parseCanMessageQueue+0x134>)
 800412c:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8004130:	2bc7      	cmp	r3, #199	; 0xc7
 8004132:	d903      	bls.n	800413c <parseCanMessageQueue+0x130>
		gu32CanIdParserCounter = 0;
 8004134:	4b02      	ldr	r3, [pc, #8]	; (8004140 <parseCanMessageQueue+0x134>)
 8004136:	2200      	movs	r2, #0
 8004138:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
}
 800413c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004140:	200023a8 	.word	0x200023a8
 8004144:	200015f8 	.word	0x200015f8
 8004148:	20004540 	.word	0x20004540

0800414c <HAL_I2C_ErrorCallback>:
 Change History:
 Author           	Date                Remarks
 System Generated   11-04-18
******************************************************************************/
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800414c:	b508      	push	{r3, lr}
	assertError(enmTORERRORS_MEM_I2C,enmERRORSTATE_ACTIVE);
 800414e:	2101      	movs	r1, #1
 8004150:	2008      	movs	r0, #8
 8004152:	f7fc fd3d 	bl	8000bd0 <assertError>
}
 8004156:	bd08      	pop	{r3, pc}

08004158 <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{
 8004158:	b508      	push	{r3, lr}
  HAL_FLASH_Unlock();
 800415a:	f001 fb03 	bl	8005764 <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800415e:	4b04      	ldr	r3, [pc, #16]	; (8004170 <FLASH_If_Init+0x18>)
 8004160:	699a      	ldr	r2, [r3, #24]
 8004162:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8004166:	619a      	str	r2, [r3, #24]
 8004168:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 800416c:	611a      	str	r2, [r3, #16]
}
 800416e:	bd08      	pop	{r3, pc}
 8004170:	40022000 	.word	0x40022000

08004174 <FLASH_If_Write>:
  * @retval 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(uint64_t* Data ,uint32_t DataSize,enmBootMemorySegment BootMemoryRegion, uint32_t writeCycle)
{
 8004174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004178:	4680      	mov	r8, r0

   uint32_t sofar=0,numofwords = 0;

  numofwords = ((DataSize/8)+((DataSize%8)!=0));
 800417a:	f011 0507 	ands.w	r5, r1, #7
 800417e:	bf18      	it	ne
 8004180:	2501      	movne	r5, #1
 8004182:	eb05 05d1 	add.w	r5, r5, r1, lsr #3

  if(BootMemoryRegion == enmBOOTSEGMENT_X_JUMP )
 8004186:	2a02      	cmp	r2, #2
 8004188:	d00a      	beq.n	80041a0 <FLASH_If_Write+0x2c>
	  	  HAL_FLASH_Lock();
	  	 u32LastMemoryWriteLocation = u32MemoryDestination;
		  return (FLASHIF_OK);
	}//end of if(BootMemoryRegion == enmBOOTSEGMENT_X_JUMP )

  else if(BootMemoryRegion == enmBOOTSEGMENT_Y_JUMP )
 800418a:	2a03      	cmp	r2, #3
 800418c:	d173      	bne.n	8004276 <FLASH_If_Write+0x102>
    {
  	  if(writeCycle == 1)
 800418e:	2b01      	cmp	r3, #1
 8004190:	d043      	beq.n	800421a <FLASH_If_Write+0xa6>
  	  		  u32MemoryDestination = FLASH_Y_START_ADDR;
  	  else
  		  u32MemoryDestination = u32LastMemoryWriteLocation;
 8004192:	4b3b      	ldr	r3, [pc, #236]	; (8004280 <FLASH_If_Write+0x10c>)
 8004194:	691a      	ldr	r2, [r3, #16]
 8004196:	60da      	str	r2, [r3, #12]

  	  /* Unlock the Flash to enable the flash control register access *************/
  	  FLASH_If_Init();
 8004198:	f7ff ffde 	bl	8004158 <FLASH_If_Init>
   uint32_t sofar=0,numofwords = 0;
 800419c:	2400      	movs	r4, #0

  	 /* Program the user Flash area word by word
  	  (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/
  	  while (sofar<numofwords)
 800419e:	e044      	b.n	800422a <FLASH_If_Write+0xb6>
	  if(writeCycle == 1)
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d006      	beq.n	80041b2 <FLASH_If_Write+0x3e>
		  u32MemoryDestination = u32LastMemoryWriteLocation;
 80041a4:	4b36      	ldr	r3, [pc, #216]	; (8004280 <FLASH_If_Write+0x10c>)
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	60da      	str	r2, [r3, #12]
	  FLASH_If_Init();
 80041aa:	f7ff ffd5 	bl	8004158 <FLASH_If_Init>
   uint32_t sofar=0,numofwords = 0;
 80041ae:	2400      	movs	r4, #0
	  while (sofar<numofwords)
 80041b0:	e008      	b.n	80041c4 <FLASH_If_Write+0x50>
	  		  u32MemoryDestination = FLASH_X_START_ADDR;
 80041b2:	4b33      	ldr	r3, [pc, #204]	; (8004280 <FLASH_If_Write+0x10c>)
 80041b4:	f04f 2208 	mov.w	r2, #134219776	; 0x8000800
 80041b8:	60da      	str	r2, [r3, #12]
 80041ba:	e7f6      	b.n	80041aa <FLASH_If_Write+0x36>
			  u32MemoryDestination += 8;  // use StartPageAddress += 2 for half word and 8 for double word
 80041bc:	3108      	adds	r1, #8
 80041be:	4b30      	ldr	r3, [pc, #192]	; (8004280 <FLASH_If_Write+0x10c>)
 80041c0:	60d9      	str	r1, [r3, #12]
			  sofar++;
 80041c2:	3401      	adds	r4, #1
	  while (sofar<numofwords)
 80041c4:	42ac      	cmp	r4, r5
 80041c6:	d221      	bcs.n	800420c <FLASH_If_Write+0x98>
		  if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, u32MemoryDestination,*(uint64_t*)(Data+sofar)) == HAL_OK)
 80041c8:	eb08 06c4 	add.w	r6, r8, r4, lsl #3
 80041cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80041d0:	492b      	ldr	r1, [pc, #172]	; (8004280 <FLASH_If_Write+0x10c>)
 80041d2:	68c9      	ldr	r1, [r1, #12]
 80041d4:	2000      	movs	r0, #0
 80041d6:	f001 fb1b 	bl	8005810 <HAL_FLASH_Program>
 80041da:	b980      	cbnz	r0, 80041fe <FLASH_If_Write+0x8a>
			  if (*(uint64_t*)u32MemoryDestination != *(uint64_t*)(Data+sofar))
 80041dc:	4b28      	ldr	r3, [pc, #160]	; (8004280 <FLASH_If_Write+0x10c>)
 80041de:	68d9      	ldr	r1, [r3, #12]
 80041e0:	e9d1 2300 	ldrd	r2, r3, [r1]
 80041e4:	e9d6 6700 	ldrd	r6, r7, [r6]
 80041e8:	42bb      	cmp	r3, r7
 80041ea:	bf08      	it	eq
 80041ec:	42b2      	cmpeq	r2, r6
 80041ee:	d0e5      	beq.n	80041bc <FLASH_If_Write+0x48>
				  HAL_FLASH_Lock();
 80041f0:	f001 fad0 	bl	8005794 <HAL_FLASH_Lock>
				  Diagnostic(enmDiagnostic_MEM_WR_CHK_SUM_ERROR);
 80041f4:	200b      	movs	r0, #11
 80041f6:	f7fd fa43 	bl	8001680 <Diagnostic>
				  return(FLASHIF_WRITEVERIFY_ERROR);
 80041fa:	2005      	movs	r0, #5
 80041fc:	e039      	b.n	8004272 <FLASH_If_Write+0xfe>
			  HAL_FLASH_Lock();
 80041fe:	f001 fac9 	bl	8005794 <HAL_FLASH_Lock>
			  Diagnostic(enmDiagnostic_MEM_WR_ERROR);
 8004202:	200a      	movs	r0, #10
 8004204:	f7fd fa3c 	bl	8001680 <Diagnostic>
			  return (FLASHIF_WRITING_ERROR);
 8004208:	2004      	movs	r0, #4
 800420a:	e032      	b.n	8004272 <FLASH_If_Write+0xfe>
	  	  HAL_FLASH_Lock();
 800420c:	f001 fac2 	bl	8005794 <HAL_FLASH_Lock>
	  	 u32LastMemoryWriteLocation = u32MemoryDestination;
 8004210:	4b1b      	ldr	r3, [pc, #108]	; (8004280 <FLASH_If_Write+0x10c>)
 8004212:	68da      	ldr	r2, [r3, #12]
 8004214:	611a      	str	r2, [r3, #16]
		  return (FLASHIF_OK);
 8004216:	2000      	movs	r0, #0
 8004218:	e02b      	b.n	8004272 <FLASH_If_Write+0xfe>
  	  		  u32MemoryDestination = FLASH_Y_START_ADDR;
 800421a:	4b19      	ldr	r3, [pc, #100]	; (8004280 <FLASH_If_Write+0x10c>)
 800421c:	4a19      	ldr	r2, [pc, #100]	; (8004284 <FLASH_If_Write+0x110>)
 800421e:	60da      	str	r2, [r3, #12]
 8004220:	e7ba      	b.n	8004198 <FLASH_If_Write+0x24>
  				  HAL_FLASH_Lock();
  				  /* Flash content doesn't match SRAM content */
  				  return(FLASHIF_WRITEVERIFY_ERROR);

  			  }
  			  u32MemoryDestination += 8;  // use StartPageAddress += 2 for half word and 8 for double word
 8004222:	3308      	adds	r3, #8
 8004224:	4a16      	ldr	r2, [pc, #88]	; (8004280 <FLASH_If_Write+0x10c>)
 8004226:	60d3      	str	r3, [r2, #12]
  			  sofar++;
 8004228:	3401      	adds	r4, #1
  	  while (sofar<numofwords)
 800422a:	42ac      	cmp	r4, r5
 800422c:	d21b      	bcs.n	8004266 <FLASH_If_Write+0xf2>
  		  if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, u32MemoryDestination,*(uint64_t*)(Data+sofar)) == HAL_OK)
 800422e:	eb08 09c4 	add.w	r9, r8, r4, lsl #3
 8004232:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004236:	4912      	ldr	r1, [pc, #72]	; (8004280 <FLASH_If_Write+0x10c>)
 8004238:	68c9      	ldr	r1, [r1, #12]
 800423a:	2000      	movs	r0, #0
 800423c:	f001 fae8 	bl	8005810 <HAL_FLASH_Program>
 8004240:	b968      	cbnz	r0, 800425e <FLASH_If_Write+0xea>
  			  if (*(uint64_t*)u32MemoryDestination != *(uint64_t*)(Data+sofar))
 8004242:	4b0f      	ldr	r3, [pc, #60]	; (8004280 <FLASH_If_Write+0x10c>)
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	e9d3 6700 	ldrd	r6, r7, [r3]
 800424a:	e9d9 0100 	ldrd	r0, r1, [r9]
 800424e:	428f      	cmp	r7, r1
 8004250:	bf08      	it	eq
 8004252:	4286      	cmpeq	r6, r0
 8004254:	d0e5      	beq.n	8004222 <FLASH_If_Write+0xae>
  				  HAL_FLASH_Lock();
 8004256:	f001 fa9d 	bl	8005794 <HAL_FLASH_Lock>
  				  return(FLASHIF_WRITEVERIFY_ERROR);
 800425a:	2005      	movs	r0, #5
 800425c:	e009      	b.n	8004272 <FLASH_If_Write+0xfe>
  		  else
  		  {
  			  /* Error occurred while writing data in Flash memory*/
  			  /* Lock the Flash to disable the flash control register access (recommended
  				      to protect the FLASH memory against possible unwanted operation) *********/
  			  HAL_FLASH_Lock();
 800425e:	f001 fa99 	bl	8005794 <HAL_FLASH_Lock>
  			  return (FLASHIF_WRITING_ERROR);
 8004262:	2004      	movs	r0, #4
 8004264:	e005      	b.n	8004272 <FLASH_If_Write+0xfe>
  		  }
  		}//end of while (sofar<numofwords)
  		  /* Lock the Flash to disable the flash control register access (recommended
  		  	      to protect the FLASH memory against possible unwanted operation) *********/
  	  	  HAL_FLASH_Lock();
 8004266:	f001 fa95 	bl	8005794 <HAL_FLASH_Lock>
  	  	 u32LastMemoryWriteLocation = u32MemoryDestination;
 800426a:	4b05      	ldr	r3, [pc, #20]	; (8004280 <FLASH_If_Write+0x10c>)
 800426c:	68da      	ldr	r2, [r3, #12]
 800426e:	611a      	str	r2, [r3, #16]
  		  return (FLASHIF_OK);
 8004270:	2000      	movs	r0, #0
	  HAL_FLASH_Lock();
	  return (FLASHIF_WRITING_ERROR);
  }


}
 8004272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	  HAL_FLASH_Lock();
 8004276:	f001 fa8d 	bl	8005794 <HAL_FLASH_Lock>
	  return (FLASHIF_WRITING_ERROR);
 800427a:	2004      	movs	r0, #4
 800427c:	e7f9      	b.n	8004272 <FLASH_If_Write+0xfe>
 800427e:	bf00      	nop
 8004280:	20002efc 	.word	0x20002efc
 8004284:	08010800 	.word	0x08010800

08004288 <GetPage>:

uint32_t GetPage(uint32_t Addr)
{
  uint32_t page = 0;

  page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 8004288:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
  return page;
}
 800428c:	0ac0      	lsrs	r0, r0, #11
 800428e:	4770      	bx	lr

08004290 <FLASH_If_Erase>:

uint32_t  FLASH_If_Erase(uint32_t state, enmBootMemorySegment BootMemoryRegion)
{
 8004290:	b530      	push	{r4, r5, lr}
 8004292:	b083      	sub	sp, #12
	uint32_t FirstPage = 0,EndPage = 0, NbOfPages = 0,PAGEError = 0;
 8004294:	2300      	movs	r3, #0
 8004296:	9301      	str	r3, [sp, #4]
	static FLASH_EraseInitTypeDef EraseInitStruct;

	if(BootMemoryRegion == enmBOOTSEGMENT_X_JUMP )
 8004298:	2902      	cmp	r1, #2
 800429a:	d01d      	beq.n	80042d8 <FLASH_If_Erase+0x48>
			HAL_FLASH_Lock();
			return (FLASHIF_ERASE_OK);
		}
	}// end of if(BootMemoryRegion == enmBOOTSEGMENT_X_JUMP )

	else if(BootMemoryRegion == enmBOOTSEGMENT_Y_JUMP )
 800429c:	2903      	cmp	r1, #3
 800429e:	d13f      	bne.n	8004320 <FLASH_If_Erase+0x90>
	{
		/* Get the 1st page to erase */
		FirstPage = GetPage(FLASH_Y_START_ADDR);
 80042a0:	4821      	ldr	r0, [pc, #132]	; (8004328 <FLASH_If_Erase+0x98>)
 80042a2:	f7ff fff1 	bl	8004288 <GetPage>
 80042a6:	4605      	mov	r5, r0

		/* Get the last page to erase */
		EndPage = GetPage(FLASH_Y_END_ADDR);
 80042a8:	4820      	ldr	r0, [pc, #128]	; (800432c <FLASH_If_Erase+0x9c>)
 80042aa:	f7ff ffed 	bl	8004288 <GetPage>

		/* Get the number of pages to erase from 1st page */
		NbOfPages = ((EndPage - FirstPage));
 80042ae:	1b40      	subs	r0, r0, r5

		/* Fill EraseInit structure*/
		EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80042b0:	4c1f      	ldr	r4, [pc, #124]	; (8004330 <FLASH_If_Erase+0xa0>)
 80042b2:	2300      	movs	r3, #0
 80042b4:	6163      	str	r3, [r4, #20]
		EraseInitStruct.Banks     = FLASH_BANK_1;
 80042b6:	2301      	movs	r3, #1
 80042b8:	61a3      	str	r3, [r4, #24]
		EraseInitStruct.Page		= FirstPage;
 80042ba:	61e5      	str	r5, [r4, #28]
		EraseInitStruct.NbPages	= NbOfPages;
 80042bc:	6220      	str	r0, [r4, #32]

		/* Unlock the Flash to enable the flash control register access *************/
		FLASH_If_Init();
 80042be:	f7ff ff4b 	bl	8004158 <FLASH_If_Init>

		if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 80042c2:	a901      	add	r1, sp, #4
 80042c4:	f104 0014 	add.w	r0, r4, #20
 80042c8:	f001 fb88 	bl	80059dc <HAL_FLASHEx_Erase>
 80042cc:	bb20      	cbnz	r0, 8004318 <FLASH_If_Erase+0x88>
			HAL_FLASH_Lock();
			return (FLASHIF_ERASE_ERROR);
		}
		else
		{
			HAL_FLASH_Lock();
 80042ce:	f001 fa61 	bl	8005794 <HAL_FLASH_Lock>
			return (FLASHIF_ERASE_OK);
 80042d2:	2001      	movs	r0, #1
	else
	{
		HAL_FLASH_Lock();
		return (FLASHIF_ERASE_ERROR);
	}
}//end of uint32_t  FLASH_If_Erase(uint32_t state, enmBootMemorySegment BootMemoryRegion)
 80042d4:	b003      	add	sp, #12
 80042d6:	bd30      	pop	{r4, r5, pc}
		FirstPage = GetPage(FLASH_X_START_ADDR);
 80042d8:	f04f 2008 	mov.w	r0, #134219776	; 0x8000800
 80042dc:	f7ff ffd4 	bl	8004288 <GetPage>
 80042e0:	4605      	mov	r5, r0
		EndPage = GetPage(FLASH_X_END_ADDR);
 80042e2:	4814      	ldr	r0, [pc, #80]	; (8004334 <FLASH_If_Erase+0xa4>)
 80042e4:	f7ff ffd0 	bl	8004288 <GetPage>
		NbOfPages = ((EndPage - FirstPage));
 80042e8:	1b40      	subs	r0, r0, r5
		EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80042ea:	4c11      	ldr	r4, [pc, #68]	; (8004330 <FLASH_If_Erase+0xa0>)
 80042ec:	2300      	movs	r3, #0
 80042ee:	6163      	str	r3, [r4, #20]
		EraseInitStruct.Banks     = FLASH_BANK_1;
 80042f0:	2301      	movs	r3, #1
 80042f2:	61a3      	str	r3, [r4, #24]
		EraseInitStruct.Page		= FirstPage;
 80042f4:	61e5      	str	r5, [r4, #28]
		EraseInitStruct.NbPages	= NbOfPages;
 80042f6:	6220      	str	r0, [r4, #32]
		FLASH_If_Init();
 80042f8:	f7ff ff2e 	bl	8004158 <FLASH_If_Init>
		if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 80042fc:	a901      	add	r1, sp, #4
 80042fe:	f104 0014 	add.w	r0, r4, #20
 8004302:	f001 fb6b 	bl	80059dc <HAL_FLASHEx_Erase>
 8004306:	b918      	cbnz	r0, 8004310 <FLASH_If_Erase+0x80>
			HAL_FLASH_Lock();
 8004308:	f001 fa44 	bl	8005794 <HAL_FLASH_Lock>
			return (FLASHIF_ERASE_OK);
 800430c:	2001      	movs	r0, #1
 800430e:	e7e1      	b.n	80042d4 <FLASH_If_Erase+0x44>
			HAL_FLASH_Lock();
 8004310:	f001 fa40 	bl	8005794 <HAL_FLASH_Lock>
			return (FLASHIF_ERASE_ERROR);
 8004314:	2002      	movs	r0, #2
 8004316:	e7dd      	b.n	80042d4 <FLASH_If_Erase+0x44>
			HAL_FLASH_Lock();
 8004318:	f001 fa3c 	bl	8005794 <HAL_FLASH_Lock>
			return (FLASHIF_ERASE_ERROR);
 800431c:	2002      	movs	r0, #2
 800431e:	e7d9      	b.n	80042d4 <FLASH_If_Erase+0x44>
		HAL_FLASH_Lock();
 8004320:	f001 fa38 	bl	8005794 <HAL_FLASH_Lock>
		return (FLASHIF_ERASE_ERROR);
 8004324:	2002      	movs	r0, #2
 8004326:	e7d5      	b.n	80042d4 <FLASH_If_Erase+0x44>
 8004328:	08010800 	.word	0x08010800
 800432c:	0801f000 	.word	0x0801f000
 8004330:	20002efc 	.word	0x20002efc
 8004334:	0800f000 	.word	0x0800f000

08004338 <getNewFirmwareStorageLocation>:
 Author            	Date                Remarks
 KloudQ Team        30/03/2020			initial Definitions
******************************************************************************/
enmBootMemorySegment getNewFirmwareStorageLocation(void)
{
	if((BOOTMEMORYINFO == BOOT_MEM_X_JUMP) || (BOOTMEMORYINFO == -1))//(BOOTMEMORYINFO == BOOT_MEM_X))
 8004338:	4b0a      	ldr	r3, [pc, #40]	; (8004364 <getNewFirmwareStorageLocation+0x2c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b58      	cmp	r3, #88	; 0x58
 800433e:	d00a      	beq.n	8004356 <getNewFirmwareStorageLocation+0x1e>
 8004340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004344:	d009      	beq.n	800435a <getNewFirmwareStorageLocation+0x22>
		/* Current Firmware Location is in X-Memory Region .
		   Store New FW in Y Memory Region */
		return enmBOOTSEGMENT_Y_JUMP;

	}
	else if((BOOTMEMORYINFO == BOOT_MEM_Y_JUMP) || (BOOTMEMORYINFO == BOOT_MEM_Y))
 8004346:	2b59      	cmp	r3, #89	; 0x59
 8004348:	d009      	beq.n	800435e <getNewFirmwareStorageLocation+0x26>
 800434a:	2b7f      	cmp	r3, #127	; 0x7f
 800434c:	d001      	beq.n	8004352 <getNewFirmwareStorageLocation+0x1a>
		return enmBOOTSEGMENT_X_JUMP;
	}
	else
	{
		/* Illegal Firmware Informations . Abort FOTA Jumping */
		return enmBOOTSEGMENT_UNKNOWN;
 800434e:	2004      	movs	r0, #4
	}
}
 8004350:	4770      	bx	lr
		return enmBOOTSEGMENT_X_JUMP;
 8004352:	2002      	movs	r0, #2
 8004354:	4770      	bx	lr
		return enmBOOTSEGMENT_Y_JUMP;
 8004356:	2003      	movs	r0, #3
 8004358:	4770      	bx	lr
 800435a:	2003      	movs	r0, #3
 800435c:	4770      	bx	lr
		return enmBOOTSEGMENT_X_JUMP;
 800435e:	2002      	movs	r0, #2
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	0801f800 	.word	0x0801f800

08004368 <WriteDatatoFlash>:
{
 8004368:	b570      	push	{r4, r5, r6, lr}
 800436a:	4604      	mov	r4, r0
 800436c:	460d      	mov	r5, r1
	u32FotaChunckLength = gsmInstance.u32FotaFileSizeBytes;
 800436e:	4b07      	ldr	r3, [pc, #28]	; (800438c <WriteDatatoFlash+0x24>)
 8004370:	f8d3 6e30 	ldr.w	r6, [r3, #3632]	; 0xe30
 8004374:	4b06      	ldr	r3, [pc, #24]	; (8004390 <WriteDatatoFlash+0x28>)
 8004376:	601e      	str	r6, [r3, #0]
	if(FLASH_If_Write((uint64_t *)data,u32FotaChunckLength,getNewFirmwareStorageLocation(),writeCycle) == FLASHIF_OK)
 8004378:	f7ff ffde 	bl	8004338 <getNewFirmwareStorageLocation>
 800437c:	4602      	mov	r2, r0
 800437e:	462b      	mov	r3, r5
 8004380:	4631      	mov	r1, r6
 8004382:	4620      	mov	r0, r4
 8004384:	f7ff fef6 	bl	8004174 <FLASH_If_Write>
}
 8004388:	2001      	movs	r0, #1
 800438a:	bd70      	pop	{r4, r5, r6, pc}
 800438c:	200031d0 	.word	0x200031d0
 8004390:	200021e0 	.word	0x200021e0

08004394 <EraseSinglePage>:
		return 1; /* Memory Write Failed */

}

uint32_t EraseSinglePage(uint32_t EraseAddr)
{
 8004394:	b510      	push	{r4, lr}
 8004396:	b082      	sub	sp, #8
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError = 0;
 8004398:	2300      	movs	r3, #0
 800439a:	9301      	str	r3, [sp, #4]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase	 = FLASH_TYPEERASE_PAGES;
 800439c:	4c0c      	ldr	r4, [pc, #48]	; (80043d0 <EraseSinglePage+0x3c>)
 800439e:	6263      	str	r3, [r4, #36]	; 0x24
	EraseInitStruct.Banks    	 = FLASH_BANK_1;
 80043a0:	2301      	movs	r3, #1
 80043a2:	62a3      	str	r3, [r4, #40]	; 0x28
	EraseInitStruct.Page		 = ((EraseAddr - FLASH_BASE_ADDR) / FLASH_PAGE_SIZE);
 80043a4:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 80043a8:	0ac0      	lsrs	r0, r0, #11
 80043aa:	62e0      	str	r0, [r4, #44]	; 0x2c
	EraseInitStruct.NbPages		 = 1;
 80043ac:	6323      	str	r3, [r4, #48]	; 0x30

	/* Unlock the Flash to enable the flash control register access *************/
	FLASH_If_Init();
 80043ae:	f7ff fed3 	bl	8004158 <FLASH_If_Init>

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 80043b2:	a901      	add	r1, sp, #4
 80043b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80043b8:	f001 fb10 	bl	80059dc <HAL_FLASHEx_Erase>
 80043bc:	b920      	cbnz	r0, 80043c8 <EraseSinglePage+0x34>
		HAL_FLASH_Lock();
		return (FLASHIF_ERASE_ERROR);
	}
	else
	{
		HAL_FLASH_Lock();
 80043be:	f001 f9e9 	bl	8005794 <HAL_FLASH_Lock>
		return (FLASHIF_ERASE_OK);
 80043c2:	2001      	movs	r0, #1
	}
}
 80043c4:	b002      	add	sp, #8
 80043c6:	bd10      	pop	{r4, pc}
		HAL_FLASH_Lock();
 80043c8:	f001 f9e4 	bl	8005794 <HAL_FLASH_Lock>
		return (FLASHIF_ERASE_ERROR);
 80043cc:	2002      	movs	r0, #2
 80043ce:	e7f9      	b.n	80043c4 <EraseSinglePage+0x30>
 80043d0:	20002efc 	.word	0x20002efc

080043d4 <flashWriteBootSection>:
{
 80043d4:	b510      	push	{r4, lr}
	switch(memorySegment)
 80043d6:	2803      	cmp	r0, #3
 80043d8:	d85c      	bhi.n	8004494 <flashWriteBootSection+0xc0>
 80043da:	e8df f000 	tbb	[pc, r0]
 80043de:	3302      	.short	0x3302
 80043e0:	461e      	.short	0x461e
			if(EraseSinglePage(BOOTMEMORYADDRESS)== FLASHIF_ERASE_OK)
 80043e2:	482f      	ldr	r0, [pc, #188]	; (80044a0 <flashWriteBootSection+0xcc>)
 80043e4:	f7ff ffd6 	bl	8004394 <EraseSinglePage>
 80043e8:	2801      	cmp	r0, #1
 80043ea:	d112      	bne.n	8004412 <flashWriteBootSection+0x3e>
				FLASH_If_Init();
 80043ec:	f7ff feb4 	bl	8004158 <FLASH_If_Init>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, BOOTMEMORYADDRESS, BOOT_MEM_X);
 80043f0:	227e      	movs	r2, #126	; 0x7e
 80043f2:	2300      	movs	r3, #0
 80043f4:	492a      	ldr	r1, [pc, #168]	; (80044a0 <flashWriteBootSection+0xcc>)
 80043f6:	2000      	movs	r0, #0
 80043f8:	f001 fa0a 	bl	8005810 <HAL_FLASH_Program>
				u32TempDataBuffer = BOOT_MEM_X;
 80043fc:	247e      	movs	r4, #126	; 0x7e
	HAL_FLASH_Lock();
 80043fe:	f001 f9c9 	bl	8005794 <HAL_FLASH_Lock>
	gu32DataFromMemory= *((uint32_t *) BOOTMEMORYADDRESS);
 8004402:	4b27      	ldr	r3, [pc, #156]	; (80044a0 <flashWriteBootSection+0xcc>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a27      	ldr	r2, [pc, #156]	; (80044a4 <flashWriteBootSection+0xd0>)
 8004408:	6353      	str	r3, [r2, #52]	; 0x34
	if(gu32DataFromMemory == u32TempDataBuffer)
 800440a:	42a3      	cmp	r3, r4
 800440c:	d046      	beq.n	800449c <flashWriteBootSection+0xc8>
		return 1; /* Memory Write Failed */
 800440e:	2001      	movs	r0, #1
}
 8004410:	bd10      	pop	{r4, pc}
				HAL_FLASH_Lock();
 8004412:	f001 f9bf 	bl	8005794 <HAL_FLASH_Lock>
				return 1;/* Memory Write Failed */
 8004416:	2001      	movs	r0, #1
 8004418:	e7fa      	b.n	8004410 <flashWriteBootSection+0x3c>
			if(EraseSinglePage(BOOTMEMORYADDRESS)== FLASHIF_ERASE_OK)
 800441a:	4821      	ldr	r0, [pc, #132]	; (80044a0 <flashWriteBootSection+0xcc>)
 800441c:	f7ff ffba 	bl	8004394 <EraseSinglePage>
 8004420:	2801      	cmp	r0, #1
 8004422:	d10b      	bne.n	800443c <flashWriteBootSection+0x68>
				FLASH_If_Init();
 8004424:	f7ff fe98 	bl	8004158 <FLASH_If_Init>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, BOOTMEMORYADDRESS, BOOT_MEM_X_JUMP);
 8004428:	2258      	movs	r2, #88	; 0x58
 800442a:	2300      	movs	r3, #0
 800442c:	491c      	ldr	r1, [pc, #112]	; (80044a0 <flashWriteBootSection+0xcc>)
 800442e:	2000      	movs	r0, #0
 8004430:	f001 f9ee 	bl	8005810 <HAL_FLASH_Program>
				HAL_FLASH_Lock();
 8004434:	f001 f9ae 	bl	8005794 <HAL_FLASH_Lock>
				u32TempDataBuffer = BOOT_MEM_X_JUMP;
 8004438:	2458      	movs	r4, #88	; 0x58
			break;
 800443a:	e7e0      	b.n	80043fe <flashWriteBootSection+0x2a>
				HAL_FLASH_Lock();
 800443c:	f001 f9aa 	bl	8005794 <HAL_FLASH_Lock>
				return 1;/* Memory Write Failed */
 8004440:	2001      	movs	r0, #1
 8004442:	e7e5      	b.n	8004410 <flashWriteBootSection+0x3c>
			if(EraseSinglePage(BOOTMEMORYADDRESS)== FLASHIF_ERASE_OK)
 8004444:	4816      	ldr	r0, [pc, #88]	; (80044a0 <flashWriteBootSection+0xcc>)
 8004446:	f7ff ffa5 	bl	8004394 <EraseSinglePage>
 800444a:	2801      	cmp	r0, #1
 800444c:	d109      	bne.n	8004462 <flashWriteBootSection+0x8e>
								FLASH_If_Init();
 800444e:	f7ff fe83 	bl	8004158 <FLASH_If_Init>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, BOOTMEMORYADDRESS, BOOT_MEM_Y);
 8004452:	227f      	movs	r2, #127	; 0x7f
 8004454:	2300      	movs	r3, #0
 8004456:	4912      	ldr	r1, [pc, #72]	; (80044a0 <flashWriteBootSection+0xcc>)
 8004458:	2000      	movs	r0, #0
 800445a:	f001 f9d9 	bl	8005810 <HAL_FLASH_Program>
				u32TempDataBuffer = BOOT_MEM_Y;
 800445e:	247f      	movs	r4, #127	; 0x7f
			break;
 8004460:	e7cd      	b.n	80043fe <flashWriteBootSection+0x2a>
				HAL_FLASH_Lock();
 8004462:	f001 f997 	bl	8005794 <HAL_FLASH_Lock>
				return 1;/* Memory Write Failed */
 8004466:	2001      	movs	r0, #1
 8004468:	e7d2      	b.n	8004410 <flashWriteBootSection+0x3c>
			if(EraseSinglePage(BOOTMEMORYADDRESS)== FLASHIF_ERASE_OK)
 800446a:	480d      	ldr	r0, [pc, #52]	; (80044a0 <flashWriteBootSection+0xcc>)
 800446c:	f7ff ff92 	bl	8004394 <EraseSinglePage>
 8004470:	2801      	cmp	r0, #1
 8004472:	d10b      	bne.n	800448c <flashWriteBootSection+0xb8>
				FLASH_If_Init();
 8004474:	f7ff fe70 	bl	8004158 <FLASH_If_Init>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, BOOTMEMORYADDRESS, BOOT_MEM_Y_JUMP);
 8004478:	2259      	movs	r2, #89	; 0x59
 800447a:	2300      	movs	r3, #0
 800447c:	4908      	ldr	r1, [pc, #32]	; (80044a0 <flashWriteBootSection+0xcc>)
 800447e:	2000      	movs	r0, #0
 8004480:	f001 f9c6 	bl	8005810 <HAL_FLASH_Program>
				HAL_FLASH_Lock();
 8004484:	f001 f986 	bl	8005794 <HAL_FLASH_Lock>
				u32TempDataBuffer = BOOT_MEM_Y_JUMP;
 8004488:	2459      	movs	r4, #89	; 0x59
			break;
 800448a:	e7b8      	b.n	80043fe <flashWriteBootSection+0x2a>
				HAL_FLASH_Lock();
 800448c:	f001 f982 	bl	8005794 <HAL_FLASH_Lock>
				return 1;/* Memory Write Failed */
 8004490:	2001      	movs	r0, #1
 8004492:	e7bd      	b.n	8004410 <flashWriteBootSection+0x3c>
			HAL_FLASH_Lock();
 8004494:	f001 f97e 	bl	8005794 <HAL_FLASH_Lock>
	uint32_t u32TempDataBuffer = 0;
 8004498:	2400      	movs	r4, #0
			break;
 800449a:	e7b0      	b.n	80043fe <flashWriteBootSection+0x2a>
		return 0; /* Memory Write Successful */
 800449c:	2000      	movs	r0, #0
 800449e:	e7b7      	b.n	8004410 <flashWriteBootSection+0x3c>
 80044a0:	0801f800 	.word	0x0801f800
 80044a4:	20002efc 	.word	0x20002efc

080044a8 <DecimalToBCD>:
 Author           	Date                Remarks
 KloudQ Team      13-10-2020			100133
******************************************************************************/
uint32_t DecimalToBCD (uint32_t Decimal)
{
   return (((Decimal/10) << 4) | (Decimal % 10));
 80044a8:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <DecimalToBCD+0x18>)
 80044aa:	fba3 2300 	umull	r2, r3, r3, r0
 80044ae:	08db      	lsrs	r3, r3, #3
 80044b0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80044b4:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
}
 80044b8:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	cccccccd 	.word	0xcccccccd

080044c4 <Get_Time_Date>:
//	HAL_RTC_SetTime(&hrtc, &STime1, RTC_FORMAT_BCD);
//	HAL_RTC_SetDate(&hrtc, &SDate1, RTC_FORMAT_BCD);
}

void Get_Time_Date(void)
{
 80044c4:	b538      	push	{r3, r4, r5, lr}
//	RTC_TimeTypeDef gTime = {0};
//	RTC_DateTypeDef gDate = {0};

	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BCD);
 80044c6:	4d07      	ldr	r5, [pc, #28]	; (80044e4 <Get_Time_Date+0x20>)
 80044c8:	4c07      	ldr	r4, [pc, #28]	; (80044e8 <Get_Time_Date+0x24>)
 80044ca:	2201      	movs	r2, #1
 80044cc:	f105 0148 	add.w	r1, r5, #72	; 0x48
 80044d0:	4620      	mov	r0, r4
 80044d2:	f004 f957 	bl	8008784 <HAL_RTC_GetTime>

	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BCD);
 80044d6:	2201      	movs	r2, #1
 80044d8:	f105 015c 	add.w	r1, r5, #92	; 0x5c
 80044dc:	4620      	mov	r0, r4
 80044de:	f004 fa2f 	bl	8008940 <HAL_RTC_GetDate>

//	sprintf((char*)gtime,"%02d:%02d:%02d",gTime.Hours,gTime.Minutes,gTime.Seconds);
//	sprintf((char*)gdate,"%02d-%02d-%02d",gDate.Date,gDate.Month,(2000+(gDate.Year)));

}
 80044e2:	bd38      	pop	{r3, r4, r5, pc}
 80044e4:	20002f34 	.word	0x20002f34
 80044e8:	20004430 	.word	0x20004430

080044ec <HAL_TIM_PeriodElapsedCallback>:
******************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	/*HP Timer Interrupt : 50 us*/

	if(htim->Instance == TIM7)
 80044ec:	6802      	ldr	r2, [r0, #0]
 80044ee:	4b54      	ldr	r3, [pc, #336]	; (8004640 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d000      	beq.n	80044f6 <HAL_TIM_PeriodElapsedCallback+0xa>
		if(gu32FotaRquestFlag == FALSE)
		{
			if(gu32SystemResetTimer)gu32SystemResetTimer--;
		}
	} // End of if(htim->Instance == TIM7)
}
 80044f4:	4770      	bx	lr
		if(gu32I2CMemoryOperationTimeout)gu32I2CMemoryOperationTimeout--;
 80044f6:	4b53      	ldr	r3, [pc, #332]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	b11b      	cbz	r3, 8004504 <HAL_TIM_PeriodElapsedCallback+0x18>
 80044fc:	4a51      	ldr	r2, [pc, #324]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80044fe:	6813      	ldr	r3, [r2, #0]
 8004500:	3b01      	subs	r3, #1
 8004502:	6013      	str	r3, [r2, #0]
		if(gu32GSMCharacterTimeout)gu32GSMCharacterTimeout--;
 8004504:	4b4f      	ldr	r3, [pc, #316]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	b11b      	cbz	r3, 8004512 <HAL_TIM_PeriodElapsedCallback+0x26>
 800450a:	4a4e      	ldr	r2, [pc, #312]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800450c:	6853      	ldr	r3, [r2, #4]
 800450e:	3b01      	subs	r3, #1
 8004510:	6053      	str	r3, [r2, #4]
		if(gsmInstance.u32GSMTimer)gsmInstance.u32GSMTimer--;
 8004512:	4b4d      	ldr	r3, [pc, #308]	; (8004648 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8004514:	f8d3 3e20 	ldr.w	r3, [r3, #3616]	; 0xe20
 8004518:	b12b      	cbz	r3, 8004526 <HAL_TIM_PeriodElapsedCallback+0x3a>
 800451a:	4a4b      	ldr	r2, [pc, #300]	; (8004648 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800451c:	f8d2 3e20 	ldr.w	r3, [r2, #3616]	; 0xe20
 8004520:	3b01      	subs	r3, #1
 8004522:	f8c2 3e20 	str.w	r3, [r2, #3616]	; 0xe20
		if(gsmInstance.u32GSMResponseTimer)gsmInstance.u32GSMResponseTimer--;
 8004526:	4b48      	ldr	r3, [pc, #288]	; (8004648 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8004528:	f8d3 3e34 	ldr.w	r3, [r3, #3636]	; 0xe34
 800452c:	b12b      	cbz	r3, 800453a <HAL_TIM_PeriodElapsedCallback+0x4e>
 800452e:	4a46      	ldr	r2, [pc, #280]	; (8004648 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8004530:	f8d2 3e34 	ldr.w	r3, [r2, #3636]	; 0xe34
 8004534:	3b01      	subs	r3, #1
 8004536:	f8c2 3e34 	str.w	r3, [r2, #3636]	; 0xe34
		if(gsmInstance.u32GSMHeartbeatTimer)gsmInstance.u32GSMHeartbeatTimer--;
 800453a:	4b43      	ldr	r3, [pc, #268]	; (8004648 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800453c:	f8d3 3e2c 	ldr.w	r3, [r3, #3628]	; 0xe2c
 8004540:	b11b      	cbz	r3, 800454a <HAL_TIM_PeriodElapsedCallback+0x5e>
 8004542:	3b01      	subs	r3, #1
 8004544:	4a40      	ldr	r2, [pc, #256]	; (8004648 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8004546:	f8c2 3e2c 	str.w	r3, [r2, #3628]	; 0xe2c
		if(gu32PayloadQueueEnqueue)gu32PayloadQueueEnqueue--;
 800454a:	4b3e      	ldr	r3, [pc, #248]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	b11b      	cbz	r3, 8004558 <HAL_TIM_PeriodElapsedCallback+0x6c>
 8004550:	4a3c      	ldr	r2, [pc, #240]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004552:	6893      	ldr	r3, [r2, #8]
 8004554:	3b01      	subs	r3, #1
 8004556:	6093      	str	r3, [r2, #8]
		if(gu32FotaFileReadTimer)gu32FotaFileReadTimer--;
 8004558:	4b3a      	ldr	r3, [pc, #232]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	b11b      	cbz	r3, 8004566 <HAL_TIM_PeriodElapsedCallback+0x7a>
 800455e:	4a39      	ldr	r2, [pc, #228]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004560:	68d3      	ldr	r3, [r2, #12]
 8004562:	3b01      	subs	r3, #1
 8004564:	60d3      	str	r3, [r2, #12]
		if(gu32GSMHangTimer)gu32GSMHangTimer--;
 8004566:	4b37      	ldr	r3, [pc, #220]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	b11b      	cbz	r3, 8004574 <HAL_TIM_PeriodElapsedCallback+0x88>
 800456c:	4a35      	ldr	r2, [pc, #212]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800456e:	6913      	ldr	r3, [r2, #16]
 8004570:	3b01      	subs	r3, #1
 8004572:	6113      	str	r3, [r2, #16]
		if(gu16GSMCycleTimeout)gu16GSMCycleTimeout--;
 8004574:	4b35      	ldr	r3, [pc, #212]	; (800464c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	b11b      	cbz	r3, 8004582 <HAL_TIM_PeriodElapsedCallback+0x96>
 800457a:	4a34      	ldr	r2, [pc, #208]	; (800464c <HAL_TIM_PeriodElapsedCallback+0x160>)
 800457c:	6813      	ldr	r3, [r2, #0]
 800457e:	3b01      	subs	r3, #1
 8004580:	6013      	str	r3, [r2, #0]
		if(gu8rtcUpdateTimer)gu8rtcUpdateTimer--;
 8004582:	4b30      	ldr	r3, [pc, #192]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	b11b      	cbz	r3, 8004590 <HAL_TIM_PeriodElapsedCallback+0xa4>
 8004588:	4a2e      	ldr	r2, [pc, #184]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800458a:	6953      	ldr	r3, [r2, #20]
 800458c:	3b01      	subs	r3, #1
 800458e:	6153      	str	r3, [r2, #20]
		if(gu32LEDDelay)gu32LEDDelay--;
 8004590:	4b2c      	ldr	r3, [pc, #176]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	b11b      	cbz	r3, 800459e <HAL_TIM_PeriodElapsedCallback+0xb2>
 8004596:	4a2b      	ldr	r2, [pc, #172]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004598:	6993      	ldr	r3, [r2, #24]
 800459a:	3b01      	subs	r3, #1
 800459c:	6193      	str	r3, [r2, #24]
		if(gu32CANQueryPollTimer)gu32CANQueryPollTimer--;
 800459e:	4b29      	ldr	r3, [pc, #164]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	b11b      	cbz	r3, 80045ac <HAL_TIM_PeriodElapsedCallback+0xc0>
 80045a4:	4a27      	ldr	r2, [pc, #156]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80045a6:	69d3      	ldr	r3, [r2, #28]
 80045a8:	3b01      	subs	r3, #1
 80045aa:	61d3      	str	r3, [r2, #28]
		if(gu32CANCommandResponseTimeout)gu32CANCommandResponseTimeout--;
 80045ac:	4b25      	ldr	r3, [pc, #148]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	b11b      	cbz	r3, 80045ba <HAL_TIM_PeriodElapsedCallback+0xce>
 80045b2:	4a24      	ldr	r2, [pc, #144]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80045b4:	6a13      	ldr	r3, [r2, #32]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	6213      	str	r3, [r2, #32]
		if(gu32ADCPollTimer)gu32ADCPollTimer--;
 80045ba:	4b22      	ldr	r3, [pc, #136]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	b11b      	cbz	r3, 80045c8 <HAL_TIM_PeriodElapsedCallback+0xdc>
 80045c0:	4a20      	ldr	r2, [pc, #128]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80045c2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80045c4:	3b01      	subs	r3, #1
 80045c6:	6253      	str	r3, [r2, #36]	; 0x24
		if(gu32ADCOperationTimer)gu32ADCOperationTimer--;
 80045c8:	4b1e      	ldr	r3, [pc, #120]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80045ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045cc:	b11b      	cbz	r3, 80045d6 <HAL_TIM_PeriodElapsedCallback+0xea>
 80045ce:	4a1d      	ldr	r2, [pc, #116]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80045d0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80045d2:	3b01      	subs	r3, #1
 80045d4:	6293      	str	r3, [r2, #40]	; 0x28
		if(gu32SleepModeTimer1)gu32SleepModeTimer1--;
 80045d6:	4b1b      	ldr	r3, [pc, #108]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80045d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045da:	b113      	cbz	r3, 80045e2 <HAL_TIM_PeriodElapsedCallback+0xf6>
 80045dc:	3b01      	subs	r3, #1
 80045de:	4a19      	ldr	r2, [pc, #100]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80045e0:	62d3      	str	r3, [r2, #44]	; 0x2c
		if(gu32GSMPowerDownTimer)gu32GSMPowerDownTimer--;
 80045e2:	4b18      	ldr	r3, [pc, #96]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	b11b      	cbz	r3, 80045f0 <HAL_TIM_PeriodElapsedCallback+0x104>
 80045e8:	4a16      	ldr	r2, [pc, #88]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80045ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80045ec:	3b01      	subs	r3, #1
 80045ee:	6313      	str	r3, [r2, #48]	; 0x30
		if(gu32CANReqResponseTimeout)gu32CANReqResponseTimeout--;
 80045f0:	4b14      	ldr	r3, [pc, #80]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80045f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f4:	b113      	cbz	r3, 80045fc <HAL_TIM_PeriodElapsedCallback+0x110>
 80045f6:	3b01      	subs	r3, #1
 80045f8:	4a12      	ldr	r2, [pc, #72]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80045fa:	6353      	str	r3, [r2, #52]	; 0x34
		if(u32KeyOffStableTimeout)u32KeyOffStableTimeout--;
 80045fc:	4b14      	ldr	r3, [pc, #80]	; (8004650 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	b113      	cbz	r3, 8004608 <HAL_TIM_PeriodElapsedCallback+0x11c>
 8004602:	3b01      	subs	r3, #1
 8004604:	4a12      	ldr	r2, [pc, #72]	; (8004650 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8004606:	6013      	str	r3, [r2, #0]
		if(gu32ImmobilizerReadTimer)gu32ImmobilizerReadTimer--;
 8004608:	4b0e      	ldr	r3, [pc, #56]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800460a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460c:	b11b      	cbz	r3, 8004616 <HAL_TIM_PeriodElapsedCallback+0x12a>
 800460e:	4a0d      	ldr	r2, [pc, #52]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004610:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004612:	3b01      	subs	r3, #1
 8004614:	6393      	str	r3, [r2, #56]	; 0x38
		if(gu8NoCANDATATimeOut)gu8NoCANDATATimeOut--;
 8004616:	4b0f      	ldr	r3, [pc, #60]	; (8004654 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	b113      	cbz	r3, 8004622 <HAL_TIM_PeriodElapsedCallback+0x136>
 800461c:	3b01      	subs	r3, #1
 800461e:	4a0d      	ldr	r2, [pc, #52]	; (8004654 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8004620:	6013      	str	r3, [r2, #0]
		if(gu32FotaRquestFlag == FALSE)
 8004622:	4b0d      	ldr	r3, [pc, #52]	; (8004658 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	f47f af64 	bne.w	80044f4 <HAL_TIM_PeriodElapsedCallback+0x8>
			if(gu32SystemResetTimer)gu32SystemResetTimer--;
 800462c:	4b05      	ldr	r3, [pc, #20]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800462e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004630:	2b00      	cmp	r3, #0
 8004632:	f43f af5f 	beq.w	80044f4 <HAL_TIM_PeriodElapsedCallback+0x8>
 8004636:	3b01      	subs	r3, #1
 8004638:	4a02      	ldr	r2, [pc, #8]	; (8004644 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800463a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800463c:	e75a      	b.n	80044f4 <HAL_TIM_PeriodElapsedCallback+0x8>
 800463e:	bf00      	nop
 8004640:	40001400 	.word	0x40001400
 8004644:	20002fbc 	.word	0x20002fbc
 8004648:	200031d0 	.word	0x200031d0
 800464c:	20001a34 	.word	0x20001a34
 8004650:	20002884 	.word	0x20002884
 8004654:	200023a8 	.word	0x200023a8
 8004658:	20001aec 	.word	0x20001aec

0800465c <HAL_TIM_IC_CaptureCallback>:
 100138				28-02-19			Changed falling - ceiling in 2 parts, 0-50
 	 	 	 	 	 	 	 	 	 	and 51-100 as required by Manitou
******************************************************************************/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
}
 800465c:	4770      	bx	lr
	...

08004660 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004660:	4b10      	ldr	r3, [pc, #64]	; (80046a4 <HAL_InitTick+0x44>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	b90b      	cbnz	r3, 800466a <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8004666:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8004668:	4770      	bx	lr
{
 800466a:	b510      	push	{r4, lr}
 800466c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800466e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004672:	fbb0 f3f3 	udiv	r3, r0, r3
 8004676:	4a0c      	ldr	r2, [pc, #48]	; (80046a8 <HAL_InitTick+0x48>)
 8004678:	6810      	ldr	r0, [r2, #0]
 800467a:	fbb0 f0f3 	udiv	r0, r0, r3
 800467e:	f000 ff33 	bl	80054e8 <HAL_SYSTICK_Config>
 8004682:	b968      	cbnz	r0, 80046a0 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004684:	2c0f      	cmp	r4, #15
 8004686:	d901      	bls.n	800468c <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8004688:	2001      	movs	r0, #1
 800468a:	e00a      	b.n	80046a2 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800468c:	2200      	movs	r2, #0
 800468e:	4621      	mov	r1, r4
 8004690:	f04f 30ff 	mov.w	r0, #4294967295
 8004694:	f000 feae 	bl	80053f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004698:	4b02      	ldr	r3, [pc, #8]	; (80046a4 <HAL_InitTick+0x44>)
 800469a:	605c      	str	r4, [r3, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800469c:	2000      	movs	r0, #0
 800469e:	e000      	b.n	80046a2 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 80046a0:	2001      	movs	r0, #1
}
 80046a2:	bd10      	pop	{r4, pc}
 80046a4:	20001a38 	.word	0x20001a38
 80046a8:	200015f4 	.word	0x200015f4

080046ac <HAL_Init>:
{
 80046ac:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046ae:	2003      	movs	r0, #3
 80046b0:	f000 fe82 	bl	80053b8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046b4:	200f      	movs	r0, #15
 80046b6:	f7ff ffd3 	bl	8004660 <HAL_InitTick>
 80046ba:	b110      	cbz	r0, 80046c2 <HAL_Init+0x16>
    status = HAL_ERROR;
 80046bc:	2401      	movs	r4, #1
}
 80046be:	4620      	mov	r0, r4
 80046c0:	bd10      	pop	{r4, pc}
 80046c2:	4604      	mov	r4, r0
    HAL_MspInit();
 80046c4:	f7ff f898 	bl	80037f8 <HAL_MspInit>
 80046c8:	e7f9      	b.n	80046be <HAL_Init+0x12>
	...

080046cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80046cc:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <HAL_IncTick+0x1c>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	4a06      	ldr	r2, [pc, #24]	; (80046ec <HAL_IncTick+0x20>)
 80046d2:	6811      	ldr	r1, [r2, #0]
 80046d4:	440b      	add	r3, r1
 80046d6:	6013      	str	r3, [r2, #0]
  if(gu32TimeSyncFlag)
 80046d8:	4b05      	ldr	r3, [pc, #20]	; (80046f0 <HAL_IncTick+0x24>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	b11b      	cbz	r3, 80046e6 <HAL_IncTick+0x1a>
  	  gu32TimeSyncVariable++;
 80046de:	4a05      	ldr	r2, [pc, #20]	; (80046f4 <HAL_IncTick+0x28>)
 80046e0:	6813      	ldr	r3, [r2, #0]
 80046e2:	3301      	adds	r3, #1
 80046e4:	6013      	str	r3, [r2, #0]
}
 80046e6:	4770      	bx	lr
 80046e8:	20001a38 	.word	0x20001a38
 80046ec:	20004c00 	.word	0x20004c00
 80046f0:	20002fac 	.word	0x20002fac
 80046f4:	20002fb0 	.word	0x20002fb0

080046f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80046f8:	4b01      	ldr	r3, [pc, #4]	; (8004700 <HAL_GetTick+0x8>)
 80046fa:	6818      	ldr	r0, [r3, #0]
}
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	20004c00 	.word	0x20004c00

08004704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004704:	b538      	push	{r3, r4, r5, lr}
 8004706:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004708:	f7ff fff6 	bl	80046f8 <HAL_GetTick>
 800470c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800470e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004712:	d002      	beq.n	800471a <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 8004714:	4b04      	ldr	r3, [pc, #16]	; (8004728 <HAL_Delay+0x24>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800471a:	f7ff ffed 	bl	80046f8 <HAL_GetTick>
 800471e:	1b40      	subs	r0, r0, r5
 8004720:	42a0      	cmp	r0, r4
 8004722:	d3fa      	bcc.n	800471a <HAL_Delay+0x16>
  {
  }
}
 8004724:	bd38      	pop	{r3, r4, r5, pc}
 8004726:	bf00      	nop
 8004728:	20001a38 	.word	0x20001a38

0800472c <HAL_ADC_LevelOutOfWindowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800472c:	4770      	bx	lr

0800472e <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800472e:	4770      	bx	lr

08004730 <HAL_ADC_IRQHandler>:
{
 8004730:	b570      	push	{r4, r5, r6, lr}
 8004732:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004734:	6803      	ldr	r3, [r0, #0]
 8004736:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004738:	685e      	ldr	r6, [r3, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800473a:	4a94      	ldr	r2, [pc, #592]	; (800498c <HAL_ADC_IRQHandler+0x25c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d004      	beq.n	800474a <HAL_ADC_IRQHandler+0x1a>
 8004740:	f640 01c3 	movw	r1, #2243	; 0x8c3
 8004744:	4892      	ldr	r0, [pc, #584]	; (8004990 <HAL_ADC_IRQHandler+0x260>)
 8004746:	f7fe f809 	bl	800275c <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 800474a:	6963      	ldr	r3, [r4, #20]
 800474c:	2b04      	cmp	r3, #4
 800474e:	d001      	beq.n	8004754 <HAL_ADC_IRQHandler+0x24>
 8004750:	2b08      	cmp	r3, #8
 8004752:	d149      	bne.n	80047e8 <HAL_ADC_IRQHandler+0xb8>
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004754:	f015 0f02 	tst.w	r5, #2
 8004758:	d010      	beq.n	800477c <HAL_ADC_IRQHandler+0x4c>
 800475a:	f016 0f02 	tst.w	r6, #2
 800475e:	d00d      	beq.n	800477c <HAL_ADC_IRQHandler+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004760:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004762:	f013 0f10 	tst.w	r3, #16
 8004766:	d103      	bne.n	8004770 <HAL_ADC_IRQHandler+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004768:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800476a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800476e:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004770:	4620      	mov	r0, r4
 8004772:	f000 f913 	bl	800499c <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004776:	6823      	ldr	r3, [r4, #0]
 8004778:	2202      	movs	r2, #2
 800477a:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800477c:	f015 0f04 	tst.w	r5, #4
 8004780:	d002      	beq.n	8004788 <HAL_ADC_IRQHandler+0x58>
 8004782:	f016 0f04 	tst.w	r6, #4
 8004786:	d105      	bne.n	8004794 <HAL_ADC_IRQHandler+0x64>
 8004788:	f015 0f08 	tst.w	r5, #8
 800478c:	d040      	beq.n	8004810 <HAL_ADC_IRQHandler+0xe0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800478e:	f016 0f08 	tst.w	r6, #8
 8004792:	d03d      	beq.n	8004810 <HAL_ADC_IRQHandler+0xe0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004794:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004796:	f013 0f10 	tst.w	r3, #16
 800479a:	d103      	bne.n	80047a4 <HAL_ADC_IRQHandler+0x74>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800479c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800479e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047a2:	6563      	str	r3, [r4, #84]	; 0x54
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80047a4:	6823      	ldr	r3, [r4, #0]
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80047ac:	d12a      	bne.n	8004804 <HAL_ADC_IRQHandler+0xd4>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80047ae:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80047b0:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 80047b4:	d126      	bne.n	8004804 <HAL_ADC_IRQHandler+0xd4>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	f012 0f08 	tst.w	r2, #8
 80047bc:	d022      	beq.n	8004804 <HAL_ADC_IRQHandler+0xd4>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	f012 0f04 	tst.w	r2, #4
 80047c4:	d116      	bne.n	80047f4 <HAL_ADC_IRQHandler+0xc4>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	f022 020c 	bic.w	r2, r2, #12
 80047cc:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80047ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80047d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047d4:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80047d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80047d8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80047dc:	d112      	bne.n	8004804 <HAL_ADC_IRQHandler+0xd4>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047de:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80047e0:	f043 0301 	orr.w	r3, r3, #1
 80047e4:	6563      	str	r3, [r4, #84]	; 0x54
 80047e6:	e00d      	b.n	8004804 <HAL_ADC_IRQHandler+0xd4>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80047e8:	f640 01c4 	movw	r1, #2244	; 0x8c4
 80047ec:	4868      	ldr	r0, [pc, #416]	; (8004990 <HAL_ADC_IRQHandler+0x260>)
 80047ee:	f7fd ffb5 	bl	800275c <assert_failed>
 80047f2:	e7af      	b.n	8004754 <HAL_ADC_IRQHandler+0x24>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80047f6:	f043 0310 	orr.w	r3, r3, #16
 80047fa:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80047fe:	f043 0301 	orr.w	r3, r3, #1
 8004802:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8004804:	4620      	mov	r0, r4
 8004806:	f7ff fa6d 	bl	8003ce4 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	220c      	movs	r2, #12
 800480e:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004810:	f015 0f20 	tst.w	r5, #32
 8004814:	d002      	beq.n	800481c <HAL_ADC_IRQHandler+0xec>
 8004816:	f016 0f20 	tst.w	r6, #32
 800481a:	d105      	bne.n	8004828 <HAL_ADC_IRQHandler+0xf8>
 800481c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004820:	d04c      	beq.n	80048bc <HAL_ADC_IRQHandler+0x18c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004822:	f016 0f40 	tst.w	r6, #64	; 0x40
 8004826:	d049      	beq.n	80048bc <HAL_ADC_IRQHandler+0x18c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004828:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800482a:	f013 0f10 	tst.w	r3, #16
 800482e:	d103      	bne.n	8004838 <HAL_ADC_IRQHandler+0x108>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004830:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004832:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004836:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004838:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800483a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800483c:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8004840:	d12a      	bne.n	8004898 <HAL_ADC_IRQHandler+0x168>
 8004842:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800484a:	d127      	bne.n	800489c <HAL_ADC_IRQHandler+0x16c>
 800484c:	2001      	movs	r0, #1
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800484e:	68da      	ldr	r2, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004850:	b371      	cbz	r1, 80048b0 <HAL_ADC_IRQHandler+0x180>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004852:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004856:	d003      	beq.n	8004860 <HAL_ADC_IRQHandler+0x130>
 8004858:	b350      	cbz	r0, 80048b0 <HAL_ADC_IRQHandler+0x180>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800485a:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800485e:	d127      	bne.n	80048b0 <HAL_ADC_IRQHandler+0x180>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004860:	6819      	ldr	r1, [r3, #0]
 8004862:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004866:	d023      	beq.n	80048b0 <HAL_ADC_IRQHandler+0x180>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004868:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 800486c:	d120      	bne.n	80048b0 <HAL_ADC_IRQHandler+0x180>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	f012 0f08 	tst.w	r2, #8
 8004874:	d114      	bne.n	80048a0 <HAL_ADC_IRQHandler+0x170>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800487c:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800487e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004880:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004884:	6563      	str	r3, [r4, #84]	; 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004886:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004888:	f413 7f80 	tst.w	r3, #256	; 0x100
 800488c:	d110      	bne.n	80048b0 <HAL_ADC_IRQHandler+0x180>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800488e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004890:	f043 0301 	orr.w	r3, r3, #1
 8004894:	6563      	str	r3, [r4, #84]	; 0x54
 8004896:	e00b      	b.n	80048b0 <HAL_ADC_IRQHandler+0x180>
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004898:	2100      	movs	r1, #0
 800489a:	e7d3      	b.n	8004844 <HAL_ADC_IRQHandler+0x114>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800489c:	2000      	movs	r0, #0
 800489e:	e7d6      	b.n	800484e <HAL_ADC_IRQHandler+0x11e>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80048a2:	f043 0310 	orr.w	r3, r3, #16
 80048a6:	6563      	str	r3, [r4, #84]	; 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048aa:	f043 0301 	orr.w	r3, r3, #1
 80048ae:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80048b0:	4620      	mov	r0, r4
 80048b2:	f000 f86f 	bl	8004994 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80048b6:	6823      	ldr	r3, [r4, #0]
 80048b8:	2260      	movs	r2, #96	; 0x60
 80048ba:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80048bc:	f015 0f80 	tst.w	r5, #128	; 0x80
 80048c0:	d002      	beq.n	80048c8 <HAL_ADC_IRQHandler+0x198>
 80048c2:	f016 0f80 	tst.w	r6, #128	; 0x80
 80048c6:	d12d      	bne.n	8004924 <HAL_ADC_IRQHandler+0x1f4>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80048c8:	f415 7f80 	tst.w	r5, #256	; 0x100
 80048cc:	d002      	beq.n	80048d4 <HAL_ADC_IRQHandler+0x1a4>
 80048ce:	f416 7f80 	tst.w	r6, #256	; 0x100
 80048d2:	d132      	bne.n	800493a <HAL_ADC_IRQHandler+0x20a>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80048d4:	f415 7f00 	tst.w	r5, #512	; 0x200
 80048d8:	d002      	beq.n	80048e0 <HAL_ADC_IRQHandler+0x1b0>
 80048da:	f416 7f00 	tst.w	r6, #512	; 0x200
 80048de:	d138      	bne.n	8004952 <HAL_ADC_IRQHandler+0x222>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80048e0:	f015 0f10 	tst.w	r5, #16
 80048e4:	d017      	beq.n	8004916 <HAL_ADC_IRQHandler+0x1e6>
 80048e6:	f016 0f10 	tst.w	r6, #16
 80048ea:	d014      	beq.n	8004916 <HAL_ADC_IRQHandler+0x1e6>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80048ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048ee:	b123      	cbz	r3, 80048fa <HAL_ADC_IRQHandler+0x1ca>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f013 0f01 	tst.w	r3, #1
 80048f8:	d00a      	beq.n	8004910 <HAL_ADC_IRQHandler+0x1e0>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80048fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80048fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004900:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004902:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004904:	f043 0302 	orr.w	r3, r3, #2
 8004908:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 800490a:	4620      	mov	r0, r4
 800490c:	f7ff ff0f 	bl	800472e <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	2210      	movs	r2, #16
 8004914:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004916:	f415 6f80 	tst.w	r5, #1024	; 0x400
 800491a:	d002      	beq.n	8004922 <HAL_ADC_IRQHandler+0x1f2>
 800491c:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8004920:	d123      	bne.n	800496a <HAL_ADC_IRQHandler+0x23a>
}
 8004922:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004924:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800492a:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800492c:	4620      	mov	r0, r4
 800492e:	f7ff fefd 	bl	800472c <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	2280      	movs	r2, #128	; 0x80
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	e7c6      	b.n	80048c8 <HAL_ADC_IRQHandler+0x198>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800493a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800493c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004940:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004942:	4620      	mov	r0, r4
 8004944:	f000 f828 	bl	8004998 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004948:	6823      	ldr	r3, [r4, #0]
 800494a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	e7c0      	b.n	80048d4 <HAL_ADC_IRQHandler+0x1a4>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004952:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004958:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800495a:	4620      	mov	r0, r4
 800495c:	f000 f81d 	bl	800499a <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	e7ba      	b.n	80048e0 <HAL_ADC_IRQHandler+0x1b0>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800496a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800496c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004970:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004972:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004974:	f043 0308 	orr.w	r3, r3, #8
 8004978:	65a3      	str	r3, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800497a:	6823      	ldr	r3, [r4, #0]
 800497c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004980:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004982:	4620      	mov	r0, r4
 8004984:	f000 f807 	bl	8004996 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8004988:	e7cb      	b.n	8004922 <HAL_ADC_IRQHandler+0x1f2>
 800498a:	bf00      	nop
 800498c:	50040000 	.word	0x50040000
 8004990:	0800b7dc 	.word	0x0800b7dc

08004994 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004994:	4770      	bx	lr

08004996 <HAL_ADCEx_InjectedQueueOverflowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004996:	4770      	bx	lr

08004998 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004998:	4770      	bx	lr

0800499a <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800499a:	4770      	bx	lr

0800499c <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800499c:	4770      	bx	lr
	...

080049a0 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80049a0:	2800      	cmp	r0, #0
 80049a2:	f000 816d 	beq.w	8004c80 <HAL_CAN_Init+0x2e0>
{
 80049a6:	b538      	push	{r3, r4, r5, lr}
 80049a8:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 80049aa:	6802      	ldr	r2, [r0, #0]
 80049ac:	4baf      	ldr	r3, [pc, #700]	; (8004c6c <HAL_CAN_Init+0x2cc>)
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d004      	beq.n	80049bc <HAL_CAN_Init+0x1c>
 80049b2:	f240 111d 	movw	r1, #285	; 0x11d
 80049b6:	48ae      	ldr	r0, [pc, #696]	; (8004c70 <HAL_CAN_Init+0x2d0>)
 80049b8:	f7fd fed0 	bl	800275c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 80049bc:	7e23      	ldrb	r3, [r4, #24]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	f200 8096 	bhi.w	8004af0 <HAL_CAN_Init+0x150>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 80049c4:	7e63      	ldrb	r3, [r4, #25]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	f200 8098 	bhi.w	8004afc <HAL_CAN_Init+0x15c>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 80049cc:	7ea3      	ldrb	r3, [r4, #26]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	f200 809a 	bhi.w	8004b08 <HAL_CAN_Init+0x168>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 80049d4:	7ee3      	ldrb	r3, [r4, #27]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	f200 809c 	bhi.w	8004b14 <HAL_CAN_Init+0x174>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 80049dc:	7f23      	ldrb	r3, [r4, #28]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	f200 809e 	bhi.w	8004b20 <HAL_CAN_Init+0x180>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 80049e4:	7f63      	ldrb	r3, [r4, #29]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	f200 80a0 	bhi.w	8004b2c <HAL_CAN_Init+0x18c>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 80049ec:	68a3      	ldr	r3, [r4, #8]
 80049ee:	b14b      	cbz	r3, 8004a04 <HAL_CAN_Init+0x64>
 80049f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f4:	d006      	beq.n	8004a04 <HAL_CAN_Init+0x64>
 80049f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049fa:	d003      	beq.n	8004a04 <HAL_CAN_Init+0x64>
 80049fc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004a00:	f040 809a 	bne.w	8004b38 <HAL_CAN_Init+0x198>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8004a04:	68e3      	ldr	r3, [r4, #12]
 8004a06:	b14b      	cbz	r3, 8004a1c <HAL_CAN_Init+0x7c>
 8004a08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a0c:	d006      	beq.n	8004a1c <HAL_CAN_Init+0x7c>
 8004a0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a12:	d003      	beq.n	8004a1c <HAL_CAN_Init+0x7c>
 8004a14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a18:	f040 8094 	bne.w	8004b44 <HAL_CAN_Init+0x1a4>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 8004a1c:	6923      	ldr	r3, [r4, #16]
 8004a1e:	b363      	cbz	r3, 8004a7a <HAL_CAN_Init+0xda>
 8004a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a24:	d029      	beq.n	8004a7a <HAL_CAN_Init+0xda>
 8004a26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a2a:	d026      	beq.n	8004a7a <HAL_CAN_Init+0xda>
 8004a2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a30:	d023      	beq.n	8004a7a <HAL_CAN_Init+0xda>
 8004a32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a36:	d020      	beq.n	8004a7a <HAL_CAN_Init+0xda>
 8004a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a3c:	d01d      	beq.n	8004a7a <HAL_CAN_Init+0xda>
 8004a3e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8004a42:	d01a      	beq.n	8004a7a <HAL_CAN_Init+0xda>
 8004a44:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8004a48:	d017      	beq.n	8004a7a <HAL_CAN_Init+0xda>
 8004a4a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004a4e:	d014      	beq.n	8004a7a <HAL_CAN_Init+0xda>
 8004a50:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 8004a54:	d011      	beq.n	8004a7a <HAL_CAN_Init+0xda>
 8004a56:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8004a5a:	d00e      	beq.n	8004a7a <HAL_CAN_Init+0xda>
 8004a5c:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 8004a60:	d00b      	beq.n	8004a7a <HAL_CAN_Init+0xda>
 8004a62:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004a66:	d008      	beq.n	8004a7a <HAL_CAN_Init+0xda>
 8004a68:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 8004a6c:	d005      	beq.n	8004a7a <HAL_CAN_Init+0xda>
 8004a6e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004a72:	d002      	beq.n	8004a7a <HAL_CAN_Init+0xda>
 8004a74:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 8004a78:	d16a      	bne.n	8004b50 <HAL_CAN_Init+0x1b0>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 8004a7a:	6963      	ldr	r3, [r4, #20]
 8004a7c:	b1a3      	cbz	r3, 8004aa8 <HAL_CAN_Init+0x108>
 8004a7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a82:	d011      	beq.n	8004aa8 <HAL_CAN_Init+0x108>
 8004a84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a88:	d00e      	beq.n	8004aa8 <HAL_CAN_Init+0x108>
 8004a8a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a8e:	d00b      	beq.n	8004aa8 <HAL_CAN_Init+0x108>
 8004a90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a94:	d008      	beq.n	8004aa8 <HAL_CAN_Init+0x108>
 8004a96:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8004a9a:	d005      	beq.n	8004aa8 <HAL_CAN_Init+0x108>
 8004a9c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004aa0:	d002      	beq.n	8004aa8 <HAL_CAN_Init+0x108>
 8004aa2:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8004aa6:	d159      	bne.n	8004b5c <HAL_CAN_Init+0x1bc>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 8004aa8:	6863      	ldr	r3, [r4, #4]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab0:	d25a      	bcs.n	8004b68 <HAL_CAN_Init+0x1c8>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004ab2:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d05c      	beq.n	8004b74 <HAL_CAN_Init+0x1d4>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004aba:	6822      	ldr	r2, [r4, #0]
 8004abc:	6813      	ldr	r3, [r2, #0]
 8004abe:	f043 0301 	orr.w	r3, r3, #1
 8004ac2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ac4:	f7ff fe18 	bl	80046f8 <HAL_GetTick>
 8004ac8:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	f012 0f01 	tst.w	r2, #1
 8004ad2:	d153      	bne.n	8004b7c <HAL_CAN_Init+0x1dc>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004ad4:	f7ff fe10 	bl	80046f8 <HAL_GetTick>
 8004ad8:	1b40      	subs	r0, r0, r5
 8004ada:	280a      	cmp	r0, #10
 8004adc:	d9f5      	bls.n	8004aca <HAL_CAN_Init+0x12a>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004ade:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ae4:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004ae6:	2305      	movs	r3, #5
 8004ae8:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8004aec:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8004aee:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 8004af0:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004af4:	485e      	ldr	r0, [pc, #376]	; (8004c70 <HAL_CAN_Init+0x2d0>)
 8004af6:	f7fd fe31 	bl	800275c <assert_failed>
 8004afa:	e763      	b.n	80049c4 <HAL_CAN_Init+0x24>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 8004afc:	f240 111f 	movw	r1, #287	; 0x11f
 8004b00:	485b      	ldr	r0, [pc, #364]	; (8004c70 <HAL_CAN_Init+0x2d0>)
 8004b02:	f7fd fe2b 	bl	800275c <assert_failed>
 8004b06:	e761      	b.n	80049cc <HAL_CAN_Init+0x2c>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 8004b08:	f44f 7190 	mov.w	r1, #288	; 0x120
 8004b0c:	4858      	ldr	r0, [pc, #352]	; (8004c70 <HAL_CAN_Init+0x2d0>)
 8004b0e:	f7fd fe25 	bl	800275c <assert_failed>
 8004b12:	e75f      	b.n	80049d4 <HAL_CAN_Init+0x34>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 8004b14:	f240 1121 	movw	r1, #289	; 0x121
 8004b18:	4855      	ldr	r0, [pc, #340]	; (8004c70 <HAL_CAN_Init+0x2d0>)
 8004b1a:	f7fd fe1f 	bl	800275c <assert_failed>
 8004b1e:	e75d      	b.n	80049dc <HAL_CAN_Init+0x3c>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 8004b20:	f44f 7191 	mov.w	r1, #290	; 0x122
 8004b24:	4852      	ldr	r0, [pc, #328]	; (8004c70 <HAL_CAN_Init+0x2d0>)
 8004b26:	f7fd fe19 	bl	800275c <assert_failed>
 8004b2a:	e75b      	b.n	80049e4 <HAL_CAN_Init+0x44>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 8004b2c:	f240 1123 	movw	r1, #291	; 0x123
 8004b30:	484f      	ldr	r0, [pc, #316]	; (8004c70 <HAL_CAN_Init+0x2d0>)
 8004b32:	f7fd fe13 	bl	800275c <assert_failed>
 8004b36:	e759      	b.n	80049ec <HAL_CAN_Init+0x4c>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 8004b38:	f44f 7192 	mov.w	r1, #292	; 0x124
 8004b3c:	484c      	ldr	r0, [pc, #304]	; (8004c70 <HAL_CAN_Init+0x2d0>)
 8004b3e:	f7fd fe0d 	bl	800275c <assert_failed>
 8004b42:	e75f      	b.n	8004a04 <HAL_CAN_Init+0x64>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8004b44:	f240 1125 	movw	r1, #293	; 0x125
 8004b48:	4849      	ldr	r0, [pc, #292]	; (8004c70 <HAL_CAN_Init+0x2d0>)
 8004b4a:	f7fd fe07 	bl	800275c <assert_failed>
 8004b4e:	e765      	b.n	8004a1c <HAL_CAN_Init+0x7c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 8004b50:	f44f 7193 	mov.w	r1, #294	; 0x126
 8004b54:	4846      	ldr	r0, [pc, #280]	; (8004c70 <HAL_CAN_Init+0x2d0>)
 8004b56:	f7fd fe01 	bl	800275c <assert_failed>
 8004b5a:	e78e      	b.n	8004a7a <HAL_CAN_Init+0xda>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 8004b5c:	f240 1127 	movw	r1, #295	; 0x127
 8004b60:	4843      	ldr	r0, [pc, #268]	; (8004c70 <HAL_CAN_Init+0x2d0>)
 8004b62:	f7fd fdfb 	bl	800275c <assert_failed>
 8004b66:	e79f      	b.n	8004aa8 <HAL_CAN_Init+0x108>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 8004b68:	f44f 7194 	mov.w	r1, #296	; 0x128
 8004b6c:	4840      	ldr	r0, [pc, #256]	; (8004c70 <HAL_CAN_Init+0x2d0>)
 8004b6e:	f7fd fdf5 	bl	800275c <assert_failed>
 8004b72:	e79e      	b.n	8004ab2 <HAL_CAN_Init+0x112>
    HAL_CAN_MspInit(hcan);
 8004b74:	4620      	mov	r0, r4
 8004b76:	f7fb ff83 	bl	8000a80 <HAL_CAN_MspInit>
 8004b7a:	e79e      	b.n	8004aba <HAL_CAN_Init+0x11a>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	f022 0202 	bic.w	r2, r2, #2
 8004b82:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8004b84:	f7ff fdb8 	bl	80046f8 <HAL_GetTick>
 8004b88:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004b8a:	6823      	ldr	r3, [r4, #0]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	f012 0f02 	tst.w	r2, #2
 8004b92:	d00d      	beq.n	8004bb0 <HAL_CAN_Init+0x210>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b94:	f7ff fdb0 	bl	80046f8 <HAL_GetTick>
 8004b98:	1b40      	subs	r0, r0, r5
 8004b9a:	280a      	cmp	r0, #10
 8004b9c:	d9f5      	bls.n	8004b8a <HAL_CAN_Init+0x1ea>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004b9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ba4:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8004ba6:	2305      	movs	r3, #5
 8004ba8:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8004bac:	2001      	movs	r0, #1
 8004bae:	e79e      	b.n	8004aee <HAL_CAN_Init+0x14e>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004bb0:	7e22      	ldrb	r2, [r4, #24]
 8004bb2:	2a01      	cmp	r2, #1
 8004bb4:	d03d      	beq.n	8004c32 <HAL_CAN_Init+0x292>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bbc:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8004bbe:	7e63      	ldrb	r3, [r4, #25]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d03b      	beq.n	8004c3c <HAL_CAN_Init+0x29c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004bc4:	6822      	ldr	r2, [r4, #0]
 8004bc6:	6813      	ldr	r3, [r2, #0]
 8004bc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bcc:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004bce:	7ea3      	ldrb	r3, [r4, #26]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d039      	beq.n	8004c48 <HAL_CAN_Init+0x2a8>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004bd4:	6822      	ldr	r2, [r4, #0]
 8004bd6:	6813      	ldr	r3, [r2, #0]
 8004bd8:	f023 0320 	bic.w	r3, r3, #32
 8004bdc:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004bde:	7ee3      	ldrb	r3, [r4, #27]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d037      	beq.n	8004c54 <HAL_CAN_Init+0x2b4>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004be4:	6822      	ldr	r2, [r4, #0]
 8004be6:	6813      	ldr	r3, [r2, #0]
 8004be8:	f043 0310 	orr.w	r3, r3, #16
 8004bec:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004bee:	7f23      	ldrb	r3, [r4, #28]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d035      	beq.n	8004c60 <HAL_CAN_Init+0x2c0>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004bf4:	6822      	ldr	r2, [r4, #0]
 8004bf6:	6813      	ldr	r3, [r2, #0]
 8004bf8:	f023 0308 	bic.w	r3, r3, #8
 8004bfc:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004bfe:	7f63      	ldrb	r3, [r4, #29]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d037      	beq.n	8004c74 <HAL_CAN_Init+0x2d4>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004c04:	6822      	ldr	r2, [r4, #0]
 8004c06:	6813      	ldr	r3, [r2, #0]
 8004c08:	f023 0304 	bic.w	r3, r3, #4
 8004c0c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004c0e:	68a3      	ldr	r3, [r4, #8]
 8004c10:	68e2      	ldr	r2, [r4, #12]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	6922      	ldr	r2, [r4, #16]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	6962      	ldr	r2, [r4, #20]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	6862      	ldr	r2, [r4, #4]
 8004c1e:	3a01      	subs	r2, #1
 8004c20:	6821      	ldr	r1, [r4, #0]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004c26:	2000      	movs	r0, #0
 8004c28:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8004c30:	e75d      	b.n	8004aee <HAL_CAN_Init+0x14e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	e7c0      	b.n	8004bbe <HAL_CAN_Init+0x21e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004c3c:	6822      	ldr	r2, [r4, #0]
 8004c3e:	6813      	ldr	r3, [r2, #0]
 8004c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	e7c2      	b.n	8004bce <HAL_CAN_Init+0x22e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004c48:	6822      	ldr	r2, [r4, #0]
 8004c4a:	6813      	ldr	r3, [r2, #0]
 8004c4c:	f043 0320 	orr.w	r3, r3, #32
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	e7c4      	b.n	8004bde <HAL_CAN_Init+0x23e>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004c54:	6822      	ldr	r2, [r4, #0]
 8004c56:	6813      	ldr	r3, [r2, #0]
 8004c58:	f023 0310 	bic.w	r3, r3, #16
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	e7c6      	b.n	8004bee <HAL_CAN_Init+0x24e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004c60:	6822      	ldr	r2, [r4, #0]
 8004c62:	6813      	ldr	r3, [r2, #0]
 8004c64:	f043 0308 	orr.w	r3, r3, #8
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	e7c8      	b.n	8004bfe <HAL_CAN_Init+0x25e>
 8004c6c:	40006400 	.word	0x40006400
 8004c70:	0800b814 	.word	0x0800b814
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004c74:	6822      	ldr	r2, [r4, #0]
 8004c76:	6813      	ldr	r3, [r2, #0]
 8004c78:	f043 0304 	orr.w	r3, r3, #4
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	e7c6      	b.n	8004c0e <HAL_CAN_Init+0x26e>
    return HAL_ERROR;
 8004c80:	2001      	movs	r0, #1
}
 8004c82:	4770      	bx	lr

08004c84 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004c84:	b570      	push	{r4, r5, r6, lr}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004c86:	6805      	ldr	r5, [r0, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004c88:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d905      	bls.n	8004ca0 <HAL_CAN_ConfigFilter+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004c94:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004c96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c9a:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8004c9c:	2001      	movs	r0, #1
  }
}
 8004c9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ca0:	460c      	mov	r4, r1
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 8004ca2:	680b      	ldr	r3, [r1, #0]
 8004ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca8:	d263      	bcs.n	8004d72 <HAL_CAN_ConfigFilter+0xee>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 8004caa:	6863      	ldr	r3, [r4, #4]
 8004cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cb0:	d265      	bcs.n	8004d7e <HAL_CAN_ConfigFilter+0xfa>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 8004cb2:	68a3      	ldr	r3, [r4, #8]
 8004cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cb8:	d267      	bcs.n	8004d8a <HAL_CAN_ConfigFilter+0x106>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 8004cba:	68e3      	ldr	r3, [r4, #12]
 8004cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc0:	d269      	bcs.n	8004d96 <HAL_CAN_ConfigFilter+0x112>
    assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 8004cc2:	69a3      	ldr	r3, [r4, #24]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d86c      	bhi.n	8004da2 <HAL_CAN_ConfigFilter+0x11e>
    assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 8004cc8:	69e3      	ldr	r3, [r4, #28]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d86f      	bhi.n	8004dae <HAL_CAN_ConfigFilter+0x12a>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 8004cce:	6923      	ldr	r3, [r4, #16]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d872      	bhi.n	8004dba <HAL_CAN_ConfigFilter+0x136>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 8004cd4:	6a23      	ldr	r3, [r4, #32]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d875      	bhi.n	8004dc6 <HAL_CAN_ConfigFilter+0x142>
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
 8004cda:	6963      	ldr	r3, [r4, #20]
 8004cdc:	2b0d      	cmp	r3, #13
 8004cde:	d878      	bhi.n	8004dd2 <HAL_CAN_ConfigFilter+0x14e>
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004ce0:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 8004ce4:	f043 0301 	orr.w	r3, r3, #1
 8004ce8:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004cec:	6963      	ldr	r3, [r4, #20]
 8004cee:	f003 031f 	and.w	r3, r3, #31
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004cf8:	f8d5 221c 	ldr.w	r2, [r5, #540]	; 0x21c
 8004cfc:	43d9      	mvns	r1, r3
 8004cfe:	ea22 0203 	bic.w	r2, r2, r3
 8004d02:	f8c5 221c 	str.w	r2, [r5, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004d06:	69e2      	ldr	r2, [r4, #28]
 8004d08:	b9aa      	cbnz	r2, 8004d36 <HAL_CAN_ConfigFilter+0xb2>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004d0a:	f8d5 220c 	ldr.w	r2, [r5, #524]	; 0x20c
 8004d0e:	400a      	ands	r2, r1
 8004d10:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004d14:	68e6      	ldr	r6, [r4, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004d16:	88a0      	ldrh	r0, [r4, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d18:	6962      	ldr	r2, [r4, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d1e:	3248      	adds	r2, #72	; 0x48
 8004d20:	f845 0032 	str.w	r0, [r5, r2, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d24:	68a6      	ldr	r6, [r4, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004d26:	8820      	ldrh	r0, [r4, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d28:	6962      	ldr	r2, [r4, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d2e:	3248      	adds	r2, #72	; 0x48
 8004d30:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004d34:	6050      	str	r0, [r2, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004d36:	69e2      	ldr	r2, [r4, #28]
 8004d38:	2a01      	cmp	r2, #1
 8004d3a:	d050      	beq.n	8004dde <HAL_CAN_ConfigFilter+0x15a>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004d3c:	69a2      	ldr	r2, [r4, #24]
 8004d3e:	2a00      	cmp	r2, #0
 8004d40:	d164      	bne.n	8004e0c <HAL_CAN_ConfigFilter+0x188>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004d42:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8004d46:	400a      	ands	r2, r1
 8004d48:	f8c5 2204 	str.w	r2, [r5, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004d4c:	6922      	ldr	r2, [r4, #16]
 8004d4e:	2a00      	cmp	r2, #0
 8004d50:	d162      	bne.n	8004e18 <HAL_CAN_ConfigFilter+0x194>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004d52:	f8d5 2214 	ldr.w	r2, [r5, #532]	; 0x214
 8004d56:	4011      	ands	r1, r2
 8004d58:	f8c5 1214 	str.w	r1, [r5, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004d5c:	6a22      	ldr	r2, [r4, #32]
 8004d5e:	2a01      	cmp	r2, #1
 8004d60:	d060      	beq.n	8004e24 <HAL_CAN_ConfigFilter+0x1a0>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004d62:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 8004d66:	f023 0301 	bic.w	r3, r3, #1
 8004d6a:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
    return HAL_OK;
 8004d6e:	2000      	movs	r0, #0
 8004d70:	e795      	b.n	8004c9e <HAL_CAN_ConfigFilter+0x1a>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 8004d72:	f44f 7154 	mov.w	r1, #848	; 0x350
 8004d76:	482e      	ldr	r0, [pc, #184]	; (8004e30 <HAL_CAN_ConfigFilter+0x1ac>)
 8004d78:	f7fd fcf0 	bl	800275c <assert_failed>
 8004d7c:	e795      	b.n	8004caa <HAL_CAN_ConfigFilter+0x26>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 8004d7e:	f240 3151 	movw	r1, #849	; 0x351
 8004d82:	482b      	ldr	r0, [pc, #172]	; (8004e30 <HAL_CAN_ConfigFilter+0x1ac>)
 8004d84:	f7fd fcea 	bl	800275c <assert_failed>
 8004d88:	e793      	b.n	8004cb2 <HAL_CAN_ConfigFilter+0x2e>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 8004d8a:	f240 3152 	movw	r1, #850	; 0x352
 8004d8e:	4828      	ldr	r0, [pc, #160]	; (8004e30 <HAL_CAN_ConfigFilter+0x1ac>)
 8004d90:	f7fd fce4 	bl	800275c <assert_failed>
 8004d94:	e791      	b.n	8004cba <HAL_CAN_ConfigFilter+0x36>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 8004d96:	f240 3153 	movw	r1, #851	; 0x353
 8004d9a:	4825      	ldr	r0, [pc, #148]	; (8004e30 <HAL_CAN_ConfigFilter+0x1ac>)
 8004d9c:	f7fd fcde 	bl	800275c <assert_failed>
 8004da0:	e78f      	b.n	8004cc2 <HAL_CAN_ConfigFilter+0x3e>
    assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 8004da2:	f44f 7155 	mov.w	r1, #852	; 0x354
 8004da6:	4822      	ldr	r0, [pc, #136]	; (8004e30 <HAL_CAN_ConfigFilter+0x1ac>)
 8004da8:	f7fd fcd8 	bl	800275c <assert_failed>
 8004dac:	e78c      	b.n	8004cc8 <HAL_CAN_ConfigFilter+0x44>
    assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 8004dae:	f240 3155 	movw	r1, #853	; 0x355
 8004db2:	481f      	ldr	r0, [pc, #124]	; (8004e30 <HAL_CAN_ConfigFilter+0x1ac>)
 8004db4:	f7fd fcd2 	bl	800275c <assert_failed>
 8004db8:	e789      	b.n	8004cce <HAL_CAN_ConfigFilter+0x4a>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 8004dba:	f240 3156 	movw	r1, #854	; 0x356
 8004dbe:	481c      	ldr	r0, [pc, #112]	; (8004e30 <HAL_CAN_ConfigFilter+0x1ac>)
 8004dc0:	f7fd fccc 	bl	800275c <assert_failed>
 8004dc4:	e786      	b.n	8004cd4 <HAL_CAN_ConfigFilter+0x50>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 8004dc6:	f240 3157 	movw	r1, #855	; 0x357
 8004dca:	4819      	ldr	r0, [pc, #100]	; (8004e30 <HAL_CAN_ConfigFilter+0x1ac>)
 8004dcc:	f7fd fcc6 	bl	800275c <assert_failed>
 8004dd0:	e783      	b.n	8004cda <HAL_CAN_ConfigFilter+0x56>
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
 8004dd2:	f240 3165 	movw	r1, #869	; 0x365
 8004dd6:	4816      	ldr	r0, [pc, #88]	; (8004e30 <HAL_CAN_ConfigFilter+0x1ac>)
 8004dd8:	f7fd fcc0 	bl	800275c <assert_failed>
 8004ddc:	e780      	b.n	8004ce0 <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004dde:	f8d5 220c 	ldr.w	r2, [r5, #524]	; 0x20c
 8004de2:	431a      	orrs	r2, r3
 8004de4:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004de8:	6826      	ldr	r6, [r4, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004dea:	88a0      	ldrh	r0, [r4, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004dec:	6962      	ldr	r2, [r4, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004dee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004df2:	3248      	adds	r2, #72	; 0x48
 8004df4:	f845 0032 	str.w	r0, [r5, r2, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004df8:	68a6      	ldr	r6, [r4, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004dfa:	89a0      	ldrh	r0, [r4, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004dfc:	6962      	ldr	r2, [r4, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004dfe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e02:	3248      	adds	r2, #72	; 0x48
 8004e04:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004e08:	6050      	str	r0, [r2, #4]
 8004e0a:	e797      	b.n	8004d3c <HAL_CAN_ConfigFilter+0xb8>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004e0c:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8004e10:	431a      	orrs	r2, r3
 8004e12:	f8c5 2204 	str.w	r2, [r5, #516]	; 0x204
 8004e16:	e799      	b.n	8004d4c <HAL_CAN_ConfigFilter+0xc8>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004e18:	f8d5 2214 	ldr.w	r2, [r5, #532]	; 0x214
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	f8c5 2214 	str.w	r2, [r5, #532]	; 0x214
 8004e22:	e79b      	b.n	8004d5c <HAL_CAN_ConfigFilter+0xd8>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004e24:	f8d5 221c 	ldr.w	r2, [r5, #540]	; 0x21c
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
 8004e2e:	e798      	b.n	8004d62 <HAL_CAN_ConfigFilter+0xde>
 8004e30:	0800b814 	.word	0x0800b814

08004e34 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004e34:	b570      	push	{r4, r5, r6, lr}
 8004e36:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004e38:	f890 5020 	ldrb.w	r5, [r0, #32]
 8004e3c:	b2ed      	uxtb	r5, r5
 8004e3e:	2d01      	cmp	r5, #1
 8004e40:	d006      	beq.n	8004e50 <HAL_CAN_Start+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004e42:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004e44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e48:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8004e4a:	2501      	movs	r5, #1
  }
}
 8004e4c:	4628      	mov	r0, r5
 8004e4e:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004e50:	2302      	movs	r3, #2
 8004e52:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004e56:	6802      	ldr	r2, [r0, #0]
 8004e58:	6813      	ldr	r3, [r2, #0]
 8004e5a:	f023 0301 	bic.w	r3, r3, #1
 8004e5e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004e60:	f7ff fc4a 	bl	80046f8 <HAL_GetTick>
 8004e64:	4606      	mov	r6, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f013 0f01 	tst.w	r3, #1
 8004e6e:	d00c      	beq.n	8004e8a <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004e70:	f7ff fc42 	bl	80046f8 <HAL_GetTick>
 8004e74:	1b83      	subs	r3, r0, r6
 8004e76:	2b0a      	cmp	r3, #10
 8004e78:	d9f5      	bls.n	8004e66 <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004e7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e80:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8004e82:	2305      	movs	r3, #5
 8004e84:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8004e88:	e7e0      	b.n	8004e4c <HAL_CAN_Start+0x18>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004e8a:	2500      	movs	r5, #0
 8004e8c:	6265      	str	r5, [r4, #36]	; 0x24
    return HAL_OK;
 8004e8e:	e7dd      	b.n	8004e4c <HAL_CAN_Start+0x18>

08004e90 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8004e90:	b538      	push	{r3, r4, r5, lr}
 8004e92:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8004e94:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d005      	beq.n	8004eaa <HAL_CAN_Stop+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8004e9e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004ea0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ea4:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8004ea6:	2001      	movs	r0, #1
  }
}
 8004ea8:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004eaa:	6802      	ldr	r2, [r0, #0]
 8004eac:	6813      	ldr	r3, [r2, #0]
 8004eae:	f043 0301 	orr.w	r3, r3, #1
 8004eb2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004eb4:	f7ff fc20 	bl	80046f8 <HAL_GetTick>
 8004eb8:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	685a      	ldr	r2, [r3, #4]
 8004ebe:	f012 0f01 	tst.w	r2, #1
 8004ec2:	d10d      	bne.n	8004ee0 <HAL_CAN_Stop+0x50>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004ec4:	f7ff fc18 	bl	80046f8 <HAL_GetTick>
 8004ec8:	1b43      	subs	r3, r0, r5
 8004eca:	2b0a      	cmp	r3, #10
 8004ecc:	d9f5      	bls.n	8004eba <HAL_CAN_Stop+0x2a>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004ece:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ed4:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8004ed6:	2305      	movs	r3, #5
 8004ed8:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8004edc:	2001      	movs	r0, #1
 8004ede:	e7e3      	b.n	8004ea8 <HAL_CAN_Stop+0x18>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	f022 0202 	bic.w	r2, r2, #2
 8004ee6:	601a      	str	r2, [r3, #0]
    hcan->State = HAL_CAN_STATE_READY;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_OK;
 8004eee:	2000      	movs	r0, #0
 8004ef0:	e7da      	b.n	8004ea8 <HAL_CAN_Stop+0x18>
	...

08004ef4 <HAL_CAN_DeInit>:
  if (hcan == NULL)
 8004ef4:	b1d0      	cbz	r0, 8004f2c <HAL_CAN_DeInit+0x38>
{
 8004ef6:	b510      	push	{r4, lr}
 8004ef8:	4604      	mov	r4, r0
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 8004efa:	6802      	ldr	r2, [r0, #0]
 8004efc:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <HAL_CAN_DeInit+0x3c>)
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d004      	beq.n	8004f0c <HAL_CAN_DeInit+0x18>
 8004f02:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8004f06:	480b      	ldr	r0, [pc, #44]	; (8004f34 <HAL_CAN_DeInit+0x40>)
 8004f08:	f7fd fc28 	bl	800275c <assert_failed>
  (void)HAL_CAN_Stop(hcan);
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	f7ff ffbf 	bl	8004e90 <HAL_CAN_Stop>
  HAL_CAN_MspDeInit(hcan);
 8004f12:	4620      	mov	r0, r4
 8004f14:	f7fb fe0a 	bl	8000b2c <HAL_CAN_MspDeInit>
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8004f18:	6822      	ldr	r2, [r4, #0]
 8004f1a:	6813      	ldr	r3, [r2, #0]
 8004f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f20:	6013      	str	r3, [r2, #0]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004f22:	2000      	movs	r0, #0
 8004f24:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_RESET;
 8004f26:	f884 0020 	strb.w	r0, [r4, #32]
}
 8004f2a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004f2c:	2001      	movs	r0, #1
}
 8004f2e:	4770      	bx	lr
 8004f30:	40006400 	.word	0x40006400
 8004f34:	0800b814 	.word	0x0800b814

08004f38 <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8004f38:	b570      	push	{r4, r5, r6, lr}
 8004f3a:	4605      	mov	r5, r0
 8004f3c:	460e      	mov	r6, r1
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f3e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8004f42:	b2e4      	uxtb	r4, r4

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
 8004f44:	2907      	cmp	r1, #7
 8004f46:	d809      	bhi.n	8004f5c <HAL_CAN_AbortTxRequest+0x24>

  if ((state == HAL_CAN_STATE_READY) ||
 8004f48:	3c01      	subs	r4, #1
 8004f4a:	b2e4      	uxtb	r4, r4
 8004f4c:	2c01      	cmp	r4, #1
 8004f4e:	d90b      	bls.n	8004f68 <HAL_CAN_AbortTxRequest+0x30>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f50:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004f52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f56:	626b      	str	r3, [r5, #36]	; 0x24

    return HAL_ERROR;
 8004f58:	2001      	movs	r0, #1
  }
}
 8004f5a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
 8004f5c:	f240 5137 	movw	r1, #1335	; 0x537
 8004f60:	480e      	ldr	r0, [pc, #56]	; (8004f9c <HAL_CAN_AbortTxRequest+0x64>)
 8004f62:	f7fd fbfb 	bl	800275c <assert_failed>
 8004f66:	e7ef      	b.n	8004f48 <HAL_CAN_AbortTxRequest+0x10>
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 8004f68:	f016 0f01 	tst.w	r6, #1
 8004f6c:	d004      	beq.n	8004f78 <HAL_CAN_AbortTxRequest+0x40>
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 8004f6e:	682a      	ldr	r2, [r5, #0]
 8004f70:	6893      	ldr	r3, [r2, #8]
 8004f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f76:	6093      	str	r3, [r2, #8]
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 8004f78:	f016 0f02 	tst.w	r6, #2
 8004f7c:	d004      	beq.n	8004f88 <HAL_CAN_AbortTxRequest+0x50>
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 8004f7e:	682a      	ldr	r2, [r5, #0]
 8004f80:	6893      	ldr	r3, [r2, #8]
 8004f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f86:	6093      	str	r3, [r2, #8]
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 8004f88:	f016 0f04 	tst.w	r6, #4
 8004f8c:	d004      	beq.n	8004f98 <HAL_CAN_AbortTxRequest+0x60>
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 8004f8e:	682a      	ldr	r2, [r5, #0]
 8004f90:	6893      	ldr	r3, [r2, #8]
 8004f92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f96:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 8004f98:	2000      	movs	r0, #0
 8004f9a:	e7de      	b.n	8004f5a <HAL_CAN_AbortTxRequest+0x22>
 8004f9c:	0800b814 	.word	0x0800b814

08004fa0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fa4:	4604      	mov	r4, r0
 8004fa6:	460d      	mov	r5, r1
 8004fa8:	4690      	mov	r8, r2
 8004faa:	461f      	mov	r7, r3
  HAL_CAN_StateTypeDef state = hcan->State;
 8004fac:	f890 6020 	ldrb.w	r6, [r0, #32]
 8004fb0:	b2f6      	uxtb	r6, r6

  assert_param(IS_CAN_RX_FIFO(RxFifo));
 8004fb2:	2901      	cmp	r1, #1
 8004fb4:	d810      	bhi.n	8004fd8 <HAL_CAN_GetRxMessage+0x38>

  if ((state == HAL_CAN_STATE_READY) ||
 8004fb6:	3e01      	subs	r6, #1
 8004fb8:	b2f6      	uxtb	r6, r6
 8004fba:	2e01      	cmp	r6, #1
 8004fbc:	f200 809e 	bhi.w	80050fc <HAL_CAN_GetRxMessage+0x15c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004fc0:	b985      	cbnz	r5, 8004fe4 <HAL_CAN_GetRxMessage+0x44>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f013 0f03 	tst.w	r3, #3
 8004fca:	d116      	bne.n	8004ffa <HAL_CAN_GetRxMessage+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004fcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fd2:	6263      	str	r3, [r4, #36]	; 0x24

        return HAL_ERROR;
 8004fd4:	2001      	movs	r0, #1
 8004fd6:	e096      	b.n	8005106 <HAL_CAN_GetRxMessage+0x166>
  assert_param(IS_CAN_RX_FIFO(RxFifo));
 8004fd8:	f240 51d4 	movw	r1, #1492	; 0x5d4
 8004fdc:	484b      	ldr	r0, [pc, #300]	; (800510c <HAL_CAN_GetRxMessage+0x16c>)
 8004fde:	f7fd fbbd 	bl	800275c <assert_failed>
 8004fe2:	e7e8      	b.n	8004fb6 <HAL_CAN_GetRxMessage+0x16>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004fe4:	6823      	ldr	r3, [r4, #0]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	f013 0f03 	tst.w	r3, #3
 8004fec:	d105      	bne.n	8004ffa <HAL_CAN_GetRxMessage+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004fee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ff0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ff4:	6263      	str	r3, [r4, #36]	; 0x24

        return HAL_ERROR;
 8004ff6:	2001      	movs	r0, #1
 8004ff8:	e085      	b.n	8005106 <HAL_CAN_GetRxMessage+0x166>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004ffa:	6822      	ldr	r2, [r4, #0]
 8004ffc:	f105 031b 	add.w	r3, r5, #27
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	58d3      	ldr	r3, [r2, r3]
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	f8c8 3008 	str.w	r3, [r8, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800500c:	2b00      	cmp	r3, #0
 800500e:	d166      	bne.n	80050de <HAL_CAN_GetRxMessage+0x13e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005010:	6822      	ldr	r2, [r4, #0]
 8005012:	f105 031b 	add.w	r3, r5, #27
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	58d3      	ldr	r3, [r2, r3]
 800501a:	0d5b      	lsrs	r3, r3, #21
 800501c:	f8c8 3000 	str.w	r3, [r8]
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005020:	6822      	ldr	r2, [r4, #0]
 8005022:	f105 031b 	add.w	r3, r5, #27
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	58d2      	ldr	r2, [r2, r3]
 800502a:	f002 0202 	and.w	r2, r2, #2
 800502e:	f8c8 200c 	str.w	r2, [r8, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005032:	6822      	ldr	r2, [r4, #0]
 8005034:	441a      	add	r2, r3
 8005036:	6852      	ldr	r2, [r2, #4]
 8005038:	f002 020f 	and.w	r2, r2, #15
 800503c:	f8c8 2010 	str.w	r2, [r8, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005040:	6822      	ldr	r2, [r4, #0]
 8005042:	441a      	add	r2, r3
 8005044:	6852      	ldr	r2, [r2, #4]
 8005046:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800504a:	f8c8 2018 	str.w	r2, [r8, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800504e:	6822      	ldr	r2, [r4, #0]
 8005050:	4413      	add	r3, r2
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	0c1b      	lsrs	r3, r3, #16
 8005056:	f8c8 3014 	str.w	r3, [r8, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 8005060:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8005064:	703b      	strb	r3, [r7, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005066:	6823      	ldr	r3, [r4, #0]
 8005068:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 800506c:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8005070:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8005074:	707b      	strb	r3, [r7, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005076:	6823      	ldr	r3, [r4, #0]
 8005078:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 800507c:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8005080:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005084:	70bb      	strb	r3, [r7, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005086:	6823      	ldr	r3, [r4, #0]
 8005088:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 800508c:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8005090:	0e1b      	lsrs	r3, r3, #24
 8005092:	70fb      	strb	r3, [r7, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005094:	6823      	ldr	r3, [r4, #0]
 8005096:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 800509a:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800509e:	713b      	strb	r3, [r7, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80050a0:	6823      	ldr	r3, [r4, #0]
 80050a2:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 80050a6:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80050aa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80050ae:	717b      	strb	r3, [r7, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80050b0:	6823      	ldr	r3, [r4, #0]
 80050b2:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 80050b6:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80050ba:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80050be:	71bb      	strb	r3, [r7, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 80050c6:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80050ca:	0e1b      	lsrs	r3, r3, #24
 80050cc:	71fb      	strb	r3, [r7, #7]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80050ce:	b97d      	cbnz	r5, 80050f0 <HAL_CAN_GetRxMessage+0x150>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80050d0:	6822      	ldr	r2, [r4, #0]
 80050d2:	68d3      	ldr	r3, [r2, #12]
 80050d4:	f043 0320 	orr.w	r3, r3, #32
 80050d8:	60d3      	str	r3, [r2, #12]
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

    /* Return function status */
    return HAL_OK;
 80050da:	2000      	movs	r0, #0
 80050dc:	e013      	b.n	8005106 <HAL_CAN_GetRxMessage+0x166>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80050de:	6822      	ldr	r2, [r4, #0]
 80050e0:	f105 031b 	add.w	r3, r5, #27
 80050e4:	011b      	lsls	r3, r3, #4
 80050e6:	58d3      	ldr	r3, [r2, r3]
 80050e8:	08db      	lsrs	r3, r3, #3
 80050ea:	f8c8 3004 	str.w	r3, [r8, #4]
 80050ee:	e797      	b.n	8005020 <HAL_CAN_GetRxMessage+0x80>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80050f0:	6822      	ldr	r2, [r4, #0]
 80050f2:	6913      	ldr	r3, [r2, #16]
 80050f4:	f043 0320 	orr.w	r3, r3, #32
 80050f8:	6113      	str	r3, [r2, #16]
 80050fa:	e7ee      	b.n	80050da <HAL_CAN_GetRxMessage+0x13a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80050fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005102:	6263      	str	r3, [r4, #36]	; 0x24

    return HAL_ERROR;
 8005104:	2001      	movs	r0, #1
  }
}
 8005106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800510a:	bf00      	nop
 800510c:	0800b814 	.word	0x0800b814

08005110 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005110:	b570      	push	{r4, r5, r6, lr}
 8005112:	4605      	mov	r5, r0
 8005114:	460e      	mov	r6, r1
  HAL_CAN_StateTypeDef state = hcan->State;
 8005116:	f890 4020 	ldrb.w	r4, [r0, #32]
 800511a:	b2e4      	uxtb	r4, r4

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));
 800511c:	4b0c      	ldr	r3, [pc, #48]	; (8005150 <HAL_CAN_ActivateNotification+0x40>)
 800511e:	4299      	cmp	r1, r3
 8005120:	d809      	bhi.n	8005136 <HAL_CAN_ActivateNotification+0x26>

  if ((state == HAL_CAN_STATE_READY) ||
 8005122:	3c01      	subs	r4, #1
 8005124:	b2e4      	uxtb	r4, r4
 8005126:	2c01      	cmp	r4, #1
 8005128:	d90b      	bls.n	8005142 <HAL_CAN_ActivateNotification+0x32>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800512a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800512c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005130:	626b      	str	r3, [r5, #36]	; 0x24

    return HAL_ERROR;
 8005132:	2001      	movs	r0, #1
  }
}
 8005134:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_CAN_IT(ActiveITs));
 8005136:	f240 6164 	movw	r1, #1636	; 0x664
 800513a:	4806      	ldr	r0, [pc, #24]	; (8005154 <HAL_CAN_ActivateNotification+0x44>)
 800513c:	f7fd fb0e 	bl	800275c <assert_failed>
 8005140:	e7ef      	b.n	8005122 <HAL_CAN_ActivateNotification+0x12>
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005142:	682b      	ldr	r3, [r5, #0]
 8005144:	6959      	ldr	r1, [r3, #20]
 8005146:	430e      	orrs	r6, r1
 8005148:	615e      	str	r6, [r3, #20]
    return HAL_OK;
 800514a:	2000      	movs	r0, #0
 800514c:	e7f2      	b.n	8005134 <HAL_CAN_ActivateNotification+0x24>
 800514e:	bf00      	nop
 8005150:	00038f7f 	.word	0x00038f7f
 8005154:	0800b814 	.word	0x0800b814

08005158 <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005158:	4770      	bx	lr

0800515a <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800515a:	4770      	bx	lr

0800515c <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800515c:	4770      	bx	lr

0800515e <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800515e:	4770      	bx	lr

08005160 <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005160:	4770      	bx	lr

08005162 <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005162:	4770      	bx	lr

08005164 <HAL_CAN_RxFifo1MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005164:	4770      	bx	lr

08005166 <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005166:	4770      	bx	lr

08005168 <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005168:	4770      	bx	lr

0800516a <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800516a:	4770      	bx	lr

0800516c <HAL_CAN_IRQHandler>:
{
 800516c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005170:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005172:	6803      	ldr	r3, [r0, #0]
 8005174:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005176:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800517a:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800517c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005180:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005184:	f8d3 9018 	ldr.w	r9, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005188:	f014 0601 	ands.w	r6, r4, #1
 800518c:	d03b      	beq.n	8005206 <HAL_CAN_IRQHandler+0x9a>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800518e:	f017 0601 	ands.w	r6, r7, #1
 8005192:	d016      	beq.n	80051c2 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005194:	2201      	movs	r2, #1
 8005196:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005198:	f017 0f02 	tst.w	r7, #2
 800519c:	d108      	bne.n	80051b0 <HAL_CAN_IRQHandler+0x44>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800519e:	f017 0f04 	tst.w	r7, #4
 80051a2:	d10c      	bne.n	80051be <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80051a4:	f017 0608 	ands.w	r6, r7, #8
 80051a8:	d006      	beq.n	80051b8 <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80051aa:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 80051ae:	e008      	b.n	80051c2 <HAL_CAN_IRQHandler+0x56>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80051b0:	f7fe fef4 	bl	8003f9c <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80051b4:	2600      	movs	r6, #0
 80051b6:	e004      	b.n	80051c2 <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80051b8:	f7ff ffd0 	bl	800515c <HAL_CAN_TxMailbox0AbortCallback>
 80051bc:	e001      	b.n	80051c2 <HAL_CAN_IRQHandler+0x56>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80051be:	f44f 6600 	mov.w	r6, #2048	; 0x800
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80051c2:	f417 7f80 	tst.w	r7, #256	; 0x100
 80051c6:	d00d      	beq.n	80051e4 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80051c8:	682b      	ldr	r3, [r5, #0]
 80051ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051ce:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80051d0:	f417 7f00 	tst.w	r7, #512	; 0x200
 80051d4:	f040 8086 	bne.w	80052e4 <HAL_CAN_IRQHandler+0x178>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80051d8:	f417 6f80 	tst.w	r7, #1024	; 0x400
 80051dc:	f000 8086 	beq.w	80052ec <HAL_CAN_IRQHandler+0x180>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80051e0:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80051e4:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80051e8:	d00d      	beq.n	8005206 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80051ea:	682b      	ldr	r3, [r5, #0]
 80051ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80051f0:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80051f2:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80051f6:	f040 8083 	bne.w	8005300 <HAL_CAN_IRQHandler+0x194>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80051fa:	f417 2f80 	tst.w	r7, #262144	; 0x40000
 80051fe:	f000 8083 	beq.w	8005308 <HAL_CAN_IRQHandler+0x19c>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005202:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005206:	f014 0f08 	tst.w	r4, #8
 800520a:	d007      	beq.n	800521c <HAL_CAN_IRQHandler+0xb0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800520c:	f01b 0f10 	tst.w	fp, #16
 8005210:	d004      	beq.n	800521c <HAL_CAN_IRQHandler+0xb0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005212:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005216:	682b      	ldr	r3, [r5, #0]
 8005218:	2210      	movs	r2, #16
 800521a:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800521c:	f014 0f04 	tst.w	r4, #4
 8005220:	d002      	beq.n	8005228 <HAL_CAN_IRQHandler+0xbc>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005222:	f01b 0f08 	tst.w	fp, #8
 8005226:	d179      	bne.n	800531c <HAL_CAN_IRQHandler+0x1b0>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005228:	f014 0f02 	tst.w	r4, #2
 800522c:	d004      	beq.n	8005238 <HAL_CAN_IRQHandler+0xcc>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800522e:	682b      	ldr	r3, [r5, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f013 0f03 	tst.w	r3, #3
 8005236:	d178      	bne.n	800532a <HAL_CAN_IRQHandler+0x1be>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005238:	f014 0f40 	tst.w	r4, #64	; 0x40
 800523c:	d007      	beq.n	800524e <HAL_CAN_IRQHandler+0xe2>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800523e:	f01a 0f10 	tst.w	sl, #16
 8005242:	d004      	beq.n	800524e <HAL_CAN_IRQHandler+0xe2>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005244:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005248:	682b      	ldr	r3, [r5, #0]
 800524a:	2210      	movs	r2, #16
 800524c:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800524e:	f014 0f20 	tst.w	r4, #32
 8005252:	d002      	beq.n	800525a <HAL_CAN_IRQHandler+0xee>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005254:	f01a 0f08 	tst.w	sl, #8
 8005258:	d16b      	bne.n	8005332 <HAL_CAN_IRQHandler+0x1c6>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800525a:	f014 0f10 	tst.w	r4, #16
 800525e:	d004      	beq.n	800526a <HAL_CAN_IRQHandler+0xfe>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005260:	682b      	ldr	r3, [r5, #0]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	f013 0f03 	tst.w	r3, #3
 8005268:	d16a      	bne.n	8005340 <HAL_CAN_IRQHandler+0x1d4>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800526a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 800526e:	d002      	beq.n	8005276 <HAL_CAN_IRQHandler+0x10a>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005270:	f018 0f10 	tst.w	r8, #16
 8005274:	d168      	bne.n	8005348 <HAL_CAN_IRQHandler+0x1dc>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005276:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 800527a:	d002      	beq.n	8005282 <HAL_CAN_IRQHandler+0x116>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800527c:	f018 0f08 	tst.w	r8, #8
 8005280:	d169      	bne.n	8005356 <HAL_CAN_IRQHandler+0x1ea>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005282:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8005286:	d07a      	beq.n	800537e <HAL_CAN_IRQHandler+0x212>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005288:	f018 0f04 	tst.w	r8, #4
 800528c:	d074      	beq.n	8005378 <HAL_CAN_IRQHandler+0x20c>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800528e:	f414 7f80 	tst.w	r4, #256	; 0x100
 8005292:	d004      	beq.n	800529e <HAL_CAN_IRQHandler+0x132>
 8005294:	f019 0f01 	tst.w	r9, #1
 8005298:	d001      	beq.n	800529e <HAL_CAN_IRQHandler+0x132>
        errorcode |= HAL_CAN_ERROR_EWG;
 800529a:	f046 0601 	orr.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800529e:	f414 7f00 	tst.w	r4, #512	; 0x200
 80052a2:	d004      	beq.n	80052ae <HAL_CAN_IRQHandler+0x142>
 80052a4:	f019 0f02 	tst.w	r9, #2
 80052a8:	d001      	beq.n	80052ae <HAL_CAN_IRQHandler+0x142>
        errorcode |= HAL_CAN_ERROR_EPV;
 80052aa:	f046 0602 	orr.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80052ae:	f414 6f80 	tst.w	r4, #1024	; 0x400
 80052b2:	d004      	beq.n	80052be <HAL_CAN_IRQHandler+0x152>
 80052b4:	f019 0f04 	tst.w	r9, #4
 80052b8:	d001      	beq.n	80052be <HAL_CAN_IRQHandler+0x152>
        errorcode |= HAL_CAN_ERROR_BOF;
 80052ba:	f046 0604 	orr.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80052be:	f414 6f00 	tst.w	r4, #2048	; 0x800
 80052c2:	d059      	beq.n	8005378 <HAL_CAN_IRQHandler+0x20c>
 80052c4:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 80052c8:	d056      	beq.n	8005378 <HAL_CAN_IRQHandler+0x20c>
        switch (esrflags & CAN_ESR_LEC)
 80052ca:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 80052ce:	d065      	beq.n	800539c <HAL_CAN_IRQHandler+0x230>
 80052d0:	d858      	bhi.n	8005384 <HAL_CAN_IRQHandler+0x218>
 80052d2:	f1b9 0f20 	cmp.w	r9, #32
 80052d6:	d05e      	beq.n	8005396 <HAL_CAN_IRQHandler+0x22a>
 80052d8:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 80052dc:	d142      	bne.n	8005364 <HAL_CAN_IRQHandler+0x1f8>
            errorcode |= HAL_CAN_ERROR_ACK;
 80052de:	f046 0620 	orr.w	r6, r6, #32
            break;
 80052e2:	e044      	b.n	800536e <HAL_CAN_IRQHandler+0x202>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80052e4:	4628      	mov	r0, r5
 80052e6:	f7ff ff37 	bl	8005158 <HAL_CAN_TxMailbox1CompleteCallback>
 80052ea:	e77b      	b.n	80051e4 <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80052ec:	f417 6f00 	tst.w	r7, #2048	; 0x800
 80052f0:	d002      	beq.n	80052f8 <HAL_CAN_IRQHandler+0x18c>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80052f2:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80052f6:	e775      	b.n	80051e4 <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80052f8:	4628      	mov	r0, r5
 80052fa:	f7ff ff30 	bl	800515e <HAL_CAN_TxMailbox1AbortCallback>
 80052fe:	e771      	b.n	80051e4 <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005300:	4628      	mov	r0, r5
 8005302:	f7ff ff2a 	bl	800515a <HAL_CAN_TxMailbox2CompleteCallback>
 8005306:	e77e      	b.n	8005206 <HAL_CAN_IRQHandler+0x9a>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005308:	f417 2f00 	tst.w	r7, #524288	; 0x80000
 800530c:	d002      	beq.n	8005314 <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800530e:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 8005312:	e778      	b.n	8005206 <HAL_CAN_IRQHandler+0x9a>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005314:	4628      	mov	r0, r5
 8005316:	f7ff ff23 	bl	8005160 <HAL_CAN_TxMailbox2AbortCallback>
 800531a:	e774      	b.n	8005206 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800531c:	682b      	ldr	r3, [r5, #0]
 800531e:	2208      	movs	r2, #8
 8005320:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005322:	4628      	mov	r0, r5
 8005324:	f7ff ff1d 	bl	8005162 <HAL_CAN_RxFifo0FullCallback>
 8005328:	e77e      	b.n	8005228 <HAL_CAN_IRQHandler+0xbc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800532a:	4628      	mov	r0, r5
 800532c:	f7fe fdc0 	bl	8003eb0 <HAL_CAN_RxFifo0MsgPendingCallback>
 8005330:	e782      	b.n	8005238 <HAL_CAN_IRQHandler+0xcc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005332:	682b      	ldr	r3, [r5, #0]
 8005334:	2208      	movs	r2, #8
 8005336:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005338:	4628      	mov	r0, r5
 800533a:	f7ff ff14 	bl	8005166 <HAL_CAN_RxFifo1FullCallback>
 800533e:	e78c      	b.n	800525a <HAL_CAN_IRQHandler+0xee>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005340:	4628      	mov	r0, r5
 8005342:	f7ff ff0f 	bl	8005164 <HAL_CAN_RxFifo1MsgPendingCallback>
 8005346:	e790      	b.n	800526a <HAL_CAN_IRQHandler+0xfe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005348:	682b      	ldr	r3, [r5, #0]
 800534a:	2210      	movs	r2, #16
 800534c:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 800534e:	4628      	mov	r0, r5
 8005350:	f7ff ff0a 	bl	8005168 <HAL_CAN_SleepCallback>
 8005354:	e78f      	b.n	8005276 <HAL_CAN_IRQHandler+0x10a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005356:	682b      	ldr	r3, [r5, #0]
 8005358:	2208      	movs	r2, #8
 800535a:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800535c:	4628      	mov	r0, r5
 800535e:	f7ff ff04 	bl	800516a <HAL_CAN_WakeUpFromRxMsgCallback>
 8005362:	e78e      	b.n	8005282 <HAL_CAN_IRQHandler+0x116>
        switch (esrflags & CAN_ESR_LEC)
 8005364:	f1b9 0f10 	cmp.w	r9, #16
 8005368:	d101      	bne.n	800536e <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_STF;
 800536a:	f046 0608 	orr.w	r6, r6, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800536e:	682a      	ldr	r2, [r5, #0]
 8005370:	6993      	ldr	r3, [r2, #24]
 8005372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005376:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005378:	682b      	ldr	r3, [r5, #0]
 800537a:	2204      	movs	r2, #4
 800537c:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 800537e:	b99e      	cbnz	r6, 80053a8 <HAL_CAN_IRQHandler+0x23c>
}
 8005380:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (esrflags & CAN_ESR_LEC)
 8005384:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 8005388:	d00b      	beq.n	80053a2 <HAL_CAN_IRQHandler+0x236>
 800538a:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
 800538e:	d1ee      	bne.n	800536e <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005390:	f446 7680 	orr.w	r6, r6, #256	; 0x100
            break;
 8005394:	e7eb      	b.n	800536e <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005396:	f046 0610 	orr.w	r6, r6, #16
            break;
 800539a:	e7e8      	b.n	800536e <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BR;
 800539c:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 80053a0:	e7e5      	b.n	800536e <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BD;
 80053a2:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 80053a6:	e7e2      	b.n	800536e <HAL_CAN_IRQHandler+0x202>
    hcan->ErrorCode |= errorcode;
 80053a8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80053aa:	431e      	orrs	r6, r3
 80053ac:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 80053ae:	4628      	mov	r0, r5
 80053b0:	f7fe fde4 	bl	8003f7c <HAL_CAN_ErrorCallback>
}
 80053b4:	e7e4      	b.n	8005380 <HAL_CAN_IRQHandler+0x214>
	...

080053b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053b8:	b510      	push	{r4, lr}
 80053ba:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80053bc:	1ec3      	subs	r3, r0, #3
 80053be:	2b04      	cmp	r3, #4
 80053c0:	d80f      	bhi.n	80053e2 <HAL_NVIC_SetPriorityGrouping+0x2a>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053c2:	4a0a      	ldr	r2, [pc, #40]	; (80053ec <HAL_NVIC_SetPriorityGrouping+0x34>)
 80053c4:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053c6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80053ca:	041b      	lsls	r3, r3, #16
 80053cc:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053ce:	0224      	lsls	r4, r4, #8
 80053d0:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053d4:	4323      	orrs	r3, r4
  reg_value  =  (reg_value                                   |
 80053d6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80053de:	60d3      	str	r3, [r2, #12]

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80053e0:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80053e2:	21a6      	movs	r1, #166	; 0xa6
 80053e4:	4802      	ldr	r0, [pc, #8]	; (80053f0 <HAL_NVIC_SetPriorityGrouping+0x38>)
 80053e6:	f7fd f9b9 	bl	800275c <assert_failed>
 80053ea:	e7ea      	b.n	80053c2 <HAL_NVIC_SetPriorityGrouping+0xa>
 80053ec:	e000ed00 	.word	0xe000ed00
 80053f0:	0800b84c 	.word	0x0800b84c

080053f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053f4:	b570      	push	{r4, r5, r6, lr}
 80053f6:	4605      	mov	r5, r0
 80053f8:	460c      	mov	r4, r1
 80053fa:	4616      	mov	r6, r2
  uint32_t prioritygroup = 0x00;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80053fc:	2a0f      	cmp	r2, #15
 80053fe:	d825      	bhi.n	800544c <HAL_NVIC_SetPriority+0x58>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005400:	2c0f      	cmp	r4, #15
 8005402:	d828      	bhi.n	8005456 <HAL_NVIC_SetPriority+0x62>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005404:	4b1b      	ldr	r3, [pc, #108]	; (8005474 <HAL_NVIC_SetPriority+0x80>)
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800540c:	f1c3 0107 	rsb	r1, r3, #7
 8005410:	2904      	cmp	r1, #4
 8005412:	bf28      	it	cs
 8005414:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005416:	1d1a      	adds	r2, r3, #4
 8005418:	2a06      	cmp	r2, #6
 800541a:	d921      	bls.n	8005460 <HAL_NVIC_SetPriority+0x6c>
 800541c:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800541e:	f04f 32ff 	mov.w	r2, #4294967295
 8005422:	fa02 f101 	lsl.w	r1, r2, r1
 8005426:	ea24 0401 	bic.w	r4, r4, r1
 800542a:	409c      	lsls	r4, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800542c:	fa02 f303 	lsl.w	r3, r2, r3
 8005430:	ea26 0603 	bic.w	r6, r6, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005434:	4334      	orrs	r4, r6
  if ((int32_t)(IRQn) >= 0)
 8005436:	2d00      	cmp	r5, #0
 8005438:	db14      	blt.n	8005464 <HAL_NVIC_SetPriority+0x70>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800543a:	0124      	lsls	r4, r4, #4
 800543c:	b2e4      	uxtb	r4, r4
 800543e:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 8005442:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 8005446:	f885 4300 	strb.w	r4, [r5, #768]	; 0x300

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800544a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800544c:	21be      	movs	r1, #190	; 0xbe
 800544e:	480a      	ldr	r0, [pc, #40]	; (8005478 <HAL_NVIC_SetPriority+0x84>)
 8005450:	f7fd f984 	bl	800275c <assert_failed>
 8005454:	e7d4      	b.n	8005400 <HAL_NVIC_SetPriority+0xc>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005456:	21bf      	movs	r1, #191	; 0xbf
 8005458:	4807      	ldr	r0, [pc, #28]	; (8005478 <HAL_NVIC_SetPriority+0x84>)
 800545a:	f7fd f97f 	bl	800275c <assert_failed>
 800545e:	e7d1      	b.n	8005404 <HAL_NVIC_SetPriority+0x10>
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005460:	2300      	movs	r3, #0
 8005462:	e7dc      	b.n	800541e <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005464:	f005 050f 	and.w	r5, r5, #15
 8005468:	0124      	lsls	r4, r4, #4
 800546a:	b2e4      	uxtb	r4, r4
 800546c:	4b03      	ldr	r3, [pc, #12]	; (800547c <HAL_NVIC_SetPriority+0x88>)
 800546e:	555c      	strb	r4, [r3, r5]
}
 8005470:	e7eb      	b.n	800544a <HAL_NVIC_SetPriority+0x56>
 8005472:	bf00      	nop
 8005474:	e000ed00 	.word	0xe000ed00
 8005478:	0800b84c 	.word	0x0800b84c
 800547c:	e000ed14 	.word	0xe000ed14

08005480 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005480:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8005482:	1e04      	subs	r4, r0, #0
 8005484:	db0a      	blt.n	800549c <HAL_NVIC_EnableIRQ+0x1c>
  if ((int32_t)(IRQn) >= 0)
 8005486:	2c00      	cmp	r4, #0
 8005488:	db07      	blt.n	800549a <HAL_NVIC_EnableIRQ+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800548a:	f004 021f 	and.w	r2, r4, #31
 800548e:	0964      	lsrs	r4, r4, #5
 8005490:	2301      	movs	r3, #1
 8005492:	4093      	lsls	r3, r2
 8005494:	4a04      	ldr	r2, [pc, #16]	; (80054a8 <HAL_NVIC_EnableIRQ+0x28>)
 8005496:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800549a:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800549c:	21d2      	movs	r1, #210	; 0xd2
 800549e:	4803      	ldr	r0, [pc, #12]	; (80054ac <HAL_NVIC_EnableIRQ+0x2c>)
 80054a0:	f7fd f95c 	bl	800275c <assert_failed>
 80054a4:	e7ef      	b.n	8005486 <HAL_NVIC_EnableIRQ+0x6>
 80054a6:	bf00      	nop
 80054a8:	e000e100 	.word	0xe000e100
 80054ac:	0800b84c 	.word	0x0800b84c

080054b0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80054b0:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80054b2:	1e04      	subs	r4, r0, #0
 80054b4:	db0f      	blt.n	80054d6 <HAL_NVIC_DisableIRQ+0x26>
  if ((int32_t)(IRQn) >= 0)
 80054b6:	2c00      	cmp	r4, #0
 80054b8:	db0c      	blt.n	80054d4 <HAL_NVIC_DisableIRQ+0x24>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054ba:	f004 021f 	and.w	r2, r4, #31
 80054be:	0964      	lsrs	r4, r4, #5
 80054c0:	2301      	movs	r3, #1
 80054c2:	4093      	lsls	r3, r2
 80054c4:	3420      	adds	r4, #32
 80054c6:	4a06      	ldr	r2, [pc, #24]	; (80054e0 <HAL_NVIC_DisableIRQ+0x30>)
 80054c8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80054cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80054d0:	f3bf 8f6f 	isb	sy
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80054d4:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80054d6:	21e2      	movs	r1, #226	; 0xe2
 80054d8:	4802      	ldr	r0, [pc, #8]	; (80054e4 <HAL_NVIC_DisableIRQ+0x34>)
 80054da:	f7fd f93f 	bl	800275c <assert_failed>
 80054de:	e7ea      	b.n	80054b6 <HAL_NVIC_DisableIRQ+0x6>
 80054e0:	e000e100 	.word	0xe000e100
 80054e4:	0800b84c 	.word	0x0800b84c

080054e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054e8:	3801      	subs	r0, #1
 80054ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80054ee:	d20a      	bcs.n	8005506 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054f0:	4b06      	ldr	r3, [pc, #24]	; (800550c <HAL_SYSTICK_Config+0x24>)
 80054f2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054f4:	4a06      	ldr	r2, [pc, #24]	; (8005510 <HAL_SYSTICK_Config+0x28>)
 80054f6:	21f0      	movs	r1, #240	; 0xf0
 80054f8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054fc:	2000      	movs	r0, #0
 80054fe:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005500:	2207      	movs	r2, #7
 8005502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005504:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005506:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	e000e010 	.word	0xe000e010
 8005510:	e000ed00 	.word	0xe000ed00

08005514 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005514:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005516:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d003      	beq.n	8005528 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005520:	2304      	movs	r3, #4
 8005522:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8005524:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8005526:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005528:	6802      	ldr	r2, [r0, #0]
 800552a:	6813      	ldr	r3, [r2, #0]
 800552c:	f023 030e 	bic.w	r3, r3, #14
 8005530:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8005532:	6802      	ldr	r2, [r0, #0]
 8005534:	6813      	ldr	r3, [r2, #0]
 8005536:	f023 0301 	bic.w	r3, r3, #1
 800553a:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800553c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800553e:	f003 031c 	and.w	r3, r3, #28
 8005542:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005544:	2201      	movs	r2, #1
 8005546:	fa02 f303 	lsl.w	r3, r2, r3
 800554a:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800554c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8005550:	2300      	movs	r3, #0
 8005552:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8005556:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005558:	b113      	cbz	r3, 8005560 <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 800555a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800555c:	2000      	movs	r0, #0
 800555e:	e7e2      	b.n	8005526 <HAL_DMA_Abort_IT+0x12>
 8005560:	2000      	movs	r0, #0
 8005562:	e7e0      	b.n	8005526 <HAL_DMA_Abort_IT+0x12>

08005564 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005564:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005566:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005568:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800556a:	6804      	ldr	r4, [r0, #0]
 800556c:	6825      	ldr	r5, [r4, #0]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800556e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005570:	f003 031c 	and.w	r3, r3, #28
 8005574:	2204      	movs	r2, #4
 8005576:	409a      	lsls	r2, r3
 8005578:	420a      	tst	r2, r1
 800557a:	d015      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x44>
 800557c:	f015 0f04 	tst.w	r5, #4
 8005580:	d012      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x44>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005582:	6823      	ldr	r3, [r4, #0]
 8005584:	f013 0f20 	tst.w	r3, #32
 8005588:	d103      	bne.n	8005592 <HAL_DMA_IRQHandler+0x2e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800558a:	6823      	ldr	r3, [r4, #0]
 800558c:	f023 0304 	bic.w	r3, r3, #4
 8005590:	6023      	str	r3, [r4, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005592:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005594:	f003 021c 	and.w	r2, r3, #28
 8005598:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800559a:	2304      	movs	r3, #4
 800559c:	4093      	lsls	r3, r2
 800559e:	604b      	str	r3, [r1, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80055a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80055a2:	b103      	cbz	r3, 80055a6 <HAL_DMA_IRQHandler+0x42>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80055a4:	4798      	blx	r3
  else
  {
    /* Nothing To Do */
  }
  return;
}
 80055a6:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80055a8:	2202      	movs	r2, #2
 80055aa:	409a      	lsls	r2, r3
 80055ac:	420a      	tst	r2, r1
 80055ae:	d01c      	beq.n	80055ea <HAL_DMA_IRQHandler+0x86>
 80055b0:	f015 0f02 	tst.w	r5, #2
 80055b4:	d019      	beq.n	80055ea <HAL_DMA_IRQHandler+0x86>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	f013 0f20 	tst.w	r3, #32
 80055bc:	d106      	bne.n	80055cc <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	f023 030a 	bic.w	r3, r3, #10
 80055c4:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80055c6:	2301      	movs	r3, #1
 80055c8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80055cc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80055ce:	f003 021c 	and.w	r2, r3, #28
 80055d2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80055d4:	2302      	movs	r3, #2
 80055d6:	4093      	lsls	r3, r2
 80055d8:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 80055da:	2300      	movs	r3, #0
 80055dc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 80055e0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0df      	beq.n	80055a6 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 80055e6:	4798      	blx	r3
 80055e8:	e7dd      	b.n	80055a6 <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80055ea:	2208      	movs	r2, #8
 80055ec:	fa02 f303 	lsl.w	r3, r2, r3
 80055f0:	420b      	tst	r3, r1
 80055f2:	d0d8      	beq.n	80055a6 <HAL_DMA_IRQHandler+0x42>
 80055f4:	f015 0f08 	tst.w	r5, #8
 80055f8:	d0d5      	beq.n	80055a6 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055fa:	6823      	ldr	r3, [r4, #0]
 80055fc:	f023 030e 	bic.w	r3, r3, #14
 8005600:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005602:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005604:	f003 031c 	and.w	r3, r3, #28
 8005608:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800560a:	2201      	movs	r2, #1
 800560c:	fa02 f303 	lsl.w	r3, r2, r3
 8005610:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005612:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8005614:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8005618:	2300      	movs	r3, #0
 800561a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 800561e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0c0      	beq.n	80055a6 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8005624:	4798      	blx	r3
  return;
 8005626:	e7be      	b.n	80055a6 <HAL_DMA_IRQHandler+0x42>

08005628 <HAL_DMA_GetState>:
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
 8005628:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
}
 800562c:	4770      	bx	lr
	...

08005630 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005630:	b570      	push	{r4, r5, r6, lr}
 8005632:	4604      	mov	r4, r0
 8005634:	4616      	mov	r6, r2
 8005636:	461d      	mov	r5, r3
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 8005638:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 800563c:	d315      	bcc.n	800566a <FLASH_Program_DoubleWord+0x3a>
 800563e:	4b1c      	ldr	r3, [pc, #112]	; (80056b0 <FLASH_Program_DoubleWord+0x80>)
 8005640:	881b      	ldrh	r3, [r3, #0]
 8005642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800564a:	d00b      	beq.n	8005664 <FLASH_Program_DoubleWord+0x34>
 800564c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005650:	d01c      	beq.n	800568c <FLASH_Program_DoubleWord+0x5c>
 8005652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005656:	d01d      	beq.n	8005694 <FLASH_Program_DoubleWord+0x64>
 8005658:	2b80      	cmp	r3, #128	; 0x80
 800565a:	d01f      	beq.n	800569c <FLASH_Program_DoubleWord+0x6c>
 800565c:	f1b0 6f01 	cmp.w	r0, #135266304	; 0x8100000
 8005660:	d30a      	bcc.n	8005678 <FLASH_Program_DoubleWord+0x48>
 8005662:	e002      	b.n	800566a <FLASH_Program_DoubleWord+0x3a>
 8005664:	f1b0 6f01 	cmp.w	r0, #135266304	; 0x8100000
 8005668:	d306      	bcc.n	8005678 <FLASH_Program_DoubleWord+0x48>
 800566a:	f104 4360 	add.w	r3, r4, #3758096384	; 0xe0000000
 800566e:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8005672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005676:	d215      	bcs.n	80056a4 <FLASH_Program_DoubleWord+0x74>

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005678:	4a0e      	ldr	r2, [pc, #56]	; (80056b4 <FLASH_Program_DoubleWord+0x84>)
 800567a:	6953      	ldr	r3, [r2, #20]
 800567c:	f043 0301 	orr.w	r3, r3, #1
 8005680:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005682:	6026      	str	r6, [r4, #0]
 8005684:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8005688:	6065      	str	r5, [r4, #4]
}
 800568a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 800568c:	4b0a      	ldr	r3, [pc, #40]	; (80056b8 <FLASH_Program_DoubleWord+0x88>)
 800568e:	4298      	cmp	r0, r3
 8005690:	d8eb      	bhi.n	800566a <FLASH_Program_DoubleWord+0x3a>
 8005692:	e7f1      	b.n	8005678 <FLASH_Program_DoubleWord+0x48>
 8005694:	4b09      	ldr	r3, [pc, #36]	; (80056bc <FLASH_Program_DoubleWord+0x8c>)
 8005696:	4298      	cmp	r0, r3
 8005698:	d8e7      	bhi.n	800566a <FLASH_Program_DoubleWord+0x3a>
 800569a:	e7ed      	b.n	8005678 <FLASH_Program_DoubleWord+0x48>
 800569c:	4b08      	ldr	r3, [pc, #32]	; (80056c0 <FLASH_Program_DoubleWord+0x90>)
 800569e:	4298      	cmp	r0, r3
 80056a0:	d8e3      	bhi.n	800566a <FLASH_Program_DoubleWord+0x3a>
 80056a2:	e7e9      	b.n	8005678 <FLASH_Program_DoubleWord+0x48>
 80056a4:	f240 21bb 	movw	r1, #699	; 0x2bb
 80056a8:	4806      	ldr	r0, [pc, #24]	; (80056c4 <FLASH_Program_DoubleWord+0x94>)
 80056aa:	f7fd f857 	bl	800275c <assert_failed>
 80056ae:	e7e3      	b.n	8005678 <FLASH_Program_DoubleWord+0x48>
 80056b0:	1fff75e0 	.word	0x1fff75e0
 80056b4:	40022000 	.word	0x40022000
 80056b8:	0807ffff 	.word	0x0807ffff
 80056bc:	0803ffff 	.word	0x0803ffff
 80056c0:	0801ffff 	.word	0x0801ffff
 80056c4:	0800b888 	.word	0x0800b888

080056c8 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80056c8:	b538      	push	{r3, r4, r5, lr}
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80056ca:	4605      	mov	r5, r0
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80056cc:	460c      	mov	r4, r1

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));
 80056ce:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 80056d2:	d315      	bcc.n	8005700 <FLASH_Program_Fast+0x38>
 80056d4:	4b1d      	ldr	r3, [pc, #116]	; (800574c <FLASH_Program_Fast+0x84>)
 80056d6:	881b      	ldrh	r3, [r3, #0]
 80056d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056e0:	d00b      	beq.n	80056fa <FLASH_Program_Fast+0x32>
 80056e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056e6:	d024      	beq.n	8005732 <FLASH_Program_Fast+0x6a>
 80056e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ec:	d025      	beq.n	800573a <FLASH_Program_Fast+0x72>
 80056ee:	2b80      	cmp	r3, #128	; 0x80
 80056f0:	d027      	beq.n	8005742 <FLASH_Program_Fast+0x7a>
 80056f2:	f1b0 6f01 	cmp.w	r0, #135266304	; 0x8100000
 80056f6:	d308      	bcc.n	800570a <FLASH_Program_Fast+0x42>
 80056f8:	e002      	b.n	8005700 <FLASH_Program_Fast+0x38>
 80056fa:	f1b0 6f01 	cmp.w	r0, #135266304	; 0x8100000
 80056fe:	d304      	bcc.n	800570a <FLASH_Program_Fast+0x42>
 8005700:	f240 21d9 	movw	r1, #729	; 0x2d9
 8005704:	4812      	ldr	r0, [pc, #72]	; (8005750 <FLASH_Program_Fast+0x88>)
 8005706:	f7fd f829 	bl	800275c <assert_failed>

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800570a:	4a12      	ldr	r2, [pc, #72]	; (8005754 <FLASH_Program_Fast+0x8c>)
 800570c:	6953      	ldr	r3, [r2, #20]
 800570e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005712:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005714:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005718:	b672      	cpsid	i
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800571a:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800571c:	f854 2b04 	ldr.w	r2, [r4], #4
 8005720:	f845 2b04 	str.w	r2, [r5], #4
    dest_addr++;
    src_addr++;
    row_index--;
 8005724:	3b01      	subs	r3, #1
  } while (row_index != 0U);
 8005726:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800572a:	d1f7      	bne.n	800571c <FLASH_Program_Fast+0x54>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572c:	f381 8810 	msr	PRIMASK, r1

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8005730:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));
 8005732:	4b09      	ldr	r3, [pc, #36]	; (8005758 <FLASH_Program_Fast+0x90>)
 8005734:	4298      	cmp	r0, r3
 8005736:	d8e3      	bhi.n	8005700 <FLASH_Program_Fast+0x38>
 8005738:	e7e7      	b.n	800570a <FLASH_Program_Fast+0x42>
 800573a:	4b08      	ldr	r3, [pc, #32]	; (800575c <FLASH_Program_Fast+0x94>)
 800573c:	4298      	cmp	r0, r3
 800573e:	d8df      	bhi.n	8005700 <FLASH_Program_Fast+0x38>
 8005740:	e7e3      	b.n	800570a <FLASH_Program_Fast+0x42>
 8005742:	4b07      	ldr	r3, [pc, #28]	; (8005760 <FLASH_Program_Fast+0x98>)
 8005744:	4298      	cmp	r0, r3
 8005746:	d8db      	bhi.n	8005700 <FLASH_Program_Fast+0x38>
 8005748:	e7df      	b.n	800570a <FLASH_Program_Fast+0x42>
 800574a:	bf00      	nop
 800574c:	1fff75e0 	.word	0x1fff75e0
 8005750:	0800b888 	.word	0x0800b888
 8005754:	40022000 	.word	0x40022000
 8005758:	0807ffff 	.word	0x0807ffff
 800575c:	0803ffff 	.word	0x0803ffff
 8005760:	0801ffff 	.word	0x0801ffff

08005764 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005764:	4b09      	ldr	r3, [pc, #36]	; (800578c <HAL_FLASH_Unlock+0x28>)
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	2b00      	cmp	r3, #0
 800576a:	db01      	blt.n	8005770 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800576c:	2000      	movs	r0, #0
 800576e:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005770:	4b06      	ldr	r3, [pc, #24]	; (800578c <HAL_FLASH_Unlock+0x28>)
 8005772:	4a07      	ldr	r2, [pc, #28]	; (8005790 <HAL_FLASH_Unlock+0x2c>)
 8005774:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005776:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800577a:	609a      	str	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	2b00      	cmp	r3, #0
 8005780:	db01      	blt.n	8005786 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8005782:	2000      	movs	r0, #0
 8005784:	4770      	bx	lr
      status = HAL_ERROR;
 8005786:	2001      	movs	r0, #1
}
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	40022000 	.word	0x40022000
 8005790:	45670123 	.word	0x45670123

08005794 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005794:	4a03      	ldr	r2, [pc, #12]	; (80057a4 <HAL_FLASH_Lock+0x10>)
 8005796:	6953      	ldr	r3, [r2, #20]
 8005798:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800579c:	6153      	str	r3, [r2, #20]
}
 800579e:	2000      	movs	r0, #0
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	40022000 	.word	0x40022000

080057a8 <FLASH_WaitForLastOperation>:
{
 80057a8:	b538      	push	{r3, r4, r5, lr}
 80057aa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80057ac:	f7fe ffa4 	bl	80046f8 <HAL_GetTick>
 80057b0:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80057b2:	4b14      	ldr	r3, [pc, #80]	; (8005804 <FLASH_WaitForLastOperation+0x5c>)
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80057ba:	d009      	beq.n	80057d0 <FLASH_WaitForLastOperation+0x28>
    if(Timeout != HAL_MAX_DELAY)
 80057bc:	f1b4 3fff 	cmp.w	r4, #4294967295
 80057c0:	d0f7      	beq.n	80057b2 <FLASH_WaitForLastOperation+0xa>
      if((HAL_GetTick() - tickstart) >= Timeout)
 80057c2:	f7fe ff99 	bl	80046f8 <HAL_GetTick>
 80057c6:	1b40      	subs	r0, r0, r5
 80057c8:	42a0      	cmp	r0, r4
 80057ca:	d3f2      	bcc.n	80057b2 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 80057cc:	2003      	movs	r0, #3
 80057ce:	e015      	b.n	80057fc <FLASH_WaitForLastOperation+0x54>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80057d0:	4b0c      	ldr	r3, [pc, #48]	; (8005804 <FLASH_WaitForLastOperation+0x5c>)
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	4a0c      	ldr	r2, [pc, #48]	; (8005808 <FLASH_WaitForLastOperation+0x60>)
  if(error != 0u)
 80057d6:	4013      	ands	r3, r2
 80057d8:	d109      	bne.n	80057ee <FLASH_WaitForLastOperation+0x46>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80057da:	4b0a      	ldr	r3, [pc, #40]	; (8005804 <FLASH_WaitForLastOperation+0x5c>)
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f013 0f01 	tst.w	r3, #1
 80057e2:	d00c      	beq.n	80057fe <FLASH_WaitForLastOperation+0x56>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80057e4:	4b07      	ldr	r3, [pc, #28]	; (8005804 <FLASH_WaitForLastOperation+0x5c>)
 80057e6:	2201      	movs	r2, #1
 80057e8:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 80057ea:	2000      	movs	r0, #0
 80057ec:	e006      	b.n	80057fc <FLASH_WaitForLastOperation+0x54>
    pFlash.ErrorCode |= error;
 80057ee:	4907      	ldr	r1, [pc, #28]	; (800580c <FLASH_WaitForLastOperation+0x64>)
 80057f0:	684a      	ldr	r2, [r1, #4]
 80057f2:	431a      	orrs	r2, r3
 80057f4:	604a      	str	r2, [r1, #4]
    __HAL_FLASH_CLEAR_FLAG(error);
 80057f6:	4a03      	ldr	r2, [pc, #12]	; (8005804 <FLASH_WaitForLastOperation+0x5c>)
 80057f8:	6113      	str	r3, [r2, #16]
    return HAL_ERROR;
 80057fa:	2001      	movs	r0, #1
}
 80057fc:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80057fe:	2000      	movs	r0, #0
 8005800:	e7fc      	b.n	80057fc <FLASH_WaitForLastOperation+0x54>
 8005802:	bf00      	nop
 8005804:	40022000 	.word	0x40022000
 8005808:	0002c3fa 	.word	0x0002c3fa
 800580c:	20001a40 	.word	0x20001a40

08005810 <HAL_FLASH_Program>:
{
 8005810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005814:	4617      	mov	r7, r2
  __HAL_LOCK(&pFlash);
 8005816:	4a2b      	ldr	r2, [pc, #172]	; (80058c4 <HAL_FLASH_Program+0xb4>)
 8005818:	7812      	ldrb	r2, [r2, #0]
 800581a:	2a01      	cmp	r2, #1
 800581c:	d050      	beq.n	80058c0 <HAL_FLASH_Program+0xb0>
 800581e:	4604      	mov	r4, r0
 8005820:	460e      	mov	r6, r1
 8005822:	4698      	mov	r8, r3
 8005824:	4b27      	ldr	r3, [pc, #156]	; (80058c4 <HAL_FLASH_Program+0xb4>)
 8005826:	2201      	movs	r2, #1
 8005828:	701a      	strb	r2, [r3, #0]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800582a:	2802      	cmp	r0, #2
 800582c:	d82d      	bhi.n	800588a <HAL_FLASH_Program+0x7a>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800582e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005832:	f7ff ffb9 	bl	80057a8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8005836:	4605      	mov	r5, r0
 8005838:	bb08      	cbnz	r0, 800587e <HAL_FLASH_Program+0x6e>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800583a:	4b22      	ldr	r3, [pc, #136]	; (80058c4 <HAL_FLASH_Program+0xb4>)
 800583c:	2200      	movs	r2, #0
 800583e:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005840:	4b21      	ldr	r3, [pc, #132]	; (80058c8 <HAL_FLASH_Program+0xb8>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005848:	d024      	beq.n	8005894 <HAL_FLASH_Program+0x84>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800584a:	4a1f      	ldr	r2, [pc, #124]	; (80058c8 <HAL_FLASH_Program+0xb8>)
 800584c:	6813      	ldr	r3, [r2, #0]
 800584e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005852:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005854:	4b1b      	ldr	r3, [pc, #108]	; (80058c4 <HAL_FLASH_Program+0xb4>)
 8005856:	2202      	movs	r2, #2
 8005858:	771a      	strb	r2, [r3, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800585a:	b1fc      	cbz	r4, 800589c <HAL_FLASH_Program+0x8c>
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800585c:	1e63      	subs	r3, r4, #1
 800585e:	2b01      	cmp	r3, #1
 8005860:	d923      	bls.n	80058aa <HAL_FLASH_Program+0x9a>
  uint32_t prog_bit = 0;
 8005862:	2400      	movs	r4, #0
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005864:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005868:	f7ff ff9e 	bl	80057a8 <FLASH_WaitForLastOperation>
 800586c:	4605      	mov	r5, r0
    if (prog_bit != 0U)
 800586e:	b124      	cbz	r4, 800587a <HAL_FLASH_Program+0x6a>
      CLEAR_BIT(FLASH->CR, prog_bit);
 8005870:	4a15      	ldr	r2, [pc, #84]	; (80058c8 <HAL_FLASH_Program+0xb8>)
 8005872:	6953      	ldr	r3, [r2, #20]
 8005874:	ea23 0404 	bic.w	r4, r3, r4
 8005878:	6154      	str	r4, [r2, #20]
    FLASH_FlushCaches();
 800587a:	f000 f87d 	bl	8005978 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800587e:	4b11      	ldr	r3, [pc, #68]	; (80058c4 <HAL_FLASH_Program+0xb4>)
 8005880:	2200      	movs	r2, #0
 8005882:	701a      	strb	r2, [r3, #0]
}
 8005884:	4628      	mov	r0, r5
 8005886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800588a:	21b2      	movs	r1, #178	; 0xb2
 800588c:	480f      	ldr	r0, [pc, #60]	; (80058cc <HAL_FLASH_Program+0xbc>)
 800588e:	f7fc ff65 	bl	800275c <assert_failed>
 8005892:	e7cc      	b.n	800582e <HAL_FLASH_Program+0x1e>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005894:	4b0b      	ldr	r3, [pc, #44]	; (80058c4 <HAL_FLASH_Program+0xb4>)
 8005896:	2200      	movs	r2, #0
 8005898:	771a      	strb	r2, [r3, #28]
 800589a:	e7de      	b.n	800585a <HAL_FLASH_Program+0x4a>
      FLASH_Program_DoubleWord(Address, Data);
 800589c:	463a      	mov	r2, r7
 800589e:	4643      	mov	r3, r8
 80058a0:	4630      	mov	r0, r6
 80058a2:	f7ff fec5 	bl	8005630 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80058a6:	2401      	movs	r4, #1
 80058a8:	e7dc      	b.n	8005864 <HAL_FLASH_Program+0x54>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80058aa:	4639      	mov	r1, r7
 80058ac:	4630      	mov	r0, r6
 80058ae:	f7ff ff0b 	bl	80056c8 <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80058b2:	2c02      	cmp	r4, #2
 80058b4:	d001      	beq.n	80058ba <HAL_FLASH_Program+0xaa>
  uint32_t prog_bit = 0;
 80058b6:	2400      	movs	r4, #0
 80058b8:	e7d4      	b.n	8005864 <HAL_FLASH_Program+0x54>
        prog_bit = FLASH_CR_FSTPG;
 80058ba:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 80058be:	e7d1      	b.n	8005864 <HAL_FLASH_Program+0x54>
  __HAL_LOCK(&pFlash);
 80058c0:	2502      	movs	r5, #2
 80058c2:	e7df      	b.n	8005884 <HAL_FLASH_Program+0x74>
 80058c4:	20001a40 	.word	0x20001a40
 80058c8:	40022000 	.word	0x40022000
 80058cc:	0800b888 	.word	0x0800b888

080058d0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80058d0:	b510      	push	{r4, lr}
 80058d2:	4604      	mov	r4, r0
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
#endif
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));
 80058d4:	2801      	cmp	r0, #1
 80058d6:	d10d      	bne.n	80058f4 <FLASH_MassErase+0x24>

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80058d8:	f014 0f01 	tst.w	r4, #1
 80058dc:	d004      	beq.n	80058e8 <FLASH_MassErase+0x18>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80058de:	4a08      	ldr	r2, [pc, #32]	; (8005900 <FLASH_MassErase+0x30>)
 80058e0:	6953      	ldr	r3, [r2, #20]
 80058e2:	f043 0304 	orr.w	r3, r3, #4
 80058e6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80058e8:	4a05      	ldr	r2, [pc, #20]	; (8005900 <FLASH_MassErase+0x30>)
 80058ea:	6953      	ldr	r3, [r2, #20]
 80058ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058f0:	6153      	str	r3, [r2, #20]
}
 80058f2:	bd10      	pop	{r4, pc}
    assert_param(IS_FLASH_BANK(Banks));
 80058f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80058f8:	4802      	ldr	r0, [pc, #8]	; (8005904 <FLASH_MassErase+0x34>)
 80058fa:	f7fc ff2f 	bl	800275c <assert_failed>
 80058fe:	e7eb      	b.n	80058d8 <FLASH_MassErase+0x8>
 8005900:	40022000 	.word	0x40022000
 8005904:	0800b8c4 	.word	0x0800b8c4

08005908 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8005908:	b510      	push	{r4, lr}
 800590a:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));
 800590c:	4b17      	ldr	r3, [pc, #92]	; (800596c <FLASH_PageErase+0x64>)
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005918:	d018      	beq.n	800594c <FLASH_PageErase+0x44>
 800591a:	2b80      	cmp	r3, #128	; 0x80
 800591c:	d01b      	beq.n	8005956 <FLASH_PageErase+0x4e>
 800591e:	287f      	cmp	r0, #127	; 0x7f
 8005920:	bf8c      	ite	hi
 8005922:	2300      	movhi	r3, #0
 8005924:	2301      	movls	r3, #1
 8005926:	b1db      	cbz	r3, 8005960 <FLASH_PageErase+0x58>
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8005928:	4b11      	ldr	r3, [pc, #68]	; (8005970 <FLASH_PageErase+0x68>)
 800592a:	695a      	ldr	r2, [r3, #20]
 800592c:	f422 727e 	bic.w	r2, r2, #1016	; 0x3f8
 8005930:	00e4      	lsls	r4, r4, #3
 8005932:	f404 64ff 	and.w	r4, r4, #2040	; 0x7f8
 8005936:	4314      	orrs	r4, r2
 8005938:	615c      	str	r4, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800593a:	695a      	ldr	r2, [r3, #20]
 800593c:	f042 0202 	orr.w	r2, r2, #2
 8005940:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005942:	695a      	ldr	r2, [r3, #20]
 8005944:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005948:	615a      	str	r2, [r3, #20]
}
 800594a:	bd10      	pop	{r4, pc}
  assert_param(IS_FLASH_PAGE(Page));
 800594c:	287f      	cmp	r0, #127	; 0x7f
 800594e:	bf8c      	ite	hi
 8005950:	2300      	movhi	r3, #0
 8005952:	2301      	movls	r3, #1
 8005954:	e7e7      	b.n	8005926 <FLASH_PageErase+0x1e>
 8005956:	283f      	cmp	r0, #63	; 0x3f
 8005958:	bf8c      	ite	hi
 800595a:	2300      	movhi	r3, #0
 800595c:	2301      	movls	r3, #1
 800595e:	e7e2      	b.n	8005926 <FLASH_PageErase+0x1e>
 8005960:	f240 212a 	movw	r1, #554	; 0x22a
 8005964:	4803      	ldr	r0, [pc, #12]	; (8005974 <FLASH_PageErase+0x6c>)
 8005966:	f7fc fef9 	bl	800275c <assert_failed>
 800596a:	e7dd      	b.n	8005928 <FLASH_PageErase+0x20>
 800596c:	1fff75e0 	.word	0x1fff75e0
 8005970:	40022000 	.word	0x40022000
 8005974:	0800b8c4 	.word	0x0800b8c4

08005978 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8005978:	4b16      	ldr	r3, [pc, #88]	; (80059d4 <FLASH_FlushCaches+0x5c>)
 800597a:	7f1b      	ldrb	r3, [r3, #28]
 800597c:	b2db      	uxtb	r3, r3

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800597e:	2b01      	cmp	r3, #1
 8005980:	d001      	beq.n	8005986 <FLASH_FlushCaches+0xe>
 8005982:	2b03      	cmp	r3, #3
 8005984:	d110      	bne.n	80059a8 <FLASH_FlushCaches+0x30>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005986:	4a14      	ldr	r2, [pc, #80]	; (80059d8 <FLASH_FlushCaches+0x60>)
 8005988:	6811      	ldr	r1, [r2, #0]
 800598a:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 800598e:	6011      	str	r1, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005990:	6811      	ldr	r1, [r2, #0]
 8005992:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005996:	6011      	str	r1, [r2, #0]
 8005998:	6811      	ldr	r1, [r2, #0]
 800599a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800599e:	6011      	str	r1, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80059a0:	6811      	ldr	r1, [r2, #0]
 80059a2:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80059a6:	6011      	str	r1, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80059a8:	3b02      	subs	r3, #2
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d903      	bls.n	80059b8 <FLASH_FlushCaches+0x40>
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80059b0:	4b08      	ldr	r3, [pc, #32]	; (80059d4 <FLASH_FlushCaches+0x5c>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	771a      	strb	r2, [r3, #28]
}
 80059b6:	4770      	bx	lr
    __HAL_FLASH_DATA_CACHE_RESET();
 80059b8:	4b07      	ldr	r3, [pc, #28]	; (80059d8 <FLASH_FlushCaches+0x60>)
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059c8:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	e7ed      	b.n	80059b0 <FLASH_FlushCaches+0x38>
 80059d4:	20001a40 	.word	0x20001a40
 80059d8:	40022000 	.word	0x40022000

080059dc <HAL_FLASHEx_Erase>:
{
 80059dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 80059de:	4b3d      	ldr	r3, [pc, #244]	; (8005ad4 <HAL_FLASHEx_Erase+0xf8>)
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d073      	beq.n	8005ace <HAL_FLASHEx_Erase+0xf2>
 80059e6:	4604      	mov	r4, r0
 80059e8:	460e      	mov	r6, r1
 80059ea:	4b3a      	ldr	r3, [pc, #232]	; (8005ad4 <HAL_FLASHEx_Erase+0xf8>)
 80059ec:	2201      	movs	r2, #1
 80059ee:	701a      	strb	r2, [r3, #0]
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 80059f0:	6803      	ldr	r3, [r0, #0]
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d83a      	bhi.n	8005a6c <HAL_FLASHEx_Erase+0x90>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80059f6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80059fa:	f7ff fed5 	bl	80057a8 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80059fe:	4607      	mov	r7, r0
 8005a00:	2800      	cmp	r0, #0
 8005a02:	d15f      	bne.n	8005ac4 <HAL_FLASHEx_Erase+0xe8>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005a04:	4b33      	ldr	r3, [pc, #204]	; (8005ad4 <HAL_FLASHEx_Erase+0xf8>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8005a0a:	4b33      	ldr	r3, [pc, #204]	; (8005ad8 <HAL_FLASHEx_Erase+0xfc>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005a12:	d034      	beq.n	8005a7e <HAL_FLASHEx_Erase+0xa2>
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005a14:	4b30      	ldr	r3, [pc, #192]	; (8005ad8 <HAL_FLASHEx_Erase+0xfc>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005a1c:	d02b      	beq.n	8005a76 <HAL_FLASHEx_Erase+0x9a>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8005a1e:	4a2e      	ldr	r2, [pc, #184]	; (8005ad8 <HAL_FLASHEx_Erase+0xfc>)
 8005a20:	6813      	ldr	r3, [r2, #0]
 8005a22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a26:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8005a28:	4b2a      	ldr	r3, [pc, #168]	; (8005ad4 <HAL_FLASHEx_Erase+0xf8>)
 8005a2a:	2203      	movs	r2, #3
 8005a2c:	771a      	strb	r2, [r3, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005a2e:	6823      	ldr	r3, [r4, #0]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d036      	beq.n	8005aa2 <HAL_FLASHEx_Erase+0xc6>
      *PageError = 0xFFFFFFFFU;
 8005a34:	f04f 33ff 	mov.w	r3, #4294967295
 8005a38:	6033      	str	r3, [r6, #0]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005a3a:	68a5      	ldr	r5, [r4, #8]
 8005a3c:	68a3      	ldr	r3, [r4, #8]
 8005a3e:	68e2      	ldr	r2, [r4, #12]
 8005a40:	4413      	add	r3, r2
 8005a42:	42ab      	cmp	r3, r5
 8005a44:	d93c      	bls.n	8005ac0 <HAL_FLASHEx_Erase+0xe4>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8005a46:	6861      	ldr	r1, [r4, #4]
 8005a48:	4628      	mov	r0, r5
 8005a4a:	f7ff ff5d 	bl	8005908 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a4e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005a52:	f7ff fea9 	bl	80057a8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005a56:	4a20      	ldr	r2, [pc, #128]	; (8005ad8 <HAL_FLASHEx_Erase+0xfc>)
 8005a58:	6953      	ldr	r3, [r2, #20]
 8005a5a:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8005a5e:	f023 0302 	bic.w	r3, r3, #2
 8005a62:	6153      	str	r3, [r2, #20]
        if (status != HAL_OK)
 8005a64:	4607      	mov	r7, r0
 8005a66:	bb50      	cbnz	r0, 8005abe <HAL_FLASHEx_Erase+0xe2>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005a68:	3501      	adds	r5, #1
 8005a6a:	e7e7      	b.n	8005a3c <HAL_FLASHEx_Erase+0x60>
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 8005a6c:	2186      	movs	r1, #134	; 0x86
 8005a6e:	481b      	ldr	r0, [pc, #108]	; (8005adc <HAL_FLASHEx_Erase+0x100>)
 8005a70:	f7fc fe74 	bl	800275c <assert_failed>
 8005a74:	e7bf      	b.n	80059f6 <HAL_FLASHEx_Erase+0x1a>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8005a76:	4b17      	ldr	r3, [pc, #92]	; (8005ad4 <HAL_FLASHEx_Erase+0xf8>)
 8005a78:	2201      	movs	r2, #1
 8005a7a:	771a      	strb	r2, [r3, #28]
 8005a7c:	e7d7      	b.n	8005a2e <HAL_FLASHEx_Erase+0x52>
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005a7e:	4b16      	ldr	r3, [pc, #88]	; (8005ad8 <HAL_FLASHEx_Erase+0xfc>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005a86:	d008      	beq.n	8005a9a <HAL_FLASHEx_Erase+0xbe>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005a88:	4a13      	ldr	r2, [pc, #76]	; (8005ad8 <HAL_FLASHEx_Erase+0xfc>)
 8005a8a:	6813      	ldr	r3, [r2, #0]
 8005a8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a90:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005a92:	4b10      	ldr	r3, [pc, #64]	; (8005ad4 <HAL_FLASHEx_Erase+0xf8>)
 8005a94:	2202      	movs	r2, #2
 8005a96:	771a      	strb	r2, [r3, #28]
 8005a98:	e7c9      	b.n	8005a2e <HAL_FLASHEx_Erase+0x52>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005a9a:	4b0e      	ldr	r3, [pc, #56]	; (8005ad4 <HAL_FLASHEx_Erase+0xf8>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	771a      	strb	r2, [r3, #28]
 8005aa0:	e7c5      	b.n	8005a2e <HAL_FLASHEx_Erase+0x52>
      FLASH_MassErase(pEraseInit->Banks);
 8005aa2:	6860      	ldr	r0, [r4, #4]
 8005aa4:	f7ff ff14 	bl	80058d0 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005aa8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005aac:	f7ff fe7c 	bl	80057a8 <FLASH_WaitForLastOperation>
 8005ab0:	4607      	mov	r7, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8005ab2:	4a09      	ldr	r2, [pc, #36]	; (8005ad8 <HAL_FLASHEx_Erase+0xfc>)
 8005ab4:	6953      	ldr	r3, [r2, #20]
 8005ab6:	f023 0304 	bic.w	r3, r3, #4
 8005aba:	6153      	str	r3, [r2, #20]
 8005abc:	e000      	b.n	8005ac0 <HAL_FLASHEx_Erase+0xe4>
          *PageError = page_index;
 8005abe:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();
 8005ac0:	f7ff ff5a 	bl	8005978 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8005ac4:	4b03      	ldr	r3, [pc, #12]	; (8005ad4 <HAL_FLASHEx_Erase+0xf8>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	701a      	strb	r2, [r3, #0]
}
 8005aca:	4638      	mov	r0, r7
 8005acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8005ace:	2702      	movs	r7, #2
 8005ad0:	e7fb      	b.n	8005aca <HAL_FLASHEx_Erase+0xee>
 8005ad2:	bf00      	nop
 8005ad4:	20001a40 	.word	0x20001a40
 8005ad8:	40022000 	.word	0x40022000
 8005adc:	0800b8c4 	.word	0x0800b8c4

08005ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae4:	b082      	sub	sp, #8
 8005ae6:	4680      	mov	r8, r0
 8005ae8:	460c      	mov	r4, r1
  uint32_t position = 0x00u;
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8005aea:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8005aee:	d016      	beq.n	8005b1e <HAL_GPIO_Init+0x3e>
 8005af0:	4ba3      	ldr	r3, [pc, #652]	; (8005d80 <HAL_GPIO_Init+0x2a0>)
 8005af2:	4298      	cmp	r0, r3
 8005af4:	d013      	beq.n	8005b1e <HAL_GPIO_Init+0x3e>
 8005af6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005afa:	4298      	cmp	r0, r3
 8005afc:	d00f      	beq.n	8005b1e <HAL_GPIO_Init+0x3e>
 8005afe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b02:	4298      	cmp	r0, r3
 8005b04:	d00b      	beq.n	8005b1e <HAL_GPIO_Init+0x3e>
 8005b06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b0a:	4298      	cmp	r0, r3
 8005b0c:	d007      	beq.n	8005b1e <HAL_GPIO_Init+0x3e>
 8005b0e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8005b12:	4298      	cmp	r0, r3
 8005b14:	d003      	beq.n	8005b1e <HAL_GPIO_Init+0x3e>
 8005b16:	21aa      	movs	r1, #170	; 0xaa
 8005b18:	489a      	ldr	r0, [pc, #616]	; (8005d84 <HAL_GPIO_Init+0x2a4>)
 8005b1a:	f7fc fe1f 	bl	800275c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	b112      	cbz	r2, 8005b2a <HAL_GPIO_Init+0x4a>
 8005b24:	0c1b      	lsrs	r3, r3, #16
 8005b26:	041b      	lsls	r3, r3, #16
 8005b28:	b11b      	cbz	r3, 8005b32 <HAL_GPIO_Init+0x52>
 8005b2a:	21ab      	movs	r1, #171	; 0xab
 8005b2c:	4895      	ldr	r0, [pc, #596]	; (8005d84 <HAL_GPIO_Init+0x2a4>)
 8005b2e:	f7fc fe15 	bl	800275c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005b32:	6863      	ldr	r3, [r4, #4]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d91b      	bls.n	8005b70 <HAL_GPIO_Init+0x90>
 8005b38:	2b11      	cmp	r3, #17
 8005b3a:	d019      	beq.n	8005b70 <HAL_GPIO_Init+0x90>
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d017      	beq.n	8005b70 <HAL_GPIO_Init+0x90>
 8005b40:	2b12      	cmp	r3, #18
 8005b42:	d015      	beq.n	8005b70 <HAL_GPIO_Init+0x90>
 8005b44:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8005b48:	d012      	beq.n	8005b70 <HAL_GPIO_Init+0x90>
 8005b4a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005b4e:	d00f      	beq.n	8005b70 <HAL_GPIO_Init+0x90>
 8005b50:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8005b54:	d00c      	beq.n	8005b70 <HAL_GPIO_Init+0x90>
 8005b56:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8005b5a:	d009      	beq.n	8005b70 <HAL_GPIO_Init+0x90>
 8005b5c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8005b60:	d006      	beq.n	8005b70 <HAL_GPIO_Init+0x90>
 8005b62:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8005b66:	d003      	beq.n	8005b70 <HAL_GPIO_Init+0x90>
 8005b68:	2b03      	cmp	r3, #3
 8005b6a:	d001      	beq.n	8005b70 <HAL_GPIO_Init+0x90>
 8005b6c:	2b0b      	cmp	r3, #11
 8005b6e:	d101      	bne.n	8005b74 <HAL_GPIO_Init+0x94>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005b70:	2500      	movs	r5, #0
 8005b72:	e093      	b.n	8005c9c <HAL_GPIO_Init+0x1bc>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005b74:	21ac      	movs	r1, #172	; 0xac
 8005b76:	4883      	ldr	r0, [pc, #524]	; (8005d84 <HAL_GPIO_Init+0x2a4>)
 8005b78:	f7fc fdf0 	bl	800275c <assert_failed>
 8005b7c:	e7f8      	b.n	8005b70 <HAL_GPIO_Init+0x90>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005b7e:	68e3      	ldr	r3, [r4, #12]
 8005b80:	2b03      	cmp	r3, #3
 8005b82:	d817      	bhi.n	8005bb4 <HAL_GPIO_Init+0xd4>
        temp = GPIOx->OSPEEDR;
 8005b84:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005b88:	0069      	lsls	r1, r5, #1
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	408b      	lsls	r3, r1
 8005b8e:	ea22 0203 	bic.w	r2, r2, r3
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005b92:	68e3      	ldr	r3, [r4, #12]
 8005b94:	408b      	lsls	r3, r1
 8005b96:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 8005b98:	f8c8 3008 	str.w	r3, [r8, #8]
        temp = GPIOx->OTYPER;
 8005b9c:	f8d8 2004 	ldr.w	r2, [r8, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ba0:	ea22 0207 	bic.w	r2, r2, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ba4:	6863      	ldr	r3, [r4, #4]
 8005ba6:	f3c3 1700 	ubfx	r7, r3, #4, #1
 8005baa:	40af      	lsls	r7, r5
 8005bac:	4317      	orrs	r7, r2
        GPIOx->OTYPER = temp;
 8005bae:	f8c8 7004 	str.w	r7, [r8, #4]
 8005bb2:	e082      	b.n	8005cba <HAL_GPIO_Init+0x1da>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005bb4:	21bb      	movs	r1, #187	; 0xbb
 8005bb6:	4873      	ldr	r0, [pc, #460]	; (8005d84 <HAL_GPIO_Init+0x2a4>)
 8005bb8:	f7fc fdd0 	bl	800275c <assert_failed>
 8005bbc:	e7e2      	b.n	8005b84 <HAL_GPIO_Init+0xa4>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8005bbe:	21dc      	movs	r1, #220	; 0xdc
 8005bc0:	4870      	ldr	r0, [pc, #448]	; (8005d84 <HAL_GPIO_Init+0x2a4>)
 8005bc2:	f7fc fdcb 	bl	800275c <assert_failed>
 8005bc6:	e081      	b.n	8005ccc <HAL_GPIO_Init+0x1ec>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8005bc8:	f1b8 4f90 	cmp.w	r8, #1207959552	; 0x48000000
 8005bcc:	d016      	beq.n	8005bfc <HAL_GPIO_Init+0x11c>
 8005bce:	4b6c      	ldr	r3, [pc, #432]	; (8005d80 <HAL_GPIO_Init+0x2a0>)
 8005bd0:	4598      	cmp	r8, r3
 8005bd2:	d013      	beq.n	8005bfc <HAL_GPIO_Init+0x11c>
 8005bd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bd8:	4598      	cmp	r8, r3
 8005bda:	d00f      	beq.n	8005bfc <HAL_GPIO_Init+0x11c>
 8005bdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005be0:	4598      	cmp	r8, r3
 8005be2:	d00b      	beq.n	8005bfc <HAL_GPIO_Init+0x11c>
 8005be4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005be8:	4598      	cmp	r8, r3
 8005bea:	d007      	beq.n	8005bfc <HAL_GPIO_Init+0x11c>
 8005bec:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8005bf0:	4598      	cmp	r8, r3
 8005bf2:	d003      	beq.n	8005bfc <HAL_GPIO_Init+0x11c>
 8005bf4:	21e8      	movs	r1, #232	; 0xe8
 8005bf6:	4863      	ldr	r0, [pc, #396]	; (8005d84 <HAL_GPIO_Init+0x2a4>)
 8005bf8:	f7fc fdb0 	bl	800275c <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8005bfc:	6923      	ldr	r3, [r4, #16]
 8005bfe:	2b0f      	cmp	r3, #15
 8005c00:	d810      	bhi.n	8005c24 <HAL_GPIO_Init+0x144>
        temp = GPIOx->AFR[position >> 3u];
 8005c02:	08ea      	lsrs	r2, r5, #3
 8005c04:	3208      	adds	r2, #8
 8005c06:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005c0a:	f005 0307 	and.w	r3, r5, #7
 8005c0e:	0099      	lsls	r1, r3, #2
 8005c10:	230f      	movs	r3, #15
 8005c12:	408b      	lsls	r3, r1
 8005c14:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005c18:	6923      	ldr	r3, [r4, #16]
 8005c1a:	408b      	lsls	r3, r1
 8005c1c:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3u] = temp;
 8005c1e:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
 8005c22:	e065      	b.n	8005cf0 <HAL_GPIO_Init+0x210>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8005c24:	21e9      	movs	r1, #233	; 0xe9
 8005c26:	4857      	ldr	r0, [pc, #348]	; (8005d84 <HAL_GPIO_Init+0x2a4>)
 8005c28:	f7fc fd98 	bl	800275c <assert_failed>
 8005c2c:	e7e9      	b.n	8005c02 <HAL_GPIO_Init+0x122>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005c2e:	2304      	movs	r3, #4
 8005c30:	e000      	b.n	8005c34 <HAL_GPIO_Init+0x154>
 8005c32:	2300      	movs	r3, #0
 8005c34:	408b      	lsls	r3, r1
 8005c36:	4303      	orrs	r3, r0
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005c38:	3202      	adds	r2, #2
 8005c3a:	4953      	ldr	r1, [pc, #332]	; (8005d88 <HAL_GPIO_Init+0x2a8>)
 8005c3c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c40:	4b52      	ldr	r3, [pc, #328]	; (8005d8c <HAL_GPIO_Init+0x2ac>)
 8005c42:	689a      	ldr	r2, [r3, #8]
        temp &= ~(iocurrent);
 8005c44:	43f3      	mvns	r3, r6
 8005c46:	ea22 0106 	bic.w	r1, r2, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005c4a:	6860      	ldr	r0, [r4, #4]
 8005c4c:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8005c50:	d001      	beq.n	8005c56 <HAL_GPIO_Init+0x176>
        {
          temp |= iocurrent;
 8005c52:	ea46 0102 	orr.w	r1, r6, r2
        }
        EXTI->RTSR1 = temp;
 8005c56:	4a4d      	ldr	r2, [pc, #308]	; (8005d8c <HAL_GPIO_Init+0x2ac>)
 8005c58:	6091      	str	r1, [r2, #8]

        temp = EXTI->FTSR1;
 8005c5a:	68d2      	ldr	r2, [r2, #12]
        temp &= ~(iocurrent);
 8005c5c:	ea03 0102 	and.w	r1, r3, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005c60:	6860      	ldr	r0, [r4, #4]
 8005c62:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8005c66:	d001      	beq.n	8005c6c <HAL_GPIO_Init+0x18c>
        {
          temp |= iocurrent;
 8005c68:	ea46 0102 	orr.w	r1, r6, r2
        }
        EXTI->FTSR1 = temp;
 8005c6c:	4a47      	ldr	r2, [pc, #284]	; (8005d8c <HAL_GPIO_Init+0x2ac>)
 8005c6e:	60d1      	str	r1, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005c70:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 8005c72:	ea03 0102 	and.w	r1, r3, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005c76:	6860      	ldr	r0, [r4, #4]
 8005c78:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 8005c7c:	d001      	beq.n	8005c82 <HAL_GPIO_Init+0x1a2>
        {
          temp |= iocurrent;
 8005c7e:	ea46 0102 	orr.w	r1, r6, r2
        }
        EXTI->EMR1 = temp;
 8005c82:	4a42      	ldr	r2, [pc, #264]	; (8005d8c <HAL_GPIO_Init+0x2ac>)
 8005c84:	6051      	str	r1, [r2, #4]

        temp = EXTI->IMR1;
 8005c86:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
 8005c88:	4013      	ands	r3, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005c8a:	6861      	ldr	r1, [r4, #4]
 8005c8c:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8005c90:	d001      	beq.n	8005c96 <HAL_GPIO_Init+0x1b6>
        {
          temp |= iocurrent;
 8005c92:	ea46 0302 	orr.w	r3, r6, r2
        }
        EXTI->IMR1 = temp;
 8005c96:	4a3d      	ldr	r2, [pc, #244]	; (8005d8c <HAL_GPIO_Init+0x2ac>)
 8005c98:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005c9a:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c9c:	6826      	ldr	r6, [r4, #0]
 8005c9e:	fa36 f305 	lsrs.w	r3, r6, r5
 8005ca2:	d069      	beq.n	8005d78 <HAL_GPIO_Init+0x298>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005ca4:	2701      	movs	r7, #1
 8005ca6:	40af      	lsls	r7, r5
    if (iocurrent != 0x00u)
 8005ca8:	403e      	ands	r6, r7
 8005caa:	d0f6      	beq.n	8005c9a <HAL_GPIO_Init+0x1ba>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005cac:	6863      	ldr	r3, [r4, #4]
 8005cae:	f003 0303 	and.w	r3, r3, #3
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	f67f af62 	bls.w	8005b7e <HAL_GPIO_Init+0x9e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cba:	6863      	ldr	r3, [r4, #4]
 8005cbc:	f003 0303 	and.w	r3, r3, #3
 8005cc0:	2b03      	cmp	r3, #3
 8005cc2:	d00f      	beq.n	8005ce4 <HAL_GPIO_Init+0x204>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8005cc4:	68a3      	ldr	r3, [r4, #8]
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	f63f af79 	bhi.w	8005bbe <HAL_GPIO_Init+0xde>
        temp = GPIOx->PUPDR;
 8005ccc:	f8d8 200c 	ldr.w	r2, [r8, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005cd0:	0069      	lsls	r1, r5, #1
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	408b      	lsls	r3, r1
 8005cd6:	ea22 0203 	bic.w	r2, r2, r3
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cda:	68a3      	ldr	r3, [r4, #8]
 8005cdc:	408b      	lsls	r3, r1
 8005cde:	4313      	orrs	r3, r2
        GPIOx->PUPDR = temp;
 8005ce0:	f8c8 300c 	str.w	r3, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ce4:	6863      	ldr	r3, [r4, #4]
 8005ce6:	f003 0303 	and.w	r3, r3, #3
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	f43f af6c 	beq.w	8005bc8 <HAL_GPIO_Init+0xe8>
      temp = GPIOx->MODER;
 8005cf0:	f8d8 2000 	ldr.w	r2, [r8]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005cf4:	0069      	lsls	r1, r5, #1
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	408b      	lsls	r3, r1
 8005cfa:	ea22 0203 	bic.w	r2, r2, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005cfe:	6863      	ldr	r3, [r4, #4]
 8005d00:	f003 0303 	and.w	r3, r3, #3
 8005d04:	408b      	lsls	r3, r1
 8005d06:	4313      	orrs	r3, r2
      GPIOx->MODER = temp;
 8005d08:	f8c8 3000 	str.w	r3, [r8]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005d0c:	6863      	ldr	r3, [r4, #4]
 8005d0e:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8005d12:	d0c2      	beq.n	8005c9a <HAL_GPIO_Init+0x1ba>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d14:	4b1e      	ldr	r3, [pc, #120]	; (8005d90 <HAL_GPIO_Init+0x2b0>)
 8005d16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005d18:	f042 0201 	orr.w	r2, r2, #1
 8005d1c:	661a      	str	r2, [r3, #96]	; 0x60
 8005d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	9301      	str	r3, [sp, #4]
 8005d26:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8005d28:	08aa      	lsrs	r2, r5, #2
 8005d2a:	1c91      	adds	r1, r2, #2
 8005d2c:	4b16      	ldr	r3, [pc, #88]	; (8005d88 <HAL_GPIO_Init+0x2a8>)
 8005d2e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005d32:	f005 0303 	and.w	r3, r5, #3
 8005d36:	0099      	lsls	r1, r3, #2
 8005d38:	230f      	movs	r3, #15
 8005d3a:	408b      	lsls	r3, r1
 8005d3c:	ea20 0003 	bic.w	r0, r0, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005d40:	f1b8 4f90 	cmp.w	r8, #1207959552	; 0x48000000
 8005d44:	f43f af75 	beq.w	8005c32 <HAL_GPIO_Init+0x152>
 8005d48:	4b0d      	ldr	r3, [pc, #52]	; (8005d80 <HAL_GPIO_Init+0x2a0>)
 8005d4a:	4598      	cmp	r8, r3
 8005d4c:	d00e      	beq.n	8005d6c <HAL_GPIO_Init+0x28c>
 8005d4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d52:	4598      	cmp	r8, r3
 8005d54:	d00c      	beq.n	8005d70 <HAL_GPIO_Init+0x290>
 8005d56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d5a:	4598      	cmp	r8, r3
 8005d5c:	d00a      	beq.n	8005d74 <HAL_GPIO_Init+0x294>
 8005d5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d62:	4598      	cmp	r8, r3
 8005d64:	f43f af63 	beq.w	8005c2e <HAL_GPIO_Init+0x14e>
 8005d68:	2307      	movs	r3, #7
 8005d6a:	e763      	b.n	8005c34 <HAL_GPIO_Init+0x154>
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e761      	b.n	8005c34 <HAL_GPIO_Init+0x154>
 8005d70:	2302      	movs	r3, #2
 8005d72:	e75f      	b.n	8005c34 <HAL_GPIO_Init+0x154>
 8005d74:	2303      	movs	r3, #3
 8005d76:	e75d      	b.n	8005c34 <HAL_GPIO_Init+0x154>
  }
}
 8005d78:	b002      	add	sp, #8
 8005d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d7e:	bf00      	nop
 8005d80:	48000400 	.word	0x48000400
 8005d84:	0800b904 	.word	0x0800b904
 8005d88:	40010000 	.word	0x40010000
 8005d8c:	40010400 	.word	0x40010400
 8005d90:	40021000 	.word	0x40021000

08005d94 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d96:	4604      	mov	r4, r0
 8005d98:	460d      	mov	r5, r1
  uint32_t position = 0x00u;
  uint32_t iocurrent;
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8005d9a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8005d9e:	d017      	beq.n	8005dd0 <HAL_GPIO_DeInit+0x3c>
 8005da0:	4b4d      	ldr	r3, [pc, #308]	; (8005ed8 <HAL_GPIO_DeInit+0x144>)
 8005da2:	4298      	cmp	r0, r3
 8005da4:	d014      	beq.n	8005dd0 <HAL_GPIO_DeInit+0x3c>
 8005da6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005daa:	4298      	cmp	r0, r3
 8005dac:	d010      	beq.n	8005dd0 <HAL_GPIO_DeInit+0x3c>
 8005dae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005db2:	4298      	cmp	r0, r3
 8005db4:	d00c      	beq.n	8005dd0 <HAL_GPIO_DeInit+0x3c>
 8005db6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dba:	4298      	cmp	r0, r3
 8005dbc:	d008      	beq.n	8005dd0 <HAL_GPIO_DeInit+0x3c>
 8005dbe:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8005dc2:	4298      	cmp	r0, r3
 8005dc4:	d004      	beq.n	8005dd0 <HAL_GPIO_DeInit+0x3c>
 8005dc6:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8005dca:	4844      	ldr	r0, [pc, #272]	; (8005edc <HAL_GPIO_DeInit+0x148>)
 8005dcc:	f7fc fcc6 	bl	800275c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005dd0:	b2ab      	uxth	r3, r5
 8005dd2:	b113      	cbz	r3, 8005dda <HAL_GPIO_DeInit+0x46>
 8005dd4:	0c2b      	lsrs	r3, r5, #16
 8005dd6:	041b      	lsls	r3, r3, #16
 8005dd8:	b123      	cbz	r3, 8005de4 <HAL_GPIO_DeInit+0x50>
 8005dda:	f240 113b 	movw	r1, #315	; 0x13b
 8005dde:	483f      	ldr	r0, [pc, #252]	; (8005edc <HAL_GPIO_DeInit+0x148>)
 8005de0:	f7fc fcbc 	bl	800275c <assert_failed>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005de4:	2300      	movs	r3, #0
 8005de6:	e02a      	b.n	8005e3e <HAL_GPIO_DeInit+0xaa>
 8005de8:	2604      	movs	r6, #4
 8005dea:	e000      	b.n	8005dee <HAL_GPIO_DeInit+0x5a>
 8005dec:	2600      	movs	r6, #0
 8005dee:	fa06 f101 	lsl.w	r1, r6, r1
 8005df2:	4281      	cmp	r1, r0
 8005df4:	d053      	beq.n	8005e9e <HAL_GPIO_DeInit+0x10a>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005df6:	6820      	ldr	r0, [r4, #0]
 8005df8:	0059      	lsls	r1, r3, #1
 8005dfa:	2603      	movs	r6, #3
 8005dfc:	fa06 f101 	lsl.w	r1, r6, r1
 8005e00:	4308      	orrs	r0, r1
 8005e02:	6020      	str	r0, [r4, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005e04:	fa23 f006 	lsr.w	r0, r3, r6
 8005e08:	3008      	adds	r0, #8
 8005e0a:	f854 6020 	ldr.w	r6, [r4, r0, lsl #2]
 8005e0e:	f003 0707 	and.w	r7, r3, #7
 8005e12:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8005e16:	270f      	movs	r7, #15
 8005e18:	fa07 f70c 	lsl.w	r7, r7, ip
 8005e1c:	ea26 0607 	bic.w	r6, r6, r7
 8005e20:	f844 6020 	str.w	r6, [r4, r0, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005e24:	68a0      	ldr	r0, [r4, #8]
 8005e26:	ea20 0001 	bic.w	r0, r0, r1
 8005e2a:	60a0      	str	r0, [r4, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e2c:	6860      	ldr	r0, [r4, #4]
 8005e2e:	ea20 0202 	bic.w	r2, r0, r2
 8005e32:	6062      	str	r2, [r4, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005e34:	68e2      	ldr	r2, [r4, #12]
 8005e36:	ea22 0101 	bic.w	r1, r2, r1
 8005e3a:	60e1      	str	r1, [r4, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005e3c:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8005e3e:	fa35 f203 	lsrs.w	r2, r5, r3
 8005e42:	d047      	beq.n	8005ed4 <HAL_GPIO_DeInit+0x140>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005e44:	2201      	movs	r2, #1
 8005e46:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8005e48:	ea12 0e05 	ands.w	lr, r2, r5
 8005e4c:	d0f6      	beq.n	8005e3c <HAL_GPIO_DeInit+0xa8>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8005e4e:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8005e52:	f10c 0002 	add.w	r0, ip, #2
 8005e56:	4922      	ldr	r1, [pc, #136]	; (8005ee0 <HAL_GPIO_DeInit+0x14c>)
 8005e58:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005e5c:	f003 0103 	and.w	r1, r3, #3
 8005e60:	0089      	lsls	r1, r1, #2
 8005e62:	260f      	movs	r6, #15
 8005e64:	fa06 f701 	lsl.w	r7, r6, r1
 8005e68:	4038      	ands	r0, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005e6a:	f1b4 4f90 	cmp.w	r4, #1207959552	; 0x48000000
 8005e6e:	d0bd      	beq.n	8005dec <HAL_GPIO_DeInit+0x58>
 8005e70:	4e19      	ldr	r6, [pc, #100]	; (8005ed8 <HAL_GPIO_DeInit+0x144>)
 8005e72:	42b4      	cmp	r4, r6
 8005e74:	d00d      	beq.n	8005e92 <HAL_GPIO_DeInit+0xfe>
 8005e76:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005e7a:	42b4      	cmp	r4, r6
 8005e7c:	d00b      	beq.n	8005e96 <HAL_GPIO_DeInit+0x102>
 8005e7e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005e82:	42b4      	cmp	r4, r6
 8005e84:	d009      	beq.n	8005e9a <HAL_GPIO_DeInit+0x106>
 8005e86:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005e8a:	42b4      	cmp	r4, r6
 8005e8c:	d0ac      	beq.n	8005de8 <HAL_GPIO_DeInit+0x54>
 8005e8e:	2607      	movs	r6, #7
 8005e90:	e7ad      	b.n	8005dee <HAL_GPIO_DeInit+0x5a>
 8005e92:	2601      	movs	r6, #1
 8005e94:	e7ab      	b.n	8005dee <HAL_GPIO_DeInit+0x5a>
 8005e96:	2602      	movs	r6, #2
 8005e98:	e7a9      	b.n	8005dee <HAL_GPIO_DeInit+0x5a>
 8005e9a:	2603      	movs	r6, #3
 8005e9c:	e7a7      	b.n	8005dee <HAL_GPIO_DeInit+0x5a>
        EXTI->IMR1 &= ~(iocurrent);
 8005e9e:	4911      	ldr	r1, [pc, #68]	; (8005ee4 <HAL_GPIO_DeInit+0x150>)
 8005ea0:	6808      	ldr	r0, [r1, #0]
 8005ea2:	ea20 000e 	bic.w	r0, r0, lr
 8005ea6:	6008      	str	r0, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005ea8:	6848      	ldr	r0, [r1, #4]
 8005eaa:	ea20 000e 	bic.w	r0, r0, lr
 8005eae:	6048      	str	r0, [r1, #4]
        EXTI->FTSR1 &= ~(iocurrent);
 8005eb0:	68c8      	ldr	r0, [r1, #12]
 8005eb2:	ea20 000e 	bic.w	r0, r0, lr
 8005eb6:	60c8      	str	r0, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8005eb8:	6888      	ldr	r0, [r1, #8]
 8005eba:	ea20 000e 	bic.w	r0, r0, lr
 8005ebe:	6088      	str	r0, [r1, #8]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005ec0:	4807      	ldr	r0, [pc, #28]	; (8005ee0 <HAL_GPIO_DeInit+0x14c>)
 8005ec2:	f10c 0102 	add.w	r1, ip, #2
 8005ec6:	f850 6021 	ldr.w	r6, [r0, r1, lsl #2]
 8005eca:	ea26 0607 	bic.w	r6, r6, r7
 8005ece:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
 8005ed2:	e790      	b.n	8005df6 <HAL_GPIO_DeInit+0x62>
  }
}
 8005ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	48000400 	.word	0x48000400
 8005edc:	0800b904 	.word	0x0800b904
 8005ee0:	40010000 	.word	0x40010000
 8005ee4:	40010400 	.word	0x40010400

08005ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ee8:	b570      	push	{r4, r5, r6, lr}
 8005eea:	4605      	mov	r5, r0
 8005eec:	4614      	mov	r4, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005eee:	460e      	mov	r6, r1
 8005ef0:	b121      	cbz	r1, 8005efc <HAL_GPIO_WritePin+0x14>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8005ef2:	2c01      	cmp	r4, #1
 8005ef4:	d808      	bhi.n	8005f08 <HAL_GPIO_WritePin+0x20>

  if(PinState != GPIO_PIN_RESET)
 8005ef6:	b16c      	cbz	r4, 8005f14 <HAL_GPIO_WritePin+0x2c>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005ef8:	61ae      	str	r6, [r5, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005efa:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005efc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005f00:	4805      	ldr	r0, [pc, #20]	; (8005f18 <HAL_GPIO_WritePin+0x30>)
 8005f02:	f7fc fc2b 	bl	800275c <assert_failed>
 8005f06:	e7f4      	b.n	8005ef2 <HAL_GPIO_WritePin+0xa>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8005f08:	f240 11af 	movw	r1, #431	; 0x1af
 8005f0c:	4802      	ldr	r0, [pc, #8]	; (8005f18 <HAL_GPIO_WritePin+0x30>)
 8005f0e:	f7fc fc25 	bl	800275c <assert_failed>
 8005f12:	e7f0      	b.n	8005ef6 <HAL_GPIO_WritePin+0xe>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f14:	62ae      	str	r6, [r5, #40]	; 0x28
}
 8005f16:	e7f0      	b.n	8005efa <HAL_GPIO_WritePin+0x12>
 8005f18:	0800b904 	.word	0x0800b904

08005f1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f1c:	b538      	push	{r3, r4, r5, lr}
 8005f1e:	4605      	mov	r5, r0
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005f20:	460c      	mov	r4, r1
 8005f22:	b141      	cbz	r1, 8005f36 <HAL_GPIO_TogglePin+0x1a>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005f24:	696b      	ldr	r3, [r5, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005f26:	ea04 0203 	and.w	r2, r4, r3
 8005f2a:	ea24 0403 	bic.w	r4, r4, r3
 8005f2e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005f32:	61ac      	str	r4, [r5, #24]
}
 8005f34:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005f36:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8005f3a:	4802      	ldr	r0, [pc, #8]	; (8005f44 <HAL_GPIO_TogglePin+0x28>)
 8005f3c:	f7fc fc0e 	bl	800275c <assert_failed>
 8005f40:	e7f0      	b.n	8005f24 <HAL_GPIO_TogglePin+0x8>
 8005f42:	bf00      	nop
 8005f44:	0800b904 	.word	0x0800b904

08005f48 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005f48:	6803      	ldr	r3, [r0, #0]
 8005f4a:	699a      	ldr	r2, [r3, #24]
 8005f4c:	f012 0f02 	tst.w	r2, #2
 8005f50:	d001      	beq.n	8005f56 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005f52:	2200      	movs	r2, #0
 8005f54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f56:	6803      	ldr	r3, [r0, #0]
 8005f58:	699a      	ldr	r2, [r3, #24]
 8005f5a:	f012 0f01 	tst.w	r2, #1
 8005f5e:	d103      	bne.n	8005f68 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005f60:	699a      	ldr	r2, [r3, #24]
 8005f62:	f042 0201 	orr.w	r2, r2, #1
 8005f66:	619a      	str	r2, [r3, #24]
  }
}
 8005f68:	4770      	bx	lr

08005f6a <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005f6a:	f011 0f01 	tst.w	r1, #1
 8005f6e:	d009      	beq.n	8005f84 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f70:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005f74:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f78:	2b28      	cmp	r3, #40	; 0x28
 8005f7a:	d001      	beq.n	8005f80 <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005f7c:	23f2      	movs	r3, #242	; 0xf2
 8005f7e:	e002      	b.n	8005f86 <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005f80:	2342      	movs	r3, #66	; 0x42
 8005f82:	e000      	b.n	8005f86 <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 8005f84:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005f86:	f011 0f02 	tst.w	r1, #2
 8005f8a:	d029      	beq.n	8005fe0 <I2C_Disable_IRQ+0x76>
{
 8005f8c:	b410      	push	{r4}
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005f8e:	f043 0444 	orr.w	r4, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f92:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005f96:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8005f9a:	2a28      	cmp	r2, #40	; 0x28
 8005f9c:	d012      	beq.n	8005fc4 <I2C_Disable_IRQ+0x5a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005f9e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005fa2:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8005fa6:	d10f      	bne.n	8005fc8 <I2C_Disable_IRQ+0x5e>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005fa8:	2910      	cmp	r1, #16
 8005faa:	d010      	beq.n	8005fce <I2C_Disable_IRQ+0x64>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005fac:	2920      	cmp	r1, #32
 8005fae:	d011      	beq.n	8005fd4 <I2C_Disable_IRQ+0x6a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005fb0:	2940      	cmp	r1, #64	; 0x40
 8005fb2:	d012      	beq.n	8005fda <I2C_Disable_IRQ+0x70>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005fb4:	6801      	ldr	r1, [r0, #0]
 8005fb6:	680a      	ldr	r2, [r1, #0]
 8005fb8:	ea22 0303 	bic.w	r3, r2, r3
 8005fbc:	600b      	str	r3, [r1, #0]
}
 8005fbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fc2:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005fc4:	4623      	mov	r3, r4
 8005fc6:	e7ec      	b.n	8005fa2 <I2C_Disable_IRQ+0x38>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005fc8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005fcc:	e7ec      	b.n	8005fa8 <I2C_Disable_IRQ+0x3e>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005fce:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005fd2:	e7eb      	b.n	8005fac <I2C_Disable_IRQ+0x42>
    tmpisr |= I2C_IT_STOPI;
 8005fd4:	f043 0320 	orr.w	r3, r3, #32
 8005fd8:	e7ea      	b.n	8005fb0 <I2C_Disable_IRQ+0x46>
    tmpisr |= I2C_IT_TCI;
 8005fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fde:	e7e9      	b.n	8005fb4 <I2C_Disable_IRQ+0x4a>
  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005fe0:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8005fe4:	d10b      	bne.n	8005ffe <I2C_Disable_IRQ+0x94>
  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005fe6:	2910      	cmp	r1, #16
 8005fe8:	d00c      	beq.n	8006004 <I2C_Disable_IRQ+0x9a>
  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005fea:	2920      	cmp	r1, #32
 8005fec:	d00d      	beq.n	800600a <I2C_Disable_IRQ+0xa0>
  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005fee:	2940      	cmp	r1, #64	; 0x40
 8005ff0:	d00e      	beq.n	8006010 <I2C_Disable_IRQ+0xa6>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005ff2:	6801      	ldr	r1, [r0, #0]
 8005ff4:	680a      	ldr	r2, [r1, #0]
 8005ff6:	ea22 0303 	bic.w	r3, r2, r3
 8005ffa:	600b      	str	r3, [r1, #0]
 8005ffc:	4770      	bx	lr
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ffe:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006002:	e7f0      	b.n	8005fe6 <I2C_Disable_IRQ+0x7c>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006004:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006008:	e7ef      	b.n	8005fea <I2C_Disable_IRQ+0x80>
    tmpisr |= I2C_IT_STOPI;
 800600a:	f043 0320 	orr.w	r3, r3, #32
 800600e:	e7ee      	b.n	8005fee <I2C_Disable_IRQ+0x84>
    tmpisr |= I2C_IT_TCI;
 8006010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006014:	e7ed      	b.n	8005ff2 <I2C_Disable_IRQ+0x88>
	...

08006018 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8006018:	2800      	cmp	r0, #0
 800601a:	f000 80b3 	beq.w	8006184 <HAL_I2C_Init+0x16c>
{
 800601e:	b510      	push	{r4, lr}
 8006020:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006022:	6803      	ldr	r3, [r0, #0]
 8006024:	4a58      	ldr	r2, [pc, #352]	; (8006188 <HAL_I2C_Init+0x170>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d00c      	beq.n	8006044 <HAL_I2C_Init+0x2c>
 800602a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800602e:	4293      	cmp	r3, r2
 8006030:	d008      	beq.n	8006044 <HAL_I2C_Init+0x2c>
 8006032:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006036:	4293      	cmp	r3, r2
 8006038:	d004      	beq.n	8006044 <HAL_I2C_Init+0x2c>
 800603a:	f240 2115 	movw	r1, #533	; 0x215
 800603e:	4853      	ldr	r0, [pc, #332]	; (800618c <HAL_I2C_Init+0x174>)
 8006040:	f7fc fb8c 	bl	800275c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8006044:	68a3      	ldr	r3, [r4, #8]
 8006046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800604a:	d260      	bcs.n	800610e <HAL_I2C_Init+0xf6>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800604c:	68e3      	ldr	r3, [r4, #12]
 800604e:	3b01      	subs	r3, #1
 8006050:	2b01      	cmp	r3, #1
 8006052:	d862      	bhi.n	800611a <HAL_I2C_Init+0x102>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8006054:	6923      	ldr	r3, [r4, #16]
 8006056:	b113      	cbz	r3, 800605e <HAL_I2C_Init+0x46>
 8006058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800605c:	d163      	bne.n	8006126 <HAL_I2C_Init+0x10e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800605e:	6963      	ldr	r3, [r4, #20]
 8006060:	2bff      	cmp	r3, #255	; 0xff
 8006062:	d866      	bhi.n	8006132 <HAL_I2C_Init+0x11a>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8006064:	69a3      	ldr	r3, [r4, #24]
 8006066:	2b07      	cmp	r3, #7
 8006068:	d869      	bhi.n	800613e <HAL_I2C_Init+0x126>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800606a:	69e3      	ldr	r3, [r4, #28]
 800606c:	b113      	cbz	r3, 8006074 <HAL_I2C_Init+0x5c>
 800606e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006072:	d16a      	bne.n	800614a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8006074:	6a23      	ldr	r3, [r4, #32]
 8006076:	b113      	cbz	r3, 800607e <HAL_I2C_Init+0x66>
 8006078:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800607c:	d16b      	bne.n	8006156 <HAL_I2C_Init+0x13e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800607e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006082:	2b00      	cmp	r3, #0
 8006084:	d06d      	beq.n	8006162 <HAL_I2C_Init+0x14a>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006086:	2324      	movs	r3, #36	; 0x24
 8006088:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800608c:	6822      	ldr	r2, [r4, #0]
 800608e:	6813      	ldr	r3, [r2, #0]
 8006090:	f023 0301 	bic.w	r3, r3, #1
 8006094:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006096:	6863      	ldr	r3, [r4, #4]
 8006098:	6822      	ldr	r2, [r4, #0]
 800609a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800609e:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80060a0:	6822      	ldr	r2, [r4, #0]
 80060a2:	6893      	ldr	r3, [r2, #8]
 80060a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80060a8:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80060aa:	68e3      	ldr	r3, [r4, #12]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d05e      	beq.n	800616e <HAL_I2C_Init+0x156>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80060b0:	68a3      	ldr	r3, [r4, #8]
 80060b2:	6822      	ldr	r2, [r4, #0]
 80060b4:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80060b8:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80060ba:	68e3      	ldr	r3, [r4, #12]
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d05c      	beq.n	800617a <HAL_I2C_Init+0x162>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80060c0:	6822      	ldr	r2, [r4, #0]
 80060c2:	6853      	ldr	r3, [r2, #4]
 80060c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80060c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060cc:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80060ce:	6822      	ldr	r2, [r4, #0]
 80060d0:	68d3      	ldr	r3, [r2, #12]
 80060d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80060d6:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80060d8:	6923      	ldr	r3, [r4, #16]
 80060da:	6962      	ldr	r2, [r4, #20]
 80060dc:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80060de:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80060e0:	6822      	ldr	r2, [r4, #0]
 80060e2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80060e6:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80060e8:	69e3      	ldr	r3, [r4, #28]
 80060ea:	6a21      	ldr	r1, [r4, #32]
 80060ec:	6822      	ldr	r2, [r4, #0]
 80060ee:	430b      	orrs	r3, r1
 80060f0:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80060f2:	6822      	ldr	r2, [r4, #0]
 80060f4:	6813      	ldr	r3, [r2, #0]
 80060f6:	f043 0301 	orr.w	r3, r3, #1
 80060fa:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060fc:	2000      	movs	r0, #0
 80060fe:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006100:	2320      	movs	r3, #32
 8006102:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006106:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006108:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800610c:	bd10      	pop	{r4, pc}
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800610e:	f240 2116 	movw	r1, #534	; 0x216
 8006112:	481e      	ldr	r0, [pc, #120]	; (800618c <HAL_I2C_Init+0x174>)
 8006114:	f7fc fb22 	bl	800275c <assert_failed>
 8006118:	e798      	b.n	800604c <HAL_I2C_Init+0x34>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800611a:	f240 2117 	movw	r1, #535	; 0x217
 800611e:	481b      	ldr	r0, [pc, #108]	; (800618c <HAL_I2C_Init+0x174>)
 8006120:	f7fc fb1c 	bl	800275c <assert_failed>
 8006124:	e796      	b.n	8006054 <HAL_I2C_Init+0x3c>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8006126:	f44f 7106 	mov.w	r1, #536	; 0x218
 800612a:	4818      	ldr	r0, [pc, #96]	; (800618c <HAL_I2C_Init+0x174>)
 800612c:	f7fc fb16 	bl	800275c <assert_failed>
 8006130:	e795      	b.n	800605e <HAL_I2C_Init+0x46>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8006132:	f240 2119 	movw	r1, #537	; 0x219
 8006136:	4815      	ldr	r0, [pc, #84]	; (800618c <HAL_I2C_Init+0x174>)
 8006138:	f7fc fb10 	bl	800275c <assert_failed>
 800613c:	e792      	b.n	8006064 <HAL_I2C_Init+0x4c>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800613e:	f240 211a 	movw	r1, #538	; 0x21a
 8006142:	4812      	ldr	r0, [pc, #72]	; (800618c <HAL_I2C_Init+0x174>)
 8006144:	f7fc fb0a 	bl	800275c <assert_failed>
 8006148:	e78f      	b.n	800606a <HAL_I2C_Init+0x52>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800614a:	f240 211b 	movw	r1, #539	; 0x21b
 800614e:	480f      	ldr	r0, [pc, #60]	; (800618c <HAL_I2C_Init+0x174>)
 8006150:	f7fc fb04 	bl	800275c <assert_failed>
 8006154:	e78e      	b.n	8006074 <HAL_I2C_Init+0x5c>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8006156:	f44f 7107 	mov.w	r1, #540	; 0x21c
 800615a:	480c      	ldr	r0, [pc, #48]	; (800618c <HAL_I2C_Init+0x174>)
 800615c:	f7fc fafe 	bl	800275c <assert_failed>
 8006160:	e78d      	b.n	800607e <HAL_I2C_Init+0x66>
    hi2c->Lock = HAL_UNLOCKED;
 8006162:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8006166:	4620      	mov	r0, r4
 8006168:	f7fc f920 	bl	80023ac <HAL_I2C_MspInit>
 800616c:	e78b      	b.n	8006086 <HAL_I2C_Init+0x6e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800616e:	68a3      	ldr	r3, [r4, #8]
 8006170:	6822      	ldr	r2, [r4, #0]
 8006172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006176:	6093      	str	r3, [r2, #8]
 8006178:	e79f      	b.n	80060ba <HAL_I2C_Init+0xa2>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006180:	605a      	str	r2, [r3, #4]
 8006182:	e79d      	b.n	80060c0 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8006184:	2001      	movs	r0, #1
}
 8006186:	4770      	bx	lr
 8006188:	40005400 	.word	0x40005400
 800618c:	0800b940 	.word	0x0800b940

08006190 <HAL_I2C_EV_IRQHandler>:
{
 8006190:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006192:	6803      	ldr	r3, [r0, #0]
 8006194:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006196:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8006198:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800619a:	b103      	cbz	r3, 800619e <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 800619c:	4798      	blx	r3
}
 800619e:	bd08      	pop	{r3, pc}

080061a0 <HAL_I2C_SlaveTxCpltCallback>:
}
 80061a0:	4770      	bx	lr

080061a2 <HAL_I2C_SlaveRxCpltCallback>:
}
 80061a2:	4770      	bx	lr

080061a4 <I2C_ITSlaveSeqCplt>:
{
 80061a4:	b510      	push	{r4, lr}
 80061a6:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80061a8:	6803      	ldr	r3, [r0, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ac:	2100      	movs	r1, #0
 80061ae:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80061b2:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80061b6:	d00e      	beq.n	80061d6 <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80061be:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80061c0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b29      	cmp	r3, #41	; 0x29
 80061c8:	d00d      	beq.n	80061e6 <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80061ca:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b2a      	cmp	r3, #42	; 0x2a
 80061d2:	d018      	beq.n	8006206 <I2C_ITSlaveSeqCplt+0x62>
}
 80061d4:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80061d6:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80061da:	d0f1      	beq.n	80061c0 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	e7ec      	b.n	80061c0 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80061e6:	2328      	movs	r3, #40	; 0x28
 80061e8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80061ec:	2321      	movs	r3, #33	; 0x21
 80061ee:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80061f0:	2101      	movs	r1, #1
 80061f2:	4620      	mov	r0, r4
 80061f4:	f7ff feb9 	bl	8005f6a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80061f8:	2300      	movs	r3, #0
 80061fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80061fe:	4620      	mov	r0, r4
 8006200:	f7ff ffce 	bl	80061a0 <HAL_I2C_SlaveTxCpltCallback>
 8006204:	e7e6      	b.n	80061d4 <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006206:	2328      	movs	r3, #40	; 0x28
 8006208:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800620c:	2322      	movs	r3, #34	; 0x22
 800620e:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006210:	2102      	movs	r1, #2
 8006212:	4620      	mov	r0, r4
 8006214:	f7ff fea9 	bl	8005f6a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006218:	2300      	movs	r3, #0
 800621a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800621e:	4620      	mov	r0, r4
 8006220:	f7ff ffbf 	bl	80061a2 <HAL_I2C_SlaveRxCpltCallback>
}
 8006224:	e7d6      	b.n	80061d4 <I2C_ITSlaveSeqCplt+0x30>

08006226 <HAL_I2C_AddrCallback>:
}
 8006226:	4770      	bx	lr

08006228 <I2C_ITAddrCplt>:
{
 8006228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622a:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800622c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006230:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006234:	2b28      	cmp	r3, #40	; 0x28
 8006236:	d006      	beq.n	8006246 <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006238:	6803      	ldr	r3, [r0, #0]
 800623a:	2208      	movs	r2, #8
 800623c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800623e:	2300      	movs	r3, #0
 8006240:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8006244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 8006246:	6803      	ldr	r3, [r0, #0]
 8006248:	699e      	ldr	r6, [r3, #24]
 800624a:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800624e:	699a      	ldr	r2, [r3, #24]
 8006250:	0c12      	lsrs	r2, r2, #16
 8006252:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006256:	689a      	ldr	r2, [r3, #8]
 8006258:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800625c:	68df      	ldr	r7, [r3, #12]
 800625e:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006262:	68c1      	ldr	r1, [r0, #12]
 8006264:	2902      	cmp	r1, #2
 8006266:	d122      	bne.n	80062ae <I2C_ITAddrCplt+0x86>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006268:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 800626c:	f015 0f06 	tst.w	r5, #6
 8006270:	d110      	bne.n	8006294 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 8006272:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006274:	3101      	adds	r1, #1
 8006276:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006278:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800627a:	2902      	cmp	r1, #2
 800627c:	d1e2      	bne.n	8006244 <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 800627e:	2100      	movs	r1, #0
 8006280:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006282:	2008      	movs	r0, #8
 8006284:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8006286:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800628a:	4631      	mov	r1, r6
 800628c:	4620      	mov	r0, r4
 800628e:	f7ff ffca 	bl	8006226 <HAL_I2C_AddrCallback>
 8006292:	e7d7      	b.n	8006244 <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006294:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006298:	f7ff fe67 	bl	8005f6a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800629c:	2300      	movs	r3, #0
 800629e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80062a2:	463a      	mov	r2, r7
 80062a4:	4631      	mov	r1, r6
 80062a6:	4620      	mov	r0, r4
 80062a8:	f7ff ffbd 	bl	8006226 <HAL_I2C_AddrCallback>
 80062ac:	e7ca      	b.n	8006244 <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80062ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062b2:	f7ff fe5a 	bl	8005f6a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80062b6:	2300      	movs	r3, #0
 80062b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80062bc:	462a      	mov	r2, r5
 80062be:	4631      	mov	r1, r6
 80062c0:	4620      	mov	r0, r4
 80062c2:	f7ff ffb0 	bl	8006226 <HAL_I2C_AddrCallback>
 80062c6:	e7bd      	b.n	8006244 <I2C_ITAddrCplt+0x1c>

080062c8 <HAL_I2C_ListenCpltCallback>:
}
 80062c8:	4770      	bx	lr
	...

080062cc <I2C_ITListenCplt>:
{
 80062cc:	b510      	push	{r4, lr}
 80062ce:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062d0:	4b17      	ldr	r3, [pc, #92]	; (8006330 <I2C_ITListenCplt+0x64>)
 80062d2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80062d4:	2300      	movs	r3, #0
 80062d6:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80062d8:	2220      	movs	r2, #32
 80062da:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062de:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 80062e2:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80062e4:	f011 0f04 	tst.w	r1, #4
 80062e8:	d013      	beq.n	8006312 <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80062ea:	6803      	ldr	r3, [r0, #0]
 80062ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062ee:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80062f0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80062f2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80062f4:	3301      	adds	r3, #1
 80062f6:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80062f8:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 80062fa:	b153      	cbz	r3, 8006312 <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 80062fc:	3b01      	subs	r3, #1
 80062fe:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8006300:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8006302:	b29b      	uxth	r3, r3
 8006304:	3b01      	subs	r3, #1
 8006306:	b29b      	uxth	r3, r3
 8006308:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800630a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800630c:	f043 0304 	orr.w	r3, r3, #4
 8006310:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006312:	f248 0103 	movw	r1, #32771	; 0x8003
 8006316:	4620      	mov	r0, r4
 8006318:	f7ff fe27 	bl	8005f6a <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800631c:	6823      	ldr	r3, [r4, #0]
 800631e:	2210      	movs	r2, #16
 8006320:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8006322:	2300      	movs	r3, #0
 8006324:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8006328:	4620      	mov	r0, r4
 800632a:	f7ff ffcd 	bl	80062c8 <HAL_I2C_ListenCpltCallback>
}
 800632e:	bd10      	pop	{r4, pc}
 8006330:	ffff0000 	.word	0xffff0000

08006334 <HAL_I2C_AbortCpltCallback>:
}
 8006334:	4770      	bx	lr

08006336 <I2C_TreatErrorCallback>:
{
 8006336:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006338:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b60      	cmp	r3, #96	; 0x60
 8006340:	d006      	beq.n	8006350 <I2C_TreatErrorCallback+0x1a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006342:	2300      	movs	r3, #0
 8006344:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006346:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800634a:	f7fd feff 	bl	800414c <HAL_I2C_ErrorCallback>
}
 800634e:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8006350:	2320      	movs	r3, #32
 8006352:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006356:	2300      	movs	r3, #0
 8006358:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800635a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800635e:	f7ff ffe9 	bl	8006334 <HAL_I2C_AbortCpltCallback>
 8006362:	e7f4      	b.n	800634e <I2C_TreatErrorCallback+0x18>

08006364 <I2C_ITError>:
{
 8006364:	b510      	push	{r4, lr}
 8006366:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006368:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800636c:	2000      	movs	r0, #0
 800636e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006372:	4a3b      	ldr	r2, [pc, #236]	; (8006460 <I2C_ITError+0xfc>)
 8006374:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006376:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8006378:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800637a:	430a      	orrs	r2, r1
 800637c:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800637e:	3b28      	subs	r3, #40	; 0x28
 8006380:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006382:	2b02      	cmp	r3, #2
 8006384:	d819      	bhi.n	80063ba <I2C_ITError+0x56>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006386:	2103      	movs	r1, #3
 8006388:	4620      	mov	r0, r4
 800638a:	f7ff fdee 	bl	8005f6a <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800638e:	2328      	movs	r3, #40	; 0x28
 8006390:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006394:	4b33      	ldr	r3, [pc, #204]	; (8006464 <I2C_ITError+0x100>)
 8006396:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 8006398:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800639a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800639c:	b11a      	cbz	r2, 80063a6 <I2C_ITError+0x42>
 800639e:	2b11      	cmp	r3, #17
 80063a0:	d01b      	beq.n	80063da <I2C_ITError+0x76>
 80063a2:	2b21      	cmp	r3, #33	; 0x21
 80063a4:	d019      	beq.n	80063da <I2C_ITError+0x76>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80063a6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80063a8:	b11a      	cbz	r2, 80063b2 <I2C_ITError+0x4e>
 80063aa:	2b12      	cmp	r3, #18
 80063ac:	d036      	beq.n	800641c <I2C_ITError+0xb8>
 80063ae:	2b22      	cmp	r3, #34	; 0x22
 80063b0:	d034      	beq.n	800641c <I2C_ITError+0xb8>
    I2C_TreatErrorCallback(hi2c);
 80063b2:	4620      	mov	r0, r4
 80063b4:	f7ff ffbf 	bl	8006336 <I2C_TreatErrorCallback>
}
 80063b8:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80063ba:	f248 0103 	movw	r1, #32771	; 0x8003
 80063be:	4620      	mov	r0, r4
 80063c0:	f7ff fdd3 	bl	8005f6a <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80063c4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b60      	cmp	r3, #96	; 0x60
 80063cc:	d002      	beq.n	80063d4 <I2C_ITError+0x70>
      hi2c->State         = HAL_I2C_STATE_READY;
 80063ce:	2320      	movs	r3, #32
 80063d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 80063d4:	2300      	movs	r3, #0
 80063d6:	6363      	str	r3, [r4, #52]	; 0x34
 80063d8:	e7de      	b.n	8006398 <I2C_ITError+0x34>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80063e2:	d003      	beq.n	80063ec <I2C_ITError+0x88>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063ea:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80063ec:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80063ee:	f7ff f91b 	bl	8005628 <HAL_DMA_GetState>
 80063f2:	2801      	cmp	r0, #1
 80063f4:	d00e      	beq.n	8006414 <I2C_ITError+0xb0>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80063f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80063f8:	4a1b      	ldr	r2, [pc, #108]	; (8006468 <I2C_ITError+0x104>)
 80063fa:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80063fc:	2300      	movs	r3, #0
 80063fe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006402:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006404:	f7ff f886 	bl	8005514 <HAL_DMA_Abort_IT>
 8006408:	2800      	cmp	r0, #0
 800640a:	d0d5      	beq.n	80063b8 <I2C_ITError+0x54>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800640c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800640e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006410:	4798      	blx	r3
 8006412:	e7d1      	b.n	80063b8 <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 8006414:	4620      	mov	r0, r4
 8006416:	f7ff ff8e 	bl	8006336 <I2C_TreatErrorCallback>
 800641a:	e7cd      	b.n	80063b8 <I2C_ITError+0x54>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8006424:	d003      	beq.n	800642e <I2C_ITError+0xca>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800642c:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800642e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006430:	f7ff f8fa 	bl	8005628 <HAL_DMA_GetState>
 8006434:	2801      	cmp	r0, #1
 8006436:	d00e      	beq.n	8006456 <I2C_ITError+0xf2>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006438:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800643a:	4a0b      	ldr	r2, [pc, #44]	; (8006468 <I2C_ITError+0x104>)
 800643c:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800643e:	2300      	movs	r3, #0
 8006440:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006444:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006446:	f7ff f865 	bl	8005514 <HAL_DMA_Abort_IT>
 800644a:	2800      	cmp	r0, #0
 800644c:	d0b4      	beq.n	80063b8 <I2C_ITError+0x54>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800644e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006450:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006452:	4798      	blx	r3
 8006454:	e7b0      	b.n	80063b8 <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 8006456:	4620      	mov	r0, r4
 8006458:	f7ff ff6d 	bl	8006336 <I2C_TreatErrorCallback>
 800645c:	e7ac      	b.n	80063b8 <I2C_ITError+0x54>
 800645e:	bf00      	nop
 8006460:	ffff0000 	.word	0xffff0000
 8006464:	080065d5 	.word	0x080065d5
 8006468:	0800678d 	.word	0x0800678d

0800646c <I2C_ITSlaveCplt>:
{
 800646c:	b570      	push	{r4, r5, r6, lr}
 800646e:	4604      	mov	r4, r0
 8006470:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006472:	6802      	ldr	r2, [r0, #0]
 8006474:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006476:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800647a:	b2db      	uxtb	r3, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800647c:	2120      	movs	r1, #32
 800647e:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006480:	2b21      	cmp	r3, #33	; 0x21
 8006482:	d00d      	beq.n	80064a0 <I2C_ITSlaveCplt+0x34>
 8006484:	2b29      	cmp	r3, #41	; 0x29
 8006486:	d00b      	beq.n	80064a0 <I2C_ITSlaveCplt+0x34>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006488:	2b22      	cmp	r3, #34	; 0x22
 800648a:	d001      	beq.n	8006490 <I2C_ITSlaveCplt+0x24>
 800648c:	2b2a      	cmp	r3, #42	; 0x2a
 800648e:	d10e      	bne.n	80064ae <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006490:	f248 0102 	movw	r1, #32770	; 0x8002
 8006494:	4620      	mov	r0, r4
 8006496:	f7ff fd68 	bl	8005f6a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800649a:	2322      	movs	r3, #34	; 0x22
 800649c:	6323      	str	r3, [r4, #48]	; 0x30
 800649e:	e006      	b.n	80064ae <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80064a0:	f248 0101 	movw	r1, #32769	; 0x8001
 80064a4:	4620      	mov	r0, r4
 80064a6:	f7ff fd60 	bl	8005f6a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80064aa:	2321      	movs	r3, #33	; 0x21
 80064ac:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80064ae:	6822      	ldr	r2, [r4, #0]
 80064b0:	6853      	ldr	r3, [r2, #4]
 80064b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064b6:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 80064b8:	6822      	ldr	r2, [r4, #0]
 80064ba:	6853      	ldr	r3, [r2, #4]
 80064bc:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80064c0:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80064c4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80064c8:	f023 0301 	bic.w	r3, r3, #1
 80064cc:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 80064ce:	4620      	mov	r0, r4
 80064d0:	f7ff fd3a 	bl	8005f48 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80064d4:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80064d8:	d040      	beq.n	800655c <I2C_ITSlaveCplt+0xf0>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80064da:	6822      	ldr	r2, [r4, #0]
 80064dc:	6813      	ldr	r3, [r2, #0]
 80064de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064e2:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 80064e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80064e6:	b11b      	cbz	r3, 80064f0 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80064f0:	f015 0f04 	tst.w	r5, #4
 80064f4:	d011      	beq.n	800651a <I2C_ITSlaveCplt+0xae>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80064f6:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006500:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006502:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006504:	3301      	adds	r3, #1
 8006506:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8006508:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800650a:	b133      	cbz	r3, 800651a <I2C_ITSlaveCplt+0xae>
      hi2c->XferSize--;
 800650c:	3b01      	subs	r3, #1
 800650e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006510:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006512:	b29b      	uxth	r3, r3
 8006514:	3b01      	subs	r3, #1
 8006516:	b29b      	uxth	r3, r3
 8006518:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 800651a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800651c:	b29b      	uxth	r3, r3
 800651e:	b11b      	cbz	r3, 8006528 <I2C_ITSlaveCplt+0xbc>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006520:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006522:	f043 0304 	orr.w	r3, r3, #4
 8006526:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006528:	2300      	movs	r3, #0
 800652a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 800652e:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006530:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006532:	bb1b      	cbnz	r3, 800657c <I2C_ITSlaveCplt+0x110>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006534:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006536:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800653a:	d12d      	bne.n	8006598 <I2C_ITSlaveCplt+0x12c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800653c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b22      	cmp	r3, #34	; 0x22
 8006544:	d038      	beq.n	80065b8 <I2C_ITSlaveCplt+0x14c>
    hi2c->State = HAL_I2C_STATE_READY;
 8006546:	2320      	movs	r3, #32
 8006548:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800654c:	2300      	movs	r3, #0
 800654e:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006550:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006554:	4620      	mov	r0, r4
 8006556:	f7ff fe23 	bl	80061a0 <HAL_I2C_SlaveTxCpltCallback>
}
 800655a:	e02c      	b.n	80065b6 <I2C_ITSlaveCplt+0x14a>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800655c:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8006560:	d0c6      	beq.n	80064f0 <I2C_ITSlaveCplt+0x84>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006562:	6822      	ldr	r2, [r4, #0]
 8006564:	6813      	ldr	r3, [r2, #0]
 8006566:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800656a:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 800656c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800656e:	2b00      	cmp	r3, #0
 8006570:	d0be      	beq.n	80064f0 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	b29b      	uxth	r3, r3
 8006578:	8563      	strh	r3, [r4, #42]	; 0x2a
 800657a:	e7b9      	b.n	80064f0 <I2C_ITSlaveCplt+0x84>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800657c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800657e:	4620      	mov	r0, r4
 8006580:	f7ff fef0 	bl	8006364 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006584:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b28      	cmp	r3, #40	; 0x28
 800658c:	d113      	bne.n	80065b6 <I2C_ITSlaveCplt+0x14a>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800658e:	4629      	mov	r1, r5
 8006590:	4620      	mov	r0, r4
 8006592:	f7ff fe9b 	bl	80062cc <I2C_ITListenCplt>
 8006596:	e00e      	b.n	80065b6 <I2C_ITSlaveCplt+0x14a>
    I2C_ITSlaveSeqCplt(hi2c);
 8006598:	4620      	mov	r0, r4
 800659a:	f7ff fe03 	bl	80061a4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800659e:	4b0c      	ldr	r3, [pc, #48]	; (80065d0 <I2C_ITSlaveCplt+0x164>)
 80065a0:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80065a2:	2320      	movs	r3, #32
 80065a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80065a8:	2300      	movs	r3, #0
 80065aa:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80065ac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80065b0:	4620      	mov	r0, r4
 80065b2:	f7ff fe89 	bl	80062c8 <HAL_I2C_ListenCpltCallback>
}
 80065b6:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80065b8:	2320      	movs	r3, #32
 80065ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80065be:	2300      	movs	r3, #0
 80065c0:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80065c2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80065c6:	4620      	mov	r0, r4
 80065c8:	f7ff fdeb 	bl	80061a2 <HAL_I2C_SlaveRxCpltCallback>
 80065cc:	e7f3      	b.n	80065b6 <I2C_ITSlaveCplt+0x14a>
 80065ce:	bf00      	nop
 80065d0:	ffff0000 	.word	0xffff0000

080065d4 <I2C_Slave_ISR_IT>:
{
 80065d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 80065d6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 80065d8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80065dc:	2b01      	cmp	r3, #1
 80065de:	f000 809e 	beq.w	800671e <I2C_Slave_ISR_IT+0x14a>
 80065e2:	4604      	mov	r4, r0
 80065e4:	460d      	mov	r5, r1
 80065e6:	4616      	mov	r6, r2
 80065e8:	2301      	movs	r3, #1
 80065ea:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80065ee:	f011 0f20 	tst.w	r1, #32
 80065f2:	d002      	beq.n	80065fa <I2C_Slave_ISR_IT+0x26>
 80065f4:	f012 0f20 	tst.w	r2, #32
 80065f8:	d119      	bne.n	800662e <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80065fa:	f015 0f10 	tst.w	r5, #16
 80065fe:	d03e      	beq.n	800667e <I2C_Slave_ISR_IT+0xaa>
 8006600:	f016 0f10 	tst.w	r6, #16
 8006604:	d03b      	beq.n	800667e <I2C_Slave_ISR_IT+0xaa>
    if (hi2c->XferCount == 0U)
 8006606:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006608:	b29b      	uxth	r3, r3
 800660a:	bb43      	cbnz	r3, 800665e <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800660c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b28      	cmp	r3, #40	; 0x28
 8006614:	d00e      	beq.n	8006634 <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006616:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b29      	cmp	r3, #41	; 0x29
 800661e:	d011      	beq.n	8006644 <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006620:	6823      	ldr	r3, [r4, #0]
 8006622:	2210      	movs	r2, #16
 8006624:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8006626:	2000      	movs	r0, #0
 8006628:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800662c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800662e:	f7ff ff1d 	bl	800646c <I2C_ITSlaveCplt>
 8006632:	e7e2      	b.n	80065fa <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006634:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8006638:	d1ed      	bne.n	8006616 <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800663a:	4629      	mov	r1, r5
 800663c:	4620      	mov	r0, r4
 800663e:	f7ff fe45 	bl	80062cc <I2C_ITListenCplt>
 8006642:	e7f0      	b.n	8006626 <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006644:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8006648:	d0ea      	beq.n	8006620 <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	2210      	movs	r2, #16
 800664e:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8006650:	4620      	mov	r0, r4
 8006652:	f7ff fc79 	bl	8005f48 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8006656:	4620      	mov	r0, r4
 8006658:	f7ff fda4 	bl	80061a4 <I2C_ITSlaveSeqCplt>
 800665c:	e7e3      	b.n	8006626 <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800665e:	6823      	ldr	r3, [r4, #0]
 8006660:	2210      	movs	r2, #16
 8006662:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006664:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006666:	f043 0304 	orr.w	r3, r3, #4
 800666a:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800666c:	b117      	cbz	r7, 8006674 <I2C_Slave_ISR_IT+0xa0>
 800666e:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8006672:	d1d8      	bne.n	8006626 <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006674:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006676:	4620      	mov	r0, r4
 8006678:	f7ff fe74 	bl	8006364 <I2C_ITError>
 800667c:	e7d3      	b.n	8006626 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800667e:	f015 0f04 	tst.w	r5, #4
 8006682:	d01f      	beq.n	80066c4 <I2C_Slave_ISR_IT+0xf0>
 8006684:	f016 0f04 	tst.w	r6, #4
 8006688:	d01c      	beq.n	80066c4 <I2C_Slave_ISR_IT+0xf0>
    if (hi2c->XferCount > 0U)
 800668a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800668c:	b29b      	uxth	r3, r3
 800668e:	b173      	cbz	r3, 80066ae <I2C_Slave_ISR_IT+0xda>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006690:	6823      	ldr	r3, [r4, #0]
 8006692:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006694:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006696:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8006698:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800669a:	3301      	adds	r3, #1
 800669c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800669e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80066a0:	3b01      	subs	r3, #1
 80066a2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80066a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	3b01      	subs	r3, #1
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 80066ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1b7      	bne.n	8006626 <I2C_Slave_ISR_IT+0x52>
 80066b6:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 80066ba:	d0b4      	beq.n	8006626 <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 80066bc:	4620      	mov	r0, r4
 80066be:	f7ff fd71 	bl	80061a4 <I2C_ITSlaveSeqCplt>
 80066c2:	e7b0      	b.n	8006626 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80066c4:	f015 0f08 	tst.w	r5, #8
 80066c8:	d002      	beq.n	80066d0 <I2C_Slave_ISR_IT+0xfc>
 80066ca:	f016 0f08 	tst.w	r6, #8
 80066ce:	d118      	bne.n	8006702 <I2C_Slave_ISR_IT+0x12e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80066d0:	f015 0f02 	tst.w	r5, #2
 80066d4:	d0a7      	beq.n	8006626 <I2C_Slave_ISR_IT+0x52>
 80066d6:	f016 0f02 	tst.w	r6, #2
 80066da:	d0a4      	beq.n	8006626 <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 80066dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80066de:	b29b      	uxth	r3, r3
 80066e0:	b1a3      	cbz	r3, 800670c <I2C_Slave_ISR_IT+0x138>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80066e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80066e4:	6823      	ldr	r3, [r4, #0]
 80066e6:	7812      	ldrb	r2, [r2, #0]
 80066e8:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80066ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066ec:	3301      	adds	r3, #1
 80066ee:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80066f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	3b01      	subs	r3, #1
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80066fa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80066fc:	3b01      	subs	r3, #1
 80066fe:	8523      	strh	r3, [r4, #40]	; 0x28
 8006700:	e791      	b.n	8006626 <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006702:	4629      	mov	r1, r5
 8006704:	4620      	mov	r0, r4
 8006706:	f7ff fd8f 	bl	8006228 <I2C_ITAddrCplt>
 800670a:	e78c      	b.n	8006626 <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800670c:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8006710:	d001      	beq.n	8006716 <I2C_Slave_ISR_IT+0x142>
 8006712:	2f00      	cmp	r7, #0
 8006714:	d187      	bne.n	8006626 <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 8006716:	4620      	mov	r0, r4
 8006718:	f7ff fd44 	bl	80061a4 <I2C_ITSlaveSeqCplt>
 800671c:	e783      	b.n	8006626 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 800671e:	2002      	movs	r0, #2
 8006720:	e784      	b.n	800662c <I2C_Slave_ISR_IT+0x58>

08006722 <HAL_I2C_ER_IRQHandler>:
{
 8006722:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006724:	6802      	ldr	r2, [r0, #0]
 8006726:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006728:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800672a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800672e:	d009      	beq.n	8006744 <HAL_I2C_ER_IRQHandler+0x22>
 8006730:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006734:	d006      	beq.n	8006744 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006736:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006738:	f044 0401 	orr.w	r4, r4, #1
 800673c:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800673e:	f44f 7480 	mov.w	r4, #256	; 0x100
 8006742:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006744:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006748:	d00a      	beq.n	8006760 <HAL_I2C_ER_IRQHandler+0x3e>
 800674a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800674e:	d007      	beq.n	8006760 <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006750:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006752:	f042 0208 	orr.w	r2, r2, #8
 8006756:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006758:	6802      	ldr	r2, [r0, #0]
 800675a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800675e:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006760:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006764:	d00a      	beq.n	800677c <HAL_I2C_ER_IRQHandler+0x5a>
 8006766:	f011 0f80 	tst.w	r1, #128	; 0x80
 800676a:	d007      	beq.n	800677c <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800676c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800676e:	f043 0302 	orr.w	r3, r3, #2
 8006772:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006774:	6803      	ldr	r3, [r0, #0]
 8006776:	f44f 7200 	mov.w	r2, #512	; 0x200
 800677a:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 800677c:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800677e:	f011 0f0b 	tst.w	r1, #11
 8006782:	d100      	bne.n	8006786 <HAL_I2C_ER_IRQHandler+0x64>
}
 8006784:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, tmperror);
 8006786:	f7ff fded 	bl	8006364 <I2C_ITError>
}
 800678a:	e7fb      	b.n	8006784 <HAL_I2C_ER_IRQHandler+0x62>

0800678c <I2C_DMAAbort>:
{
 800678c:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800678e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hi2c->hdmatx != NULL)
 8006790:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006792:	b10b      	cbz	r3, 8006798 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006794:	2200      	movs	r2, #0
 8006796:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 8006798:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800679a:	b10b      	cbz	r3, 80067a0 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 800679c:	2200      	movs	r2, #0
 800679e:	639a      	str	r2, [r3, #56]	; 0x38
  I2C_TreatErrorCallback(hi2c);
 80067a0:	f7ff fdc9 	bl	8006336 <I2C_TreatErrorCallback>
}
 80067a4:	bd08      	pop	{r3, pc}
	...

080067a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80067a8:	b538      	push	{r3, r4, r5, lr}
 80067aa:	4604      	mov	r4, r0
 80067ac:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80067ae:	6803      	ldr	r3, [r0, #0]
 80067b0:	4a22      	ldr	r2, [pc, #136]	; (800683c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d00b      	beq.n	80067ce <HAL_I2CEx_ConfigAnalogFilter+0x26>
 80067b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d007      	beq.n	80067ce <HAL_I2CEx_ConfigAnalogFilter+0x26>
 80067be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d003      	beq.n	80067ce <HAL_I2CEx_ConfigAnalogFilter+0x26>
 80067c6:	2163      	movs	r1, #99	; 0x63
 80067c8:	481d      	ldr	r0, [pc, #116]	; (8006840 <HAL_I2CEx_ConfigAnalogFilter+0x98>)
 80067ca:	f7fb ffc7 	bl	800275c <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80067ce:	b115      	cbz	r5, 80067d6 <HAL_I2CEx_ConfigAnalogFilter+0x2e>
 80067d0:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80067d4:	d128      	bne.n	8006828 <HAL_I2CEx_ConfigAnalogFilter+0x80>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067d6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b20      	cmp	r3, #32
 80067de:	d128      	bne.n	8006832 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067e0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d026      	beq.n	8006836 <HAL_I2CEx_ConfigAnalogFilter+0x8e>
 80067e8:	2301      	movs	r3, #1
 80067ea:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067ee:	2324      	movs	r3, #36	; 0x24
 80067f0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067f4:	6822      	ldr	r2, [r4, #0]
 80067f6:	6813      	ldr	r3, [r2, #0]
 80067f8:	f023 0301 	bic.w	r3, r3, #1
 80067fc:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80067fe:	6822      	ldr	r2, [r4, #0]
 8006800:	6813      	ldr	r3, [r2, #0]
 8006802:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006806:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006808:	6823      	ldr	r3, [r4, #0]
 800680a:	6819      	ldr	r1, [r3, #0]
 800680c:	430d      	orrs	r5, r1
 800680e:	601d      	str	r5, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006810:	6822      	ldr	r2, [r4, #0]
 8006812:	6813      	ldr	r3, [r2, #0]
 8006814:	f043 0301 	orr.w	r3, r3, #1
 8006818:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800681a:	2320      	movs	r3, #32
 800681c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006820:	2000      	movs	r0, #0
 8006822:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8006826:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8006828:	2164      	movs	r1, #100	; 0x64
 800682a:	4805      	ldr	r0, [pc, #20]	; (8006840 <HAL_I2CEx_ConfigAnalogFilter+0x98>)
 800682c:	f7fb ff96 	bl	800275c <assert_failed>
 8006830:	e7d1      	b.n	80067d6 <HAL_I2CEx_ConfigAnalogFilter+0x2e>
    return HAL_BUSY;
 8006832:	2002      	movs	r0, #2
 8006834:	e7f7      	b.n	8006826 <HAL_I2CEx_ConfigAnalogFilter+0x7e>
    __HAL_LOCK(hi2c);
 8006836:	2002      	movs	r0, #2
 8006838:	e7f5      	b.n	8006826 <HAL_I2CEx_ConfigAnalogFilter+0x7e>
 800683a:	bf00      	nop
 800683c:	40005400 	.word	0x40005400
 8006840:	0800b978 	.word	0x0800b978

08006844 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006844:	b538      	push	{r3, r4, r5, lr}
 8006846:	4604      	mov	r4, r0
 8006848:	460d      	mov	r5, r1
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800684a:	6803      	ldr	r3, [r0, #0]
 800684c:	4a20      	ldr	r2, [pc, #128]	; (80068d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d00b      	beq.n	800686a <HAL_I2CEx_ConfigDigitalFilter+0x26>
 8006852:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006856:	4293      	cmp	r3, r2
 8006858:	d007      	beq.n	800686a <HAL_I2CEx_ConfigDigitalFilter+0x26>
 800685a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800685e:	4293      	cmp	r3, r2
 8006860:	d003      	beq.n	800686a <HAL_I2CEx_ConfigDigitalFilter+0x26>
 8006862:	2191      	movs	r1, #145	; 0x91
 8006864:	481b      	ldr	r0, [pc, #108]	; (80068d4 <HAL_I2CEx_ConfigDigitalFilter+0x90>)
 8006866:	f7fb ff79 	bl	800275c <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800686a:	2d0f      	cmp	r5, #15
 800686c:	d826      	bhi.n	80068bc <HAL_I2CEx_ConfigDigitalFilter+0x78>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800686e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006872:	b2db      	uxtb	r3, r3
 8006874:	2b20      	cmp	r3, #32
 8006876:	d126      	bne.n	80068c6 <HAL_I2CEx_ConfigDigitalFilter+0x82>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006878:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800687c:	2b01      	cmp	r3, #1
 800687e:	d024      	beq.n	80068ca <HAL_I2CEx_ConfigDigitalFilter+0x86>
 8006880:	2301      	movs	r3, #1
 8006882:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006886:	2324      	movs	r3, #36	; 0x24
 8006888:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800688c:	6822      	ldr	r2, [r4, #0]
 800688e:	6813      	ldr	r3, [r2, #0]
 8006890:	f023 0301 	bic.w	r3, r3, #1
 8006894:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800689a:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800689e:	ea41 2505 	orr.w	r5, r1, r5, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80068a2:	601d      	str	r5, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80068a4:	6822      	ldr	r2, [r4, #0]
 80068a6:	6813      	ldr	r3, [r2, #0]
 80068a8:	f043 0301 	orr.w	r3, r3, #1
 80068ac:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068ae:	2320      	movs	r3, #32
 80068b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068b4:	2000      	movs	r0, #0
 80068b6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80068ba:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 80068bc:	2192      	movs	r1, #146	; 0x92
 80068be:	4805      	ldr	r0, [pc, #20]	; (80068d4 <HAL_I2CEx_ConfigDigitalFilter+0x90>)
 80068c0:	f7fb ff4c 	bl	800275c <assert_failed>
 80068c4:	e7d3      	b.n	800686e <HAL_I2CEx_ConfigDigitalFilter+0x2a>
    return HAL_BUSY;
 80068c6:	2002      	movs	r0, #2
 80068c8:	e7f7      	b.n	80068ba <HAL_I2CEx_ConfigDigitalFilter+0x76>
    __HAL_LOCK(hi2c);
 80068ca:	2002      	movs	r0, #2
 80068cc:	e7f5      	b.n	80068ba <HAL_I2CEx_ConfigDigitalFilter+0x76>
 80068ce:	bf00      	nop
 80068d0:	40005400 	.word	0x40005400
 80068d4:	0800b978 	.word	0x0800b978

080068d8 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80068d8:	2800      	cmp	r0, #0
 80068da:	d051      	beq.n	8006980 <HAL_IWDG_Init+0xa8>
{
 80068dc:	b538      	push	{r3, r4, r5, lr}
 80068de:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 80068e0:	6802      	ldr	r2, [r0, #0]
 80068e2:	4b28      	ldr	r3, [pc, #160]	; (8006984 <HAL_IWDG_Init+0xac>)
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d003      	beq.n	80068f0 <HAL_IWDG_Init+0x18>
 80068e8:	21b5      	movs	r1, #181	; 0xb5
 80068ea:	4827      	ldr	r0, [pc, #156]	; (8006988 <HAL_IWDG_Init+0xb0>)
 80068ec:	f7fb ff36 	bl	800275c <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 80068f0:	6863      	ldr	r3, [r4, #4]
 80068f2:	2b06      	cmp	r3, #6
 80068f4:	d829      	bhi.n	800694a <HAL_IWDG_Init+0x72>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 80068f6:	68a3      	ldr	r3, [r4, #8]
 80068f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068fc:	d22a      	bcs.n	8006954 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 80068fe:	68e3      	ldr	r3, [r4, #12]
 8006900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006904:	d22b      	bcs.n	800695e <HAL_IWDG_Init+0x86>

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800690c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	f245 5255 	movw	r2, #21845	; 0x5555
 8006914:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	6862      	ldr	r2, [r4, #4]
 800691a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	68a2      	ldr	r2, [r4, #8]
 8006920:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006922:	f7fd fee9 	bl	80046f8 <HAL_GetTick>
 8006926:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006928:	6823      	ldr	r3, [r4, #0]
 800692a:	68da      	ldr	r2, [r3, #12]
 800692c:	f012 0f07 	tst.w	r2, #7
 8006930:	d01a      	beq.n	8006968 <HAL_IWDG_Init+0x90>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006932:	f7fd fee1 	bl	80046f8 <HAL_GetTick>
 8006936:	1b40      	subs	r0, r0, r5
 8006938:	2831      	cmp	r0, #49	; 0x31
 800693a:	d9f5      	bls.n	8006928 <HAL_IWDG_Init+0x50>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800693c:	6823      	ldr	r3, [r4, #0]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f013 0f07 	tst.w	r3, #7
 8006944:	d0f0      	beq.n	8006928 <HAL_IWDG_Init+0x50>
      {
        return HAL_TIMEOUT;
 8006946:	2003      	movs	r0, #3
 8006948:	e014      	b.n	8006974 <HAL_IWDG_Init+0x9c>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 800694a:	21b6      	movs	r1, #182	; 0xb6
 800694c:	480e      	ldr	r0, [pc, #56]	; (8006988 <HAL_IWDG_Init+0xb0>)
 800694e:	f7fb ff05 	bl	800275c <assert_failed>
 8006952:	e7d0      	b.n	80068f6 <HAL_IWDG_Init+0x1e>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 8006954:	21b7      	movs	r1, #183	; 0xb7
 8006956:	480c      	ldr	r0, [pc, #48]	; (8006988 <HAL_IWDG_Init+0xb0>)
 8006958:	f7fb ff00 	bl	800275c <assert_failed>
 800695c:	e7cf      	b.n	80068fe <HAL_IWDG_Init+0x26>
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 800695e:	21b8      	movs	r1, #184	; 0xb8
 8006960:	4809      	ldr	r0, [pc, #36]	; (8006988 <HAL_IWDG_Init+0xb0>)
 8006962:	f7fb fefb 	bl	800275c <assert_failed>
 8006966:	e7ce      	b.n	8006906 <HAL_IWDG_Init+0x2e>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8006968:	6919      	ldr	r1, [r3, #16]
 800696a:	68e2      	ldr	r2, [r4, #12]
 800696c:	4291      	cmp	r1, r2
 800696e:	d002      	beq.n	8006976 <HAL_IWDG_Init+0x9e>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8006970:	611a      	str	r2, [r3, #16]
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
 8006972:	2000      	movs	r0, #0
}
 8006974:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006976:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800697a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800697c:	2000      	movs	r0, #0
 800697e:	e7f9      	b.n	8006974 <HAL_IWDG_Init+0x9c>
    return HAL_ERROR;
 8006980:	2001      	movs	r0, #1
}
 8006982:	4770      	bx	lr
 8006984:	40003000 	.word	0x40003000
 8006988:	0800b9b4 	.word	0x0800b9b4

0800698c <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
	__HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800698c:	6803      	ldr	r3, [r0, #0]
 800698e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006992:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8006994:	2000      	movs	r0, #0
 8006996:	4770      	bx	lr

08006998 <HAL_LPTIM_Init>:
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8006998:	2800      	cmp	r0, #0
 800699a:	f000 814c 	beq.w	8006c36 <HAL_LPTIM_Init+0x29e>
{
 800699e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069a0:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
 80069a2:	6803      	ldr	r3, [r0, #0]
 80069a4:	4aa5      	ldr	r2, [pc, #660]	; (8006c3c <HAL_LPTIM_Init+0x2a4>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d007      	beq.n	80069ba <HAL_LPTIM_Init+0x22>
 80069aa:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d003      	beq.n	80069ba <HAL_LPTIM_Init+0x22>
 80069b2:	21fc      	movs	r1, #252	; 0xfc
 80069b4:	48a2      	ldr	r0, [pc, #648]	; (8006c40 <HAL_LPTIM_Init+0x2a8>)
 80069b6:	f7fb fed1 	bl	800275c <assert_failed>

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
 80069ba:	6863      	ldr	r3, [r4, #4]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	f200 80be 	bhi.w	8006b3e <HAL_LPTIM_Init+0x1a6>
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
 80069c2:	68a3      	ldr	r3, [r4, #8]
 80069c4:	b1ab      	cbz	r3, 80069f2 <HAL_LPTIM_Init+0x5a>
 80069c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069ca:	d012      	beq.n	80069f2 <HAL_LPTIM_Init+0x5a>
 80069cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069d0:	d00f      	beq.n	80069f2 <HAL_LPTIM_Init+0x5a>
 80069d2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80069d6:	d00c      	beq.n	80069f2 <HAL_LPTIM_Init+0x5a>
 80069d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069dc:	d009      	beq.n	80069f2 <HAL_LPTIM_Init+0x5a>
 80069de:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80069e2:	d006      	beq.n	80069f2 <HAL_LPTIM_Init+0x5a>
 80069e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069e8:	d003      	beq.n	80069f2 <HAL_LPTIM_Init+0x5a>
 80069ea:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 80069ee:	f040 80ab 	bne.w	8006b48 <HAL_LPTIM_Init+0x1b0>
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80069f2:	6863      	ldr	r3, [r4, #4]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	f000 80ac 	beq.w	8006b52 <HAL_LPTIM_Init+0x1ba>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80069fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80069fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a00:	f000 80a7 	beq.w	8006b52 <HAL_LPTIM_Init+0x1ba>
  {
    assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));
    assert_param(IS_LPTIM_CLOCK_SAMPLE_TIME(hlptim->Init.UltraLowPowerClock.SampleTime));
  }
  assert_param(IS_LPTIM_TRG_SOURCE(hlptim->Init.Trigger.Source));
 8006a04:	6963      	ldr	r3, [r4, #20]
 8006a06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d016      	beq.n	8006a3c <HAL_LPTIM_Init+0xa4>
 8006a0e:	b1ab      	cbz	r3, 8006a3c <HAL_LPTIM_Init+0xa4>
 8006a10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a14:	d012      	beq.n	8006a3c <HAL_LPTIM_Init+0xa4>
 8006a16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a1a:	d00f      	beq.n	8006a3c <HAL_LPTIM_Init+0xa4>
 8006a1c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006a20:	d00c      	beq.n	8006a3c <HAL_LPTIM_Init+0xa4>
 8006a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a26:	d009      	beq.n	8006a3c <HAL_LPTIM_Init+0xa4>
 8006a28:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006a2c:	d006      	beq.n	8006a3c <HAL_LPTIM_Init+0xa4>
 8006a2e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a32:	d003      	beq.n	8006a3c <HAL_LPTIM_Init+0xa4>
 8006a34:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8006a38:	f040 80aa 	bne.w	8006b90 <HAL_LPTIM_Init+0x1f8>
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8006a3c:	6962      	ldr	r2, [r4, #20]
 8006a3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d013      	beq.n	8006a6e <HAL_LPTIM_Init+0xd6>
  {
    assert_param(IS_LPTIM_EXT_TRG_POLARITY(hlptim->Init.Trigger.ActiveEdge));
 8006a46:	69a3      	ldr	r3, [r4, #24]
 8006a48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a4c:	d006      	beq.n	8006a5c <HAL_LPTIM_Init+0xc4>
 8006a4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a52:	d003      	beq.n	8006a5c <HAL_LPTIM_Init+0xc4>
 8006a54:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006a58:	f040 80a0 	bne.w	8006b9c <HAL_LPTIM_Init+0x204>
    assert_param(IS_LPTIM_TRIG_SAMPLE_TIME(hlptim->Init.Trigger.SampleTime));
 8006a5c:	69e3      	ldr	r3, [r4, #28]
 8006a5e:	b133      	cbz	r3, 8006a6e <HAL_LPTIM_Init+0xd6>
 8006a60:	2b40      	cmp	r3, #64	; 0x40
 8006a62:	d004      	beq.n	8006a6e <HAL_LPTIM_Init+0xd6>
 8006a64:	2b80      	cmp	r3, #128	; 0x80
 8006a66:	d002      	beq.n	8006a6e <HAL_LPTIM_Init+0xd6>
 8006a68:	2bc0      	cmp	r3, #192	; 0xc0
 8006a6a:	f040 809d 	bne.w	8006ba8 <HAL_LPTIM_Init+0x210>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
 8006a6e:	6a23      	ldr	r3, [r4, #32]
 8006a70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a74:	d002      	beq.n	8006a7c <HAL_LPTIM_Init+0xe4>
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f040 809c 	bne.w	8006bb4 <HAL_LPTIM_Init+0x21c>
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
 8006a7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a7e:	b11b      	cbz	r3, 8006a88 <HAL_LPTIM_Init+0xf0>
 8006a80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a84:	f040 809c 	bne.w	8006bc0 <HAL_LPTIM_Init+0x228>
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
 8006a88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006a8a:	b11b      	cbz	r3, 8006a94 <HAL_LPTIM_Init+0xfc>
 8006a8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a90:	f040 809c 	bne.w	8006bcc <HAL_LPTIM_Init+0x234>
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8006a94:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 809d 	beq.w	8006bd8 <HAL_LPTIM_Init+0x240>
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8006aa4:	6826      	ldr	r6, [r4, #0]
 8006aa6:	68f2      	ldr	r2, [r6, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8006aa8:	6860      	ldr	r0, [r4, #4]
 8006aaa:	2801      	cmp	r0, #1
 8006aac:	d003      	beq.n	8006ab6 <HAL_LPTIM_Init+0x11e>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8006aae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006ab0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ab4:	d101      	bne.n	8006aba <HAL_LPTIM_Init+0x122>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8006ab6:	f022 021e 	bic.w	r2, r2, #30
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8006aba:	6961      	ldr	r1, [r4, #20]
 8006abc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ac0:	4299      	cmp	r1, r3
 8006ac2:	d003      	beq.n	8006acc <HAL_LPTIM_Init+0x134>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8006ac4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006ac8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8006acc:	4d5d      	ldr	r5, [pc, #372]	; (8006c44 <HAL_LPTIM_Init+0x2ac>)
 8006ace:	4015      	ands	r5, r2
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
              hlptim->Init.Clock.Prescaler |
 8006ad0:	68a2      	ldr	r2, [r4, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8006ad2:	ea40 0302 	orr.w	r3, r0, r2
              hlptim->Init.OutputPolarity  |
 8006ad6:	6a22      	ldr	r2, [r4, #32]
              hlptim->Init.Clock.Prescaler |
 8006ad8:	4313      	orrs	r3, r2
              hlptim->Init.UpdateMode      |
 8006ada:	6a62      	ldr	r2, [r4, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8006adc:	4313      	orrs	r3, r2
              hlptim->Init.CounterSource);
 8006ade:	6aa2      	ldr	r2, [r4, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8006ae0:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8006ae2:	432b      	orrs	r3, r5

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8006ae4:	b918      	cbnz	r0, 8006aee <HAL_LPTIM_Init+0x156>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8006ae6:	69e5      	ldr	r5, [r4, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8006ae8:	6927      	ldr	r7, [r4, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8006aea:	433d      	orrs	r5, r7
 8006aec:	432b      	orrs	r3, r5
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8006aee:	2801      	cmp	r0, #1
 8006af0:	d002      	beq.n	8006af8 <HAL_LPTIM_Init+0x160>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8006af2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8006af6:	d103      	bne.n	8006b00 <HAL_LPTIM_Init+0x168>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8006af8:	68e2      	ldr	r2, [r4, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8006afa:	6920      	ldr	r0, [r4, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8006afc:	4302      	orrs	r2, r0
 8006afe:	4313      	orrs	r3, r2
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8006b00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b04:	4291      	cmp	r1, r2
 8006b06:	d004      	beq.n	8006b12 <HAL_LPTIM_Init+0x17a>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
                hlptim->Init.Trigger.ActiveEdge |
 8006b08:	69a2      	ldr	r2, [r4, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006b0a:	4311      	orrs	r1, r2
                hlptim->Init.Trigger.SampleTime);
 8006b0c:	69e2      	ldr	r2, [r4, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8006b0e:	4311      	orrs	r1, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006b10:	430b      	orrs	r3, r1
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8006b12:	60f3      	str	r3, [r6, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	4a49      	ldr	r2, [pc, #292]	; (8006c3c <HAL_LPTIM_Init+0x2a4>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d063      	beq.n	8006be4 <HAL_LPTIM_Init+0x24c>
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
  }
  else
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
 8006b1c:	4a4a      	ldr	r2, [pc, #296]	; (8006c48 <HAL_LPTIM_Init+0x2b0>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	f000 8084 	beq.w	8006c2c <HAL_LPTIM_Init+0x294>
 8006b24:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8006b28:	4845      	ldr	r0, [pc, #276]	; (8006c40 <HAL_LPTIM_Init+0x2a8>)
 8006b2a:	f7fb fe17 	bl	800275c <assert_failed>

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8006b2e:	6823      	ldr	r3, [r4, #0]
 8006b30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006b32:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8006b34:	2301      	movs	r3, #1
 8006b36:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8006b3a:	2000      	movs	r0, #0
}
 8006b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
 8006b3e:	21fe      	movs	r1, #254	; 0xfe
 8006b40:	483f      	ldr	r0, [pc, #252]	; (8006c40 <HAL_LPTIM_Init+0x2a8>)
 8006b42:	f7fb fe0b 	bl	800275c <assert_failed>
 8006b46:	e73c      	b.n	80069c2 <HAL_LPTIM_Init+0x2a>
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
 8006b48:	21ff      	movs	r1, #255	; 0xff
 8006b4a:	483d      	ldr	r0, [pc, #244]	; (8006c40 <HAL_LPTIM_Init+0x2a8>)
 8006b4c:	f7fb fe06 	bl	800275c <assert_failed>
 8006b50:	e74f      	b.n	80069f2 <HAL_LPTIM_Init+0x5a>
    assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));
 8006b52:	68e3      	ldr	r3, [r4, #12]
 8006b54:	b11b      	cbz	r3, 8006b5e <HAL_LPTIM_Init+0x1c6>
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d001      	beq.n	8006b5e <HAL_LPTIM_Init+0x1c6>
 8006b5a:	2b04      	cmp	r3, #4
 8006b5c:	d112      	bne.n	8006b84 <HAL_LPTIM_Init+0x1ec>
    assert_param(IS_LPTIM_CLOCK_SAMPLE_TIME(hlptim->Init.UltraLowPowerClock.SampleTime));
 8006b5e:	6923      	ldr	r3, [r4, #16]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f43f af4f 	beq.w	8006a04 <HAL_LPTIM_Init+0x6c>
 8006b66:	2b08      	cmp	r3, #8
 8006b68:	f43f af4c 	beq.w	8006a04 <HAL_LPTIM_Init+0x6c>
 8006b6c:	2b10      	cmp	r3, #16
 8006b6e:	f43f af49 	beq.w	8006a04 <HAL_LPTIM_Init+0x6c>
 8006b72:	2b18      	cmp	r3, #24
 8006b74:	f43f af46 	beq.w	8006a04 <HAL_LPTIM_Init+0x6c>
 8006b78:	f44f 7182 	mov.w	r1, #260	; 0x104
 8006b7c:	4830      	ldr	r0, [pc, #192]	; (8006c40 <HAL_LPTIM_Init+0x2a8>)
 8006b7e:	f7fb fded 	bl	800275c <assert_failed>
 8006b82:	e73f      	b.n	8006a04 <HAL_LPTIM_Init+0x6c>
    assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));
 8006b84:	f240 1103 	movw	r1, #259	; 0x103
 8006b88:	482d      	ldr	r0, [pc, #180]	; (8006c40 <HAL_LPTIM_Init+0x2a8>)
 8006b8a:	f7fb fde7 	bl	800275c <assert_failed>
 8006b8e:	e7e6      	b.n	8006b5e <HAL_LPTIM_Init+0x1c6>
  assert_param(IS_LPTIM_TRG_SOURCE(hlptim->Init.Trigger.Source));
 8006b90:	f44f 7183 	mov.w	r1, #262	; 0x106
 8006b94:	482a      	ldr	r0, [pc, #168]	; (8006c40 <HAL_LPTIM_Init+0x2a8>)
 8006b96:	f7fb fde1 	bl	800275c <assert_failed>
 8006b9a:	e74f      	b.n	8006a3c <HAL_LPTIM_Init+0xa4>
    assert_param(IS_LPTIM_EXT_TRG_POLARITY(hlptim->Init.Trigger.ActiveEdge));
 8006b9c:	f240 1109 	movw	r1, #265	; 0x109
 8006ba0:	4827      	ldr	r0, [pc, #156]	; (8006c40 <HAL_LPTIM_Init+0x2a8>)
 8006ba2:	f7fb fddb 	bl	800275c <assert_failed>
 8006ba6:	e759      	b.n	8006a5c <HAL_LPTIM_Init+0xc4>
    assert_param(IS_LPTIM_TRIG_SAMPLE_TIME(hlptim->Init.Trigger.SampleTime));
 8006ba8:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8006bac:	4824      	ldr	r0, [pc, #144]	; (8006c40 <HAL_LPTIM_Init+0x2a8>)
 8006bae:	f7fb fdd5 	bl	800275c <assert_failed>
 8006bb2:	e75c      	b.n	8006a6e <HAL_LPTIM_Init+0xd6>
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
 8006bb4:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8006bb8:	4821      	ldr	r0, [pc, #132]	; (8006c40 <HAL_LPTIM_Init+0x2a8>)
 8006bba:	f7fb fdcf 	bl	800275c <assert_failed>
 8006bbe:	e75d      	b.n	8006a7c <HAL_LPTIM_Init+0xe4>
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
 8006bc0:	f240 110d 	movw	r1, #269	; 0x10d
 8006bc4:	481e      	ldr	r0, [pc, #120]	; (8006c40 <HAL_LPTIM_Init+0x2a8>)
 8006bc6:	f7fb fdc9 	bl	800275c <assert_failed>
 8006bca:	e75d      	b.n	8006a88 <HAL_LPTIM_Init+0xf0>
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
 8006bcc:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8006bd0:	481b      	ldr	r0, [pc, #108]	; (8006c40 <HAL_LPTIM_Init+0x2a8>)
 8006bd2:	f7fb fdc3 	bl	800275c <assert_failed>
 8006bd6:	e75d      	b.n	8006a94 <HAL_LPTIM_Init+0xfc>
    hlptim->Lock = HAL_UNLOCKED;
 8006bd8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    HAL_LPTIM_MspInit(hlptim);
 8006bdc:	4620      	mov	r0, r4
 8006bde:	f7fb fc7f 	bl	80024e0 <HAL_LPTIM_MspInit>
 8006be2:	e75c      	b.n	8006a9e <HAL_LPTIM_Init+0x106>
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
 8006be4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006be6:	2a01      	cmp	r2, #1
 8006be8:	d907      	bls.n	8006bfa <HAL_LPTIM_Init+0x262>
 8006bea:	4a17      	ldr	r2, [pc, #92]	; (8006c48 <HAL_LPTIM_Init+0x2b0>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d013      	beq.n	8006c18 <HAL_LPTIM_Init+0x280>
 8006bf0:	f240 117f 	movw	r1, #383	; 0x17f
 8006bf4:	4812      	ldr	r0, [pc, #72]	; (8006c40 <HAL_LPTIM_Init+0x2a8>)
 8006bf6:	f7fb fdb1 	bl	800275c <assert_failed>
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));
 8006bfa:	6822      	ldr	r2, [r4, #0]
 8006bfc:	4b0f      	ldr	r3, [pc, #60]	; (8006c3c <HAL_LPTIM_Init+0x2a4>)
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d00e      	beq.n	8006c20 <HAL_LPTIM_Init+0x288>
 8006c02:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8006c06:	480e      	ldr	r0, [pc, #56]	; (8006c40 <HAL_LPTIM_Init+0x2a8>)
 8006c08:	f7fb fda8 	bl	800275c <assert_failed>
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8006c0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006c0e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006c10:	6822      	ldr	r2, [r4, #0]
 8006c12:	430b      	orrs	r3, r1
 8006c14:	6213      	str	r3, [r2, #32]
 8006c16:	e78d      	b.n	8006b34 <HAL_LPTIM_Init+0x19c>
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
 8006c18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006c1a:	2b03      	cmp	r3, #3
 8006c1c:	d9ed      	bls.n	8006bfa <HAL_LPTIM_Init+0x262>
 8006c1e:	e7e7      	b.n	8006bf0 <HAL_LPTIM_Init+0x258>
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));
 8006c20:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d0f2      	beq.n	8006c0c <HAL_LPTIM_Init+0x274>
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d1eb      	bne.n	8006c02 <HAL_LPTIM_Init+0x26a>
 8006c2a:	e7ef      	b.n	8006c0c <HAL_LPTIM_Init+0x274>
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
 8006c2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006c2e:	2b03      	cmp	r3, #3
 8006c30:	f67f af7d 	bls.w	8006b2e <HAL_LPTIM_Init+0x196>
 8006c34:	e776      	b.n	8006b24 <HAL_LPTIM_Init+0x18c>
    return HAL_ERROR;
 8006c36:	2001      	movs	r0, #1
}
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	40007c00 	.word	0x40007c00
 8006c40:	0800b9f0 	.word	0x0800b9f0
 8006c44:	ff19f1fe 	.word	0xff19f1fe
 8006c48:	40009400 	.word	0x40009400

08006c4c <HAL_LPTIM_CompareMatchCallback>:
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8006c4c:	4770      	bx	lr

08006c4e <HAL_LPTIM_AutoReloadMatchCallback>:
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8006c4e:	4770      	bx	lr

08006c50 <HAL_LPTIM_TriggerCallback>:
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8006c50:	4770      	bx	lr

08006c52 <HAL_LPTIM_CompareWriteCallback>:
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8006c52:	4770      	bx	lr

08006c54 <HAL_LPTIM_AutoReloadWriteCallback>:
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8006c54:	4770      	bx	lr

08006c56 <HAL_LPTIM_DirectionUpCallback>:
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8006c56:	4770      	bx	lr

08006c58 <HAL_LPTIM_DirectionDownCallback>:
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8006c58:	4770      	bx	lr

08006c5a <HAL_LPTIM_IRQHandler>:
{
 8006c5a:	b510      	push	{r4, lr}
 8006c5c:	4604      	mov	r4, r0
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8006c5e:	6803      	ldr	r3, [r0, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	f012 0f01 	tst.w	r2, #1
 8006c66:	d003      	beq.n	8006c70 <HAL_LPTIM_IRQHandler+0x16>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8006c68:	689a      	ldr	r2, [r3, #8]
 8006c6a:	f012 0f01 	tst.w	r2, #1
 8006c6e:	d136      	bne.n	8006cde <HAL_LPTIM_IRQHandler+0x84>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8006c70:	6823      	ldr	r3, [r4, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	f012 0f02 	tst.w	r2, #2
 8006c78:	d003      	beq.n	8006c82 <HAL_LPTIM_IRQHandler+0x28>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8006c7a:	689a      	ldr	r2, [r3, #8]
 8006c7c:	f012 0f02 	tst.w	r2, #2
 8006c80:	d132      	bne.n	8006ce8 <HAL_LPTIM_IRQHandler+0x8e>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8006c82:	6823      	ldr	r3, [r4, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	f012 0f04 	tst.w	r2, #4
 8006c8a:	d003      	beq.n	8006c94 <HAL_LPTIM_IRQHandler+0x3a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8006c8c:	689a      	ldr	r2, [r3, #8]
 8006c8e:	f012 0f04 	tst.w	r2, #4
 8006c92:	d12f      	bne.n	8006cf4 <HAL_LPTIM_IRQHandler+0x9a>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8006c94:	6823      	ldr	r3, [r4, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	f012 0f08 	tst.w	r2, #8
 8006c9c:	d003      	beq.n	8006ca6 <HAL_LPTIM_IRQHandler+0x4c>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8006c9e:	689a      	ldr	r2, [r3, #8]
 8006ca0:	f012 0f08 	tst.w	r2, #8
 8006ca4:	d12c      	bne.n	8006d00 <HAL_LPTIM_IRQHandler+0xa6>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8006ca6:	6823      	ldr	r3, [r4, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	f012 0f10 	tst.w	r2, #16
 8006cae:	d003      	beq.n	8006cb8 <HAL_LPTIM_IRQHandler+0x5e>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8006cb0:	689a      	ldr	r2, [r3, #8]
 8006cb2:	f012 0f10 	tst.w	r2, #16
 8006cb6:	d129      	bne.n	8006d0c <HAL_LPTIM_IRQHandler+0xb2>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8006cb8:	6823      	ldr	r3, [r4, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	f012 0f20 	tst.w	r2, #32
 8006cc0:	d003      	beq.n	8006cca <HAL_LPTIM_IRQHandler+0x70>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8006cc2:	689a      	ldr	r2, [r3, #8]
 8006cc4:	f012 0f20 	tst.w	r2, #32
 8006cc8:	d126      	bne.n	8006d18 <HAL_LPTIM_IRQHandler+0xbe>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006cd2:	d003      	beq.n	8006cdc <HAL_LPTIM_IRQHandler+0x82>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8006cd4:	689a      	ldr	r2, [r3, #8]
 8006cd6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006cda:	d123      	bne.n	8006d24 <HAL_LPTIM_IRQHandler+0xca>
}
 8006cdc:	bd10      	pop	{r4, pc}
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8006cde:	2201      	movs	r2, #1
 8006ce0:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8006ce2:	f7ff ffb3 	bl	8006c4c <HAL_LPTIM_CompareMatchCallback>
 8006ce6:	e7c3      	b.n	8006c70 <HAL_LPTIM_IRQHandler+0x16>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8006ce8:	2202      	movs	r2, #2
 8006cea:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8006cec:	4620      	mov	r0, r4
 8006cee:	f7ff ffae 	bl	8006c4e <HAL_LPTIM_AutoReloadMatchCallback>
 8006cf2:	e7c6      	b.n	8006c82 <HAL_LPTIM_IRQHandler+0x28>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8006cf4:	2204      	movs	r2, #4
 8006cf6:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_TriggerCallback(hlptim);
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f7ff ffa9 	bl	8006c50 <HAL_LPTIM_TriggerCallback>
 8006cfe:	e7c9      	b.n	8006c94 <HAL_LPTIM_IRQHandler+0x3a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8006d00:	2208      	movs	r2, #8
 8006d02:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8006d04:	4620      	mov	r0, r4
 8006d06:	f7ff ffa4 	bl	8006c52 <HAL_LPTIM_CompareWriteCallback>
 8006d0a:	e7cc      	b.n	8006ca6 <HAL_LPTIM_IRQHandler+0x4c>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8006d0c:	2210      	movs	r2, #16
 8006d0e:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8006d10:	4620      	mov	r0, r4
 8006d12:	f7ff ff9f 	bl	8006c54 <HAL_LPTIM_AutoReloadWriteCallback>
 8006d16:	e7cf      	b.n	8006cb8 <HAL_LPTIM_IRQHandler+0x5e>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8006d18:	2220      	movs	r2, #32
 8006d1a:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	f7ff ff9a 	bl	8006c56 <HAL_LPTIM_DirectionUpCallback>
 8006d22:	e7d2      	b.n	8006cca <HAL_LPTIM_IRQHandler+0x70>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8006d24:	2240      	movs	r2, #64	; 0x40
 8006d26:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8006d28:	4620      	mov	r0, r4
 8006d2a:	f7ff ff95 	bl	8006c58 <HAL_LPTIM_DirectionDownCallback>
}
 8006d2e:	e7d5      	b.n	8006cdc <HAL_LPTIM_IRQHandler+0x82>

08006d30 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006d30:	4b02      	ldr	r3, [pc, #8]	; (8006d3c <HAL_PWREx_GetVoltageRange+0xc>)
 8006d32:	6818      	ldr	r0, [r3, #0]
#endif
}
 8006d34:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	40007000 	.word	0x40007000

08006d40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006d40:	b510      	push	{r4, lr}
 8006d42:	4604      	mov	r4, r0
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8006d44:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006d48:	d002      	beq.n	8006d50 <HAL_PWREx_ControlVoltageScaling+0x10>
 8006d4a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006d4e:	d112      	bne.n	8006d76 <HAL_PWREx_ControlVoltageScaling+0x36>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d50:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8006d54:	d014      	beq.n	8006d80 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006d56:	4b21      	ldr	r3, [pc, #132]	; (8006ddc <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d62:	d039      	beq.n	8006dd8 <HAL_PWREx_ControlVoltageScaling+0x98>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006d64:	4a1d      	ldr	r2, [pc, #116]	; (8006ddc <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8006d66:	6813      	ldr	r3, [r2, #0]
 8006d68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006d6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d70:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006d72:	2000      	movs	r0, #0
}
 8006d74:	bd10      	pop	{r4, pc}
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8006d76:	21a7      	movs	r1, #167	; 0xa7
 8006d78:	4819      	ldr	r0, [pc, #100]	; (8006de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d7a:	f7fb fcef 	bl	800275c <assert_failed>
 8006d7e:	e7e7      	b.n	8006d50 <HAL_PWREx_ControlVoltageScaling+0x10>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d80:	4b16      	ldr	r3, [pc, #88]	; (8006ddc <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d8c:	d020      	beq.n	8006dd0 <HAL_PWREx_ControlVoltageScaling+0x90>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006d8e:	4a13      	ldr	r2, [pc, #76]	; (8006ddc <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8006d90:	6813      	ldr	r3, [r2, #0]
 8006d92:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006d96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d9a:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006d9c:	4b11      	ldr	r3, [pc, #68]	; (8006de4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	2332      	movs	r3, #50	; 0x32
 8006da2:	fb03 f302 	mul.w	r3, r3, r2
 8006da6:	4a10      	ldr	r2, [pc, #64]	; (8006de8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006da8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dac:	0c9b      	lsrs	r3, r3, #18
 8006dae:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006db0:	e000      	b.n	8006db4 <HAL_PWREx_ControlVoltageScaling+0x74>
        wait_loop_index--;
 8006db2:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006db4:	4a09      	ldr	r2, [pc, #36]	; (8006ddc <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8006db6:	6952      	ldr	r2, [r2, #20]
 8006db8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8006dbc:	d001      	beq.n	8006dc2 <HAL_PWREx_ControlVoltageScaling+0x82>
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1f7      	bne.n	8006db2 <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006dc2:	4b06      	ldr	r3, [pc, #24]	; (8006ddc <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006dca:	d103      	bne.n	8006dd4 <HAL_PWREx_ControlVoltageScaling+0x94>
  return HAL_OK;
 8006dcc:	2000      	movs	r0, #0
 8006dce:	e7d1      	b.n	8006d74 <HAL_PWREx_ControlVoltageScaling+0x34>
 8006dd0:	2000      	movs	r0, #0
 8006dd2:	e7cf      	b.n	8006d74 <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 8006dd4:	2003      	movs	r0, #3
 8006dd6:	e7cd      	b.n	8006d74 <HAL_PWREx_ControlVoltageScaling+0x34>
  return HAL_OK;
 8006dd8:	2000      	movs	r0, #0
 8006dda:	e7cb      	b.n	8006d74 <HAL_PWREx_ControlVoltageScaling+0x34>
 8006ddc:	40007000 	.word	0x40007000
 8006de0:	0800ba2c 	.word	0x0800ba2c
 8006de4:	200015f4 	.word	0x200015f4
 8006de8:	431bde83 	.word	0x431bde83

08006dec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006dec:	b530      	push	{r4, r5, lr}
 8006dee:	b083      	sub	sp, #12
 8006df0:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006df2:	4b20      	ldr	r3, [pc, #128]	; (8006e74 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8006df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8006dfa:	d00b      	beq.n	8006e14 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006dfc:	f7ff ff98 	bl	8006d30 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e00:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006e04:	d017      	beq.n	8006e36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006e06:	2c80      	cmp	r4, #128	; 0x80
 8006e08:	d81f      	bhi.n	8006e4a <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006e0a:	d02d      	beq.n	8006e68 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006e0c:	2c70      	cmp	r4, #112	; 0x70
 8006e0e:	d02d      	beq.n	8006e6c <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006e10:	2100      	movs	r1, #0
 8006e12:	e01b      	b.n	8006e4c <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e14:	4d17      	ldr	r5, [pc, #92]	; (8006e74 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8006e16:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8006e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e1c:	65ab      	str	r3, [r5, #88]	; 0x58
 8006e1e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8006e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e24:	9301      	str	r3, [sp, #4]
 8006e26:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8006e28:	f7ff ff82 	bl	8006d30 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8006e2c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8006e2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e32:	65ab      	str	r3, [r5, #88]	; 0x58
 8006e34:	e7e4      	b.n	8006e00 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8006e36:	2c80      	cmp	r4, #128	; 0x80
 8006e38:	d903      	bls.n	8006e42 <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8006e3a:	2ca0      	cmp	r4, #160	; 0xa0
 8006e3c:	d903      	bls.n	8006e46 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8006e3e:	2102      	movs	r1, #2
 8006e40:	e004      	b.n	8006e4c <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006e42:	2100      	movs	r1, #0
 8006e44:	e002      	b.n	8006e4c <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8006e46:	2101      	movs	r1, #1
 8006e48:	e000      	b.n	8006e4c <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8006e4a:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006e4c:	4a0a      	ldr	r2, [pc, #40]	; (8006e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8006e4e:	6813      	ldr	r3, [r2, #0]
 8006e50:	f023 0307 	bic.w	r3, r3, #7
 8006e54:	430b      	orrs	r3, r1
 8006e56:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006e58:	6813      	ldr	r3, [r2, #0]
 8006e5a:	f003 0307 	and.w	r3, r3, #7
 8006e5e:	428b      	cmp	r3, r1
 8006e60:	d106      	bne.n	8006e70 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006e62:	2000      	movs	r0, #0
}
 8006e64:	b003      	add	sp, #12
 8006e66:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8006e68:	2102      	movs	r1, #2
 8006e6a:	e7ef      	b.n	8006e4c <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	e7ed      	b.n	8006e4c <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 8006e70:	2001      	movs	r0, #1
 8006e72:	e7f7      	b.n	8006e64 <RCC_SetFlashLatencyFromMSIRange+0x78>
 8006e74:	40021000 	.word	0x40021000
 8006e78:	40022000 	.word	0x40022000

08006e7c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e7c:	4a28      	ldr	r2, [pc, #160]	; (8006f20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006e7e:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e80:	68d2      	ldr	r2, [r2, #12]
 8006e82:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006e86:	f013 030c 	ands.w	r3, r3, #12
 8006e8a:	d00a      	beq.n	8006ea2 <HAL_RCC_GetSysClockFreq+0x26>
 8006e8c:	2b0c      	cmp	r3, #12
 8006e8e:	d006      	beq.n	8006e9e <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006e90:	2b04      	cmp	r3, #4
 8006e92:	d01f      	beq.n	8006ed4 <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006e94:	2b08      	cmp	r3, #8
 8006e96:	d020      	beq.n	8006eda <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006e98:	2000      	movs	r0, #0
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	e010      	b.n	8006ec0 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006e9e:	2a01      	cmp	r2, #1
 8006ea0:	d1f6      	bne.n	8006e90 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006ea2:	4a1f      	ldr	r2, [pc, #124]	; (8006f20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006ea4:	6812      	ldr	r2, [r2, #0]
 8006ea6:	f012 0f08 	tst.w	r2, #8
 8006eaa:	d10c      	bne.n	8006ec6 <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006eac:	4a1c      	ldr	r2, [pc, #112]	; (8006f20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006eae:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8006eb2:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8006eb6:	491b      	ldr	r1, [pc, #108]	; (8006f24 <HAL_RCC_GetSysClockFreq+0xa8>)
 8006eb8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ebc:	b143      	cbz	r3, 8006ed0 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006ebe:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006ec0:	2b0c      	cmp	r3, #12
 8006ec2:	d00d      	beq.n	8006ee0 <HAL_RCC_GetSysClockFreq+0x64>
}
 8006ec4:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006ec6:	4a16      	ldr	r2, [pc, #88]	; (8006f20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006ec8:	6812      	ldr	r2, [r2, #0]
 8006eca:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8006ece:	e7f2      	b.n	8006eb6 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	e7f5      	b.n	8006ec0 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8006ed4:	4814      	ldr	r0, [pc, #80]	; (8006f28 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	e7f2      	b.n	8006ec0 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8006eda:	4814      	ldr	r0, [pc, #80]	; (8006f2c <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006edc:	2200      	movs	r2, #0
 8006ede:	e7ef      	b.n	8006ec0 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ee0:	4b0f      	ldr	r3, [pc, #60]	; (8006f20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d016      	beq.n	8006f1a <HAL_RCC_GetSysClockFreq+0x9e>
 8006eec:	2b03      	cmp	r3, #3
 8006eee:	d100      	bne.n	8006ef2 <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 8006ef0:	4a0e      	ldr	r2, [pc, #56]	; (8006f2c <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ef2:	4b0b      	ldr	r3, [pc, #44]	; (8006f20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006ef4:	68d8      	ldr	r0, [r3, #12]
 8006ef6:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8006efa:	3001      	adds	r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006efc:	68d9      	ldr	r1, [r3, #12]
 8006efe:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8006f02:	fb02 f201 	mul.w	r2, r2, r1
 8006f06:	fbb2 f2f0 	udiv	r2, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f0a:	68d8      	ldr	r0, [r3, #12]
 8006f0c:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8006f10:	3001      	adds	r0, #1
 8006f12:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 8006f14:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8006f18:	e7d4      	b.n	8006ec4 <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 8006f1a:	4a03      	ldr	r2, [pc, #12]	; (8006f28 <HAL_RCC_GetSysClockFreq+0xac>)
 8006f1c:	e7e9      	b.n	8006ef2 <HAL_RCC_GetSysClockFreq+0x76>
 8006f1e:	bf00      	nop
 8006f20:	40021000 	.word	0x40021000
 8006f24:	0800b528 	.word	0x0800b528
 8006f28:	00f42400 	.word	0x00f42400
 8006f2c:	007a1200 	.word	0x007a1200

08006f30 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8006f30:	2800      	cmp	r0, #0
 8006f32:	f000 83f8 	beq.w	8007726 <HAL_RCC_OscConfig+0x7f6>
{
 8006f36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f38:	b083      	sub	sp, #12
 8006f3a:	4604      	mov	r4, r0
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8006f3c:	6803      	ldr	r3, [r0, #0]
 8006f3e:	b113      	cbz	r3, 8006f46 <HAL_RCC_OscConfig+0x16>
 8006f40:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 8006f44:	d146      	bne.n	8006fd4 <HAL_RCC_OscConfig+0xa4>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f46:	4bad      	ldr	r3, [pc, #692]	; (80071fc <HAL_RCC_OscConfig+0x2cc>)
 8006f48:	689d      	ldr	r5, [r3, #8]
 8006f4a:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f4e:	68de      	ldr	r6, [r3, #12]
 8006f50:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006f54:	6823      	ldr	r3, [r4, #0]
 8006f56:	f013 0f10 	tst.w	r3, #16
 8006f5a:	f000 8092 	beq.w	8007082 <HAL_RCC_OscConfig+0x152>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8006f5e:	69a3      	ldr	r3, [r4, #24]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d83d      	bhi.n	8006fe0 <HAL_RCC_OscConfig+0xb0>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8006f64:	69e3      	ldr	r3, [r4, #28]
 8006f66:	2bff      	cmp	r3, #255	; 0xff
 8006f68:	d840      	bhi.n	8006fec <HAL_RCC_OscConfig+0xbc>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8006f6a:	6a23      	ldr	r3, [r4, #32]
 8006f6c:	b1ab      	cbz	r3, 8006f9a <HAL_RCC_OscConfig+0x6a>
 8006f6e:	2b10      	cmp	r3, #16
 8006f70:	d013      	beq.n	8006f9a <HAL_RCC_OscConfig+0x6a>
 8006f72:	2b20      	cmp	r3, #32
 8006f74:	d011      	beq.n	8006f9a <HAL_RCC_OscConfig+0x6a>
 8006f76:	2b30      	cmp	r3, #48	; 0x30
 8006f78:	d00f      	beq.n	8006f9a <HAL_RCC_OscConfig+0x6a>
 8006f7a:	2b40      	cmp	r3, #64	; 0x40
 8006f7c:	d00d      	beq.n	8006f9a <HAL_RCC_OscConfig+0x6a>
 8006f7e:	2b50      	cmp	r3, #80	; 0x50
 8006f80:	d00b      	beq.n	8006f9a <HAL_RCC_OscConfig+0x6a>
 8006f82:	2b60      	cmp	r3, #96	; 0x60
 8006f84:	d009      	beq.n	8006f9a <HAL_RCC_OscConfig+0x6a>
 8006f86:	2b70      	cmp	r3, #112	; 0x70
 8006f88:	d007      	beq.n	8006f9a <HAL_RCC_OscConfig+0x6a>
 8006f8a:	2b80      	cmp	r3, #128	; 0x80
 8006f8c:	d005      	beq.n	8006f9a <HAL_RCC_OscConfig+0x6a>
 8006f8e:	2b90      	cmp	r3, #144	; 0x90
 8006f90:	d003      	beq.n	8006f9a <HAL_RCC_OscConfig+0x6a>
 8006f92:	2ba0      	cmp	r3, #160	; 0xa0
 8006f94:	d001      	beq.n	8006f9a <HAL_RCC_OscConfig+0x6a>
 8006f96:	2bb0      	cmp	r3, #176	; 0xb0
 8006f98:	d12e      	bne.n	8006ff8 <HAL_RCC_OscConfig+0xc8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006f9a:	2d00      	cmp	r5, #0
 8006f9c:	d034      	beq.n	8007008 <HAL_RCC_OscConfig+0xd8>
 8006f9e:	2d0c      	cmp	r5, #12
 8006fa0:	d030      	beq.n	8007004 <HAL_RCC_OscConfig+0xd4>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006fa2:	69a3      	ldr	r3, [r4, #24]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 80db 	beq.w	8007160 <HAL_RCC_OscConfig+0x230>
        __HAL_RCC_MSI_ENABLE();
 8006faa:	4a94      	ldr	r2, [pc, #592]	; (80071fc <HAL_RCC_OscConfig+0x2cc>)
 8006fac:	6813      	ldr	r3, [r2, #0]
 8006fae:	f043 0301 	orr.w	r3, r3, #1
 8006fb2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006fb4:	f7fd fba0 	bl	80046f8 <HAL_GetTick>
 8006fb8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006fba:	4b90      	ldr	r3, [pc, #576]	; (80071fc <HAL_RCC_OscConfig+0x2cc>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f013 0f02 	tst.w	r3, #2
 8006fc2:	f040 80ba 	bne.w	800713a <HAL_RCC_OscConfig+0x20a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006fc6:	f7fd fb97 	bl	80046f8 <HAL_GetTick>
 8006fca:	1bc0      	subs	r0, r0, r7
 8006fcc:	2802      	cmp	r0, #2
 8006fce:	d9f4      	bls.n	8006fba <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8006fd0:	2003      	movs	r0, #3
 8006fd2:	e3b3      	b.n	800773c <HAL_RCC_OscConfig+0x80c>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8006fd4:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8006fd8:	4889      	ldr	r0, [pc, #548]	; (8007200 <HAL_RCC_OscConfig+0x2d0>)
 8006fda:	f7fb fbbf 	bl	800275c <assert_failed>
 8006fde:	e7b2      	b.n	8006f46 <HAL_RCC_OscConfig+0x16>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8006fe0:	f240 11a9 	movw	r1, #425	; 0x1a9
 8006fe4:	4886      	ldr	r0, [pc, #536]	; (8007200 <HAL_RCC_OscConfig+0x2d0>)
 8006fe6:	f7fb fbb9 	bl	800275c <assert_failed>
 8006fea:	e7bb      	b.n	8006f64 <HAL_RCC_OscConfig+0x34>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8006fec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006ff0:	4883      	ldr	r0, [pc, #524]	; (8007200 <HAL_RCC_OscConfig+0x2d0>)
 8006ff2:	f7fb fbb3 	bl	800275c <assert_failed>
 8006ff6:	e7b8      	b.n	8006f6a <HAL_RCC_OscConfig+0x3a>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8006ff8:	f240 11ab 	movw	r1, #427	; 0x1ab
 8006ffc:	4880      	ldr	r0, [pc, #512]	; (8007200 <HAL_RCC_OscConfig+0x2d0>)
 8006ffe:	f7fb fbad 	bl	800275c <assert_failed>
 8007002:	e7ca      	b.n	8006f9a <HAL_RCC_OscConfig+0x6a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007004:	2e01      	cmp	r6, #1
 8007006:	d1cc      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x72>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007008:	4b7c      	ldr	r3, [pc, #496]	; (80071fc <HAL_RCC_OscConfig+0x2cc>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f013 0f02 	tst.w	r3, #2
 8007010:	d003      	beq.n	800701a <HAL_RCC_OscConfig+0xea>
 8007012:	69a3      	ldr	r3, [r4, #24]
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 8388 	beq.w	800772a <HAL_RCC_OscConfig+0x7fa>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800701a:	6a20      	ldr	r0, [r4, #32]
 800701c:	4b77      	ldr	r3, [pc, #476]	; (80071fc <HAL_RCC_OscConfig+0x2cc>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f013 0f08 	tst.w	r3, #8
 8007024:	d063      	beq.n	80070ee <HAL_RCC_OscConfig+0x1be>
 8007026:	4b75      	ldr	r3, [pc, #468]	; (80071fc <HAL_RCC_OscConfig+0x2cc>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800702e:	4298      	cmp	r0, r3
 8007030:	d864      	bhi.n	80070fc <HAL_RCC_OscConfig+0x1cc>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007032:	4b72      	ldr	r3, [pc, #456]	; (80071fc <HAL_RCC_OscConfig+0x2cc>)
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	f042 0208 	orr.w	r2, r2, #8
 800703a:	601a      	str	r2, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007042:	6a21      	ldr	r1, [r4, #32]
 8007044:	430a      	orrs	r2, r1
 8007046:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007048:	685a      	ldr	r2, [r3, #4]
 800704a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800704e:	69e1      	ldr	r1, [r4, #28]
 8007050:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007054:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007056:	2d00      	cmp	r5, #0
 8007058:	d068      	beq.n	800712c <HAL_RCC_OscConfig+0x1fc>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800705a:	f7ff ff0f 	bl	8006e7c <HAL_RCC_GetSysClockFreq>
 800705e:	4b67      	ldr	r3, [pc, #412]	; (80071fc <HAL_RCC_OscConfig+0x2cc>)
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007066:	4a67      	ldr	r2, [pc, #412]	; (8007204 <HAL_RCC_OscConfig+0x2d4>)
 8007068:	5cd3      	ldrb	r3, [r2, r3]
 800706a:	f003 031f 	and.w	r3, r3, #31
 800706e:	40d8      	lsrs	r0, r3
 8007070:	4b65      	ldr	r3, [pc, #404]	; (8007208 <HAL_RCC_OscConfig+0x2d8>)
 8007072:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8007074:	4b65      	ldr	r3, [pc, #404]	; (800720c <HAL_RCC_OscConfig+0x2dc>)
 8007076:	6818      	ldr	r0, [r3, #0]
 8007078:	f7fd faf2 	bl	8004660 <HAL_InitTick>
        if(status != HAL_OK)
 800707c:	2800      	cmp	r0, #0
 800707e:	f040 835d 	bne.w	800773c <HAL_RCC_OscConfig+0x80c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007082:	6823      	ldr	r3, [r4, #0]
 8007084:	f013 0f01 	tst.w	r3, #1
 8007088:	f000 808f 	beq.w	80071aa <HAL_RCC_OscConfig+0x27a>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800708c:	6863      	ldr	r3, [r4, #4]
 800708e:	b12b      	cbz	r3, 800709c <HAL_RCC_OscConfig+0x16c>
 8007090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007094:	d002      	beq.n	800709c <HAL_RCC_OscConfig+0x16c>
 8007096:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800709a:	d175      	bne.n	8007188 <HAL_RCC_OscConfig+0x258>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800709c:	2d08      	cmp	r5, #8
 800709e:	d07b      	beq.n	8007198 <HAL_RCC_OscConfig+0x268>
 80070a0:	2d0c      	cmp	r5, #12
 80070a2:	d077      	beq.n	8007194 <HAL_RCC_OscConfig+0x264>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070a4:	6863      	ldr	r3, [r4, #4]
 80070a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070aa:	f000 80b1 	beq.w	8007210 <HAL_RCC_OscConfig+0x2e0>
 80070ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070b2:	f000 80b3 	beq.w	800721c <HAL_RCC_OscConfig+0x2ec>
 80070b6:	4b51      	ldr	r3, [pc, #324]	; (80071fc <HAL_RCC_OscConfig+0x2cc>)
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80070be:	601a      	str	r2, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80070c6:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070c8:	6863      	ldr	r3, [r4, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f000 80b3 	beq.w	8007236 <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 80070d0:	f7fd fb12 	bl	80046f8 <HAL_GetTick>
 80070d4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070d6:	4b49      	ldr	r3, [pc, #292]	; (80071fc <HAL_RCC_OscConfig+0x2cc>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80070de:	d164      	bne.n	80071aa <HAL_RCC_OscConfig+0x27a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070e0:	f7fd fb0a 	bl	80046f8 <HAL_GetTick>
 80070e4:	1bc0      	subs	r0, r0, r7
 80070e6:	2864      	cmp	r0, #100	; 0x64
 80070e8:	d9f5      	bls.n	80070d6 <HAL_RCC_OscConfig+0x1a6>
            return HAL_TIMEOUT;
 80070ea:	2003      	movs	r0, #3
 80070ec:	e326      	b.n	800773c <HAL_RCC_OscConfig+0x80c>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80070ee:	4b43      	ldr	r3, [pc, #268]	; (80071fc <HAL_RCC_OscConfig+0x2cc>)
 80070f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070f4:	091b      	lsrs	r3, r3, #4
 80070f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070fa:	e798      	b.n	800702e <HAL_RCC_OscConfig+0xfe>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80070fc:	f7ff fe76 	bl	8006dec <RCC_SetFlashLatencyFromMSIRange>
 8007100:	2800      	cmp	r0, #0
 8007102:	f040 8314 	bne.w	800772e <HAL_RCC_OscConfig+0x7fe>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007106:	4b3d      	ldr	r3, [pc, #244]	; (80071fc <HAL_RCC_OscConfig+0x2cc>)
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	f042 0208 	orr.w	r2, r2, #8
 800710e:	601a      	str	r2, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007116:	6a21      	ldr	r1, [r4, #32]
 8007118:	430a      	orrs	r2, r1
 800711a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8007122:	69e1      	ldr	r1, [r4, #28]
 8007124:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007128:	605a      	str	r2, [r3, #4]
 800712a:	e796      	b.n	800705a <HAL_RCC_OscConfig+0x12a>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800712c:	6a20      	ldr	r0, [r4, #32]
 800712e:	f7ff fe5d 	bl	8006dec <RCC_SetFlashLatencyFromMSIRange>
 8007132:	2800      	cmp	r0, #0
 8007134:	d091      	beq.n	800705a <HAL_RCC_OscConfig+0x12a>
              return HAL_ERROR;
 8007136:	2001      	movs	r0, #1
 8007138:	e300      	b.n	800773c <HAL_RCC_OscConfig+0x80c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800713a:	4b30      	ldr	r3, [pc, #192]	; (80071fc <HAL_RCC_OscConfig+0x2cc>)
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	f042 0208 	orr.w	r2, r2, #8
 8007142:	601a      	str	r2, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800714a:	6a21      	ldr	r1, [r4, #32]
 800714c:	430a      	orrs	r2, r1
 800714e:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007150:	685a      	ldr	r2, [r3, #4]
 8007152:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8007156:	69e1      	ldr	r1, [r4, #28]
 8007158:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800715c:	605a      	str	r2, [r3, #4]
 800715e:	e790      	b.n	8007082 <HAL_RCC_OscConfig+0x152>
        __HAL_RCC_MSI_DISABLE();
 8007160:	4a26      	ldr	r2, [pc, #152]	; (80071fc <HAL_RCC_OscConfig+0x2cc>)
 8007162:	6813      	ldr	r3, [r2, #0]
 8007164:	f023 0301 	bic.w	r3, r3, #1
 8007168:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800716a:	f7fd fac5 	bl	80046f8 <HAL_GetTick>
 800716e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007170:	4b22      	ldr	r3, [pc, #136]	; (80071fc <HAL_RCC_OscConfig+0x2cc>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f013 0f02 	tst.w	r3, #2
 8007178:	d083      	beq.n	8007082 <HAL_RCC_OscConfig+0x152>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800717a:	f7fd fabd 	bl	80046f8 <HAL_GetTick>
 800717e:	1bc0      	subs	r0, r0, r7
 8007180:	2802      	cmp	r0, #2
 8007182:	d9f5      	bls.n	8007170 <HAL_RCC_OscConfig+0x240>
            return HAL_TIMEOUT;
 8007184:	2003      	movs	r0, #3
 8007186:	e2d9      	b.n	800773c <HAL_RCC_OscConfig+0x80c>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8007188:	f240 2117 	movw	r1, #535	; 0x217
 800718c:	481c      	ldr	r0, [pc, #112]	; (8007200 <HAL_RCC_OscConfig+0x2d0>)
 800718e:	f7fb fae5 	bl	800275c <assert_failed>
 8007192:	e783      	b.n	800709c <HAL_RCC_OscConfig+0x16c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007194:	2e03      	cmp	r6, #3
 8007196:	d185      	bne.n	80070a4 <HAL_RCC_OscConfig+0x174>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007198:	4b18      	ldr	r3, [pc, #96]	; (80071fc <HAL_RCC_OscConfig+0x2cc>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80071a0:	d003      	beq.n	80071aa <HAL_RCC_OscConfig+0x27a>
 80071a2:	6863      	ldr	r3, [r4, #4]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f000 82c4 	beq.w	8007732 <HAL_RCC_OscConfig+0x802>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071aa:	6823      	ldr	r3, [r4, #0]
 80071ac:	f013 0f02 	tst.w	r3, #2
 80071b0:	d06f      	beq.n	8007292 <HAL_RCC_OscConfig+0x362>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80071b2:	68e3      	ldr	r3, [r4, #12]
 80071b4:	b113      	cbz	r3, 80071bc <HAL_RCC_OscConfig+0x28c>
 80071b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ba:	d14b      	bne.n	8007254 <HAL_RCC_OscConfig+0x324>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80071bc:	6923      	ldr	r3, [r4, #16]
 80071be:	2b1f      	cmp	r3, #31
 80071c0:	d84e      	bhi.n	8007260 <HAL_RCC_OscConfig+0x330>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80071c2:	2d04      	cmp	r5, #4
 80071c4:	d054      	beq.n	8007270 <HAL_RCC_OscConfig+0x340>
 80071c6:	2d0c      	cmp	r5, #12
 80071c8:	d050      	beq.n	800726c <HAL_RCC_OscConfig+0x33c>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80071ca:	68e3      	ldr	r3, [r4, #12]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f000 808a 	beq.w	80072e6 <HAL_RCC_OscConfig+0x3b6>
        __HAL_RCC_HSI_ENABLE();
 80071d2:	4a0a      	ldr	r2, [pc, #40]	; (80071fc <HAL_RCC_OscConfig+0x2cc>)
 80071d4:	6813      	ldr	r3, [r2, #0]
 80071d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071da:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80071dc:	f7fd fa8c 	bl	80046f8 <HAL_GetTick>
 80071e0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071e2:	4b06      	ldr	r3, [pc, #24]	; (80071fc <HAL_RCC_OscConfig+0x2cc>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80071ea:	d173      	bne.n	80072d4 <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071ec:	f7fd fa84 	bl	80046f8 <HAL_GetTick>
 80071f0:	1b80      	subs	r0, r0, r6
 80071f2:	2802      	cmp	r0, #2
 80071f4:	d9f5      	bls.n	80071e2 <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 80071f6:	2003      	movs	r0, #3
 80071f8:	e2a0      	b.n	800773c <HAL_RCC_OscConfig+0x80c>
 80071fa:	bf00      	nop
 80071fc:	40021000 	.word	0x40021000
 8007200:	0800ba68 	.word	0x0800ba68
 8007204:	0800b558 	.word	0x0800b558
 8007208:	200015f4 	.word	0x200015f4
 800720c:	20001a3c 	.word	0x20001a3c
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007210:	4ab4      	ldr	r2, [pc, #720]	; (80074e4 <HAL_RCC_OscConfig+0x5b4>)
 8007212:	6813      	ldr	r3, [r2, #0]
 8007214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007218:	6013      	str	r3, [r2, #0]
 800721a:	e755      	b.n	80070c8 <HAL_RCC_OscConfig+0x198>
 800721c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007220:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800722a:	601a      	str	r2, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	e748      	b.n	80070c8 <HAL_RCC_OscConfig+0x198>
        tickstart = HAL_GetTick();
 8007236:	f7fd fa5f 	bl	80046f8 <HAL_GetTick>
 800723a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800723c:	4ba9      	ldr	r3, [pc, #676]	; (80074e4 <HAL_RCC_OscConfig+0x5b4>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007244:	d0b1      	beq.n	80071aa <HAL_RCC_OscConfig+0x27a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007246:	f7fd fa57 	bl	80046f8 <HAL_GetTick>
 800724a:	1bc0      	subs	r0, r0, r7
 800724c:	2864      	cmp	r0, #100	; 0x64
 800724e:	d9f5      	bls.n	800723c <HAL_RCC_OscConfig+0x30c>
            return HAL_TIMEOUT;
 8007250:	2003      	movs	r0, #3
 8007252:	e273      	b.n	800773c <HAL_RCC_OscConfig+0x80c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8007254:	f240 214a 	movw	r1, #586	; 0x24a
 8007258:	48a3      	ldr	r0, [pc, #652]	; (80074e8 <HAL_RCC_OscConfig+0x5b8>)
 800725a:	f7fb fa7f 	bl	800275c <assert_failed>
 800725e:	e7ad      	b.n	80071bc <HAL_RCC_OscConfig+0x28c>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8007260:	f240 214b 	movw	r1, #587	; 0x24b
 8007264:	48a0      	ldr	r0, [pc, #640]	; (80074e8 <HAL_RCC_OscConfig+0x5b8>)
 8007266:	f7fb fa79 	bl	800275c <assert_failed>
 800726a:	e7aa      	b.n	80071c2 <HAL_RCC_OscConfig+0x292>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800726c:	2e02      	cmp	r6, #2
 800726e:	d1ac      	bne.n	80071ca <HAL_RCC_OscConfig+0x29a>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007270:	4b9c      	ldr	r3, [pc, #624]	; (80074e4 <HAL_RCC_OscConfig+0x5b4>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007278:	d003      	beq.n	8007282 <HAL_RCC_OscConfig+0x352>
 800727a:	68e3      	ldr	r3, [r4, #12]
 800727c:	2b00      	cmp	r3, #0
 800727e:	f000 825a 	beq.w	8007736 <HAL_RCC_OscConfig+0x806>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007282:	4a98      	ldr	r2, [pc, #608]	; (80074e4 <HAL_RCC_OscConfig+0x5b4>)
 8007284:	6853      	ldr	r3, [r2, #4]
 8007286:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800728a:	6921      	ldr	r1, [r4, #16]
 800728c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007290:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	f013 0f08 	tst.w	r3, #8
 8007298:	d056      	beq.n	8007348 <HAL_RCC_OscConfig+0x418>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800729a:	6963      	ldr	r3, [r4, #20]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d836      	bhi.n	800730e <HAL_RCC_OscConfig+0x3de>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80072a0:	6963      	ldr	r3, [r4, #20]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d039      	beq.n	800731a <HAL_RCC_OscConfig+0x3ea>
      __HAL_RCC_LSI_ENABLE();
 80072a6:	4a8f      	ldr	r2, [pc, #572]	; (80074e4 <HAL_RCC_OscConfig+0x5b4>)
 80072a8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80072ac:	f043 0301 	orr.w	r3, r3, #1
 80072b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80072b4:	f7fd fa20 	bl	80046f8 <HAL_GetTick>
 80072b8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80072ba:	4b8a      	ldr	r3, [pc, #552]	; (80074e4 <HAL_RCC_OscConfig+0x5b4>)
 80072bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072c0:	f013 0f02 	tst.w	r3, #2
 80072c4:	d140      	bne.n	8007348 <HAL_RCC_OscConfig+0x418>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072c6:	f7fd fa17 	bl	80046f8 <HAL_GetTick>
 80072ca:	1b80      	subs	r0, r0, r6
 80072cc:	2802      	cmp	r0, #2
 80072ce:	d9f4      	bls.n	80072ba <HAL_RCC_OscConfig+0x38a>
          return HAL_TIMEOUT;
 80072d0:	2003      	movs	r0, #3
 80072d2:	e233      	b.n	800773c <HAL_RCC_OscConfig+0x80c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072d4:	4a83      	ldr	r2, [pc, #524]	; (80074e4 <HAL_RCC_OscConfig+0x5b4>)
 80072d6:	6853      	ldr	r3, [r2, #4]
 80072d8:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80072dc:	6921      	ldr	r1, [r4, #16]
 80072de:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80072e2:	6053      	str	r3, [r2, #4]
 80072e4:	e7d5      	b.n	8007292 <HAL_RCC_OscConfig+0x362>
        __HAL_RCC_HSI_DISABLE();
 80072e6:	4a7f      	ldr	r2, [pc, #508]	; (80074e4 <HAL_RCC_OscConfig+0x5b4>)
 80072e8:	6813      	ldr	r3, [r2, #0]
 80072ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072ee:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80072f0:	f7fd fa02 	bl	80046f8 <HAL_GetTick>
 80072f4:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80072f6:	4b7b      	ldr	r3, [pc, #492]	; (80074e4 <HAL_RCC_OscConfig+0x5b4>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80072fe:	d0c8      	beq.n	8007292 <HAL_RCC_OscConfig+0x362>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007300:	f7fd f9fa 	bl	80046f8 <HAL_GetTick>
 8007304:	1b80      	subs	r0, r0, r6
 8007306:	2802      	cmp	r0, #2
 8007308:	d9f5      	bls.n	80072f6 <HAL_RCC_OscConfig+0x3c6>
            return HAL_TIMEOUT;
 800730a:	2003      	movs	r0, #3
 800730c:	e216      	b.n	800773c <HAL_RCC_OscConfig+0x80c>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800730e:	f240 218b 	movw	r1, #651	; 0x28b
 8007312:	4875      	ldr	r0, [pc, #468]	; (80074e8 <HAL_RCC_OscConfig+0x5b8>)
 8007314:	f7fb fa22 	bl	800275c <assert_failed>
 8007318:	e7c2      	b.n	80072a0 <HAL_RCC_OscConfig+0x370>
      __HAL_RCC_LSI_DISABLE();
 800731a:	4a72      	ldr	r2, [pc, #456]	; (80074e4 <HAL_RCC_OscConfig+0x5b4>)
 800731c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8007320:	f023 0301 	bic.w	r3, r3, #1
 8007324:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8007328:	f7fd f9e6 	bl	80046f8 <HAL_GetTick>
 800732c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800732e:	4b6d      	ldr	r3, [pc, #436]	; (80074e4 <HAL_RCC_OscConfig+0x5b4>)
 8007330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007334:	f013 0f02 	tst.w	r3, #2
 8007338:	d006      	beq.n	8007348 <HAL_RCC_OscConfig+0x418>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800733a:	f7fd f9dd 	bl	80046f8 <HAL_GetTick>
 800733e:	1b80      	subs	r0, r0, r6
 8007340:	2802      	cmp	r0, #2
 8007342:	d9f4      	bls.n	800732e <HAL_RCC_OscConfig+0x3fe>
          return HAL_TIMEOUT;
 8007344:	2003      	movs	r0, #3
 8007346:	e1f9      	b.n	800773c <HAL_RCC_OscConfig+0x80c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007348:	6823      	ldr	r3, [r4, #0]
 800734a:	f013 0f04 	tst.w	r3, #4
 800734e:	f000 8086 	beq.w	800745e <HAL_RCC_OscConfig+0x52e>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8007352:	68a3      	ldr	r3, [r4, #8]
 8007354:	2b01      	cmp	r3, #1
 8007356:	d901      	bls.n	800735c <HAL_RCC_OscConfig+0x42c>
 8007358:	2b05      	cmp	r3, #5
 800735a:	d13b      	bne.n	80073d4 <HAL_RCC_OscConfig+0x4a4>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800735c:	4b61      	ldr	r3, [pc, #388]	; (80074e4 <HAL_RCC_OscConfig+0x5b4>)
 800735e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007360:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8007364:	d13c      	bne.n	80073e0 <HAL_RCC_OscConfig+0x4b0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8007366:	4b5f      	ldr	r3, [pc, #380]	; (80074e4 <HAL_RCC_OscConfig+0x5b4>)
 8007368:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800736a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800736e:	659a      	str	r2, [r3, #88]	; 0x58
 8007370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007376:	9301      	str	r3, [sp, #4]
 8007378:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800737a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800737c:	4b5b      	ldr	r3, [pc, #364]	; (80074ec <HAL_RCC_OscConfig+0x5bc>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007384:	d02e      	beq.n	80073e4 <HAL_RCC_OscConfig+0x4b4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007386:	68a3      	ldr	r3, [r4, #8]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d03f      	beq.n	800740c <HAL_RCC_OscConfig+0x4dc>
 800738c:	2b05      	cmp	r3, #5
 800738e:	d045      	beq.n	800741c <HAL_RCC_OscConfig+0x4ec>
 8007390:	4b54      	ldr	r3, [pc, #336]	; (80074e4 <HAL_RCC_OscConfig+0x5b4>)
 8007392:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007396:	f022 0201 	bic.w	r2, r2, #1
 800739a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800739e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80073a2:	f022 0204 	bic.w	r2, r2, #4
 80073a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80073aa:	68a3      	ldr	r3, [r4, #8]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d043      	beq.n	8007438 <HAL_RCC_OscConfig+0x508>
      tickstart = HAL_GetTick();
 80073b0:	f7fd f9a2 	bl	80046f8 <HAL_GetTick>
 80073b4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073b6:	4b4b      	ldr	r3, [pc, #300]	; (80074e4 <HAL_RCC_OscConfig+0x5b4>)
 80073b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073bc:	f013 0f02 	tst.w	r3, #2
 80073c0:	d14c      	bne.n	800745c <HAL_RCC_OscConfig+0x52c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073c2:	f7fd f999 	bl	80046f8 <HAL_GetTick>
 80073c6:	1bc0      	subs	r0, r0, r7
 80073c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80073cc:	4298      	cmp	r0, r3
 80073ce:	d9f2      	bls.n	80073b6 <HAL_RCC_OscConfig+0x486>
          return HAL_TIMEOUT;
 80073d0:	2003      	movs	r0, #3
 80073d2:	e1b3      	b.n	800773c <HAL_RCC_OscConfig+0x80c>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80073d4:	f240 21de 	movw	r1, #734	; 0x2de
 80073d8:	4843      	ldr	r0, [pc, #268]	; (80074e8 <HAL_RCC_OscConfig+0x5b8>)
 80073da:	f7fb f9bf 	bl	800275c <assert_failed>
 80073de:	e7bd      	b.n	800735c <HAL_RCC_OscConfig+0x42c>
    FlagStatus       pwrclkchanged = RESET;
 80073e0:	2600      	movs	r6, #0
 80073e2:	e7cb      	b.n	800737c <HAL_RCC_OscConfig+0x44c>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073e4:	4a41      	ldr	r2, [pc, #260]	; (80074ec <HAL_RCC_OscConfig+0x5bc>)
 80073e6:	6813      	ldr	r3, [r2, #0]
 80073e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073ec:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80073ee:	f7fd f983 	bl	80046f8 <HAL_GetTick>
 80073f2:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073f4:	4b3d      	ldr	r3, [pc, #244]	; (80074ec <HAL_RCC_OscConfig+0x5bc>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80073fc:	d1c3      	bne.n	8007386 <HAL_RCC_OscConfig+0x456>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073fe:	f7fd f97b 	bl	80046f8 <HAL_GetTick>
 8007402:	1bc0      	subs	r0, r0, r7
 8007404:	2802      	cmp	r0, #2
 8007406:	d9f5      	bls.n	80073f4 <HAL_RCC_OscConfig+0x4c4>
          return HAL_TIMEOUT;
 8007408:	2003      	movs	r0, #3
 800740a:	e197      	b.n	800773c <HAL_RCC_OscConfig+0x80c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800740c:	4a35      	ldr	r2, [pc, #212]	; (80074e4 <HAL_RCC_OscConfig+0x5b4>)
 800740e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007412:	f043 0301 	orr.w	r3, r3, #1
 8007416:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800741a:	e7c6      	b.n	80073aa <HAL_RCC_OscConfig+0x47a>
 800741c:	4b31      	ldr	r3, [pc, #196]	; (80074e4 <HAL_RCC_OscConfig+0x5b4>)
 800741e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007422:	f042 0204 	orr.w	r2, r2, #4
 8007426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800742a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800742e:	f042 0201 	orr.w	r2, r2, #1
 8007432:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8007436:	e7b8      	b.n	80073aa <HAL_RCC_OscConfig+0x47a>
      tickstart = HAL_GetTick();
 8007438:	f7fd f95e 	bl	80046f8 <HAL_GetTick>
 800743c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800743e:	4b29      	ldr	r3, [pc, #164]	; (80074e4 <HAL_RCC_OscConfig+0x5b4>)
 8007440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007444:	f013 0f02 	tst.w	r3, #2
 8007448:	d008      	beq.n	800745c <HAL_RCC_OscConfig+0x52c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800744a:	f7fd f955 	bl	80046f8 <HAL_GetTick>
 800744e:	1bc0      	subs	r0, r0, r7
 8007450:	f241 3388 	movw	r3, #5000	; 0x1388
 8007454:	4298      	cmp	r0, r3
 8007456:	d9f2      	bls.n	800743e <HAL_RCC_OscConfig+0x50e>
          return HAL_TIMEOUT;
 8007458:	2003      	movs	r0, #3
 800745a:	e16f      	b.n	800773c <HAL_RCC_OscConfig+0x80c>
    if(pwrclkchanged == SET)
 800745c:	b9fe      	cbnz	r6, 800749e <HAL_RCC_OscConfig+0x56e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800745e:	6823      	ldr	r3, [r4, #0]
 8007460:	f013 0f20 	tst.w	r3, #32
 8007464:	d044      	beq.n	80074f0 <HAL_RCC_OscConfig+0x5c0>
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8007466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007468:	2b01      	cmp	r3, #1
 800746a:	d81e      	bhi.n	80074aa <HAL_RCC_OscConfig+0x57a>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800746c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800746e:	b313      	cbz	r3, 80074b6 <HAL_RCC_OscConfig+0x586>
      __HAL_RCC_HSI48_ENABLE();
 8007470:	4a1c      	ldr	r2, [pc, #112]	; (80074e4 <HAL_RCC_OscConfig+0x5b4>)
 8007472:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8007476:	f043 0301 	orr.w	r3, r3, #1
 800747a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 800747e:	f7fd f93b 	bl	80046f8 <HAL_GetTick>
 8007482:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007484:	4b17      	ldr	r3, [pc, #92]	; (80074e4 <HAL_RCC_OscConfig+0x5b4>)
 8007486:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800748a:	f013 0f02 	tst.w	r3, #2
 800748e:	d12f      	bne.n	80074f0 <HAL_RCC_OscConfig+0x5c0>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007490:	f7fd f932 	bl	80046f8 <HAL_GetTick>
 8007494:	1b80      	subs	r0, r0, r6
 8007496:	2802      	cmp	r0, #2
 8007498:	d9f4      	bls.n	8007484 <HAL_RCC_OscConfig+0x554>
          return HAL_TIMEOUT;
 800749a:	2003      	movs	r0, #3
 800749c:	e14e      	b.n	800773c <HAL_RCC_OscConfig+0x80c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800749e:	4a11      	ldr	r2, [pc, #68]	; (80074e4 <HAL_RCC_OscConfig+0x5b4>)
 80074a0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80074a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074a6:	6593      	str	r3, [r2, #88]	; 0x58
 80074a8:	e7d9      	b.n	800745e <HAL_RCC_OscConfig+0x52e>
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 80074aa:	f240 3143 	movw	r1, #835	; 0x343
 80074ae:	480e      	ldr	r0, [pc, #56]	; (80074e8 <HAL_RCC_OscConfig+0x5b8>)
 80074b0:	f7fb f954 	bl	800275c <assert_failed>
 80074b4:	e7da      	b.n	800746c <HAL_RCC_OscConfig+0x53c>
      __HAL_RCC_HSI48_DISABLE();
 80074b6:	4a0b      	ldr	r2, [pc, #44]	; (80074e4 <HAL_RCC_OscConfig+0x5b4>)
 80074b8:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80074bc:	f023 0301 	bic.w	r3, r3, #1
 80074c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 80074c4:	f7fd f918 	bl	80046f8 <HAL_GetTick>
 80074c8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80074ca:	4b06      	ldr	r3, [pc, #24]	; (80074e4 <HAL_RCC_OscConfig+0x5b4>)
 80074cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074d0:	f013 0f02 	tst.w	r3, #2
 80074d4:	d00c      	beq.n	80074f0 <HAL_RCC_OscConfig+0x5c0>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074d6:	f7fd f90f 	bl	80046f8 <HAL_GetTick>
 80074da:	1b80      	subs	r0, r0, r6
 80074dc:	2802      	cmp	r0, #2
 80074de:	d9f4      	bls.n	80074ca <HAL_RCC_OscConfig+0x59a>
          return HAL_TIMEOUT;
 80074e0:	2003      	movs	r0, #3
 80074e2:	e12b      	b.n	800773c <HAL_RCC_OscConfig+0x80c>
 80074e4:	40021000 	.word	0x40021000
 80074e8:	0800ba68 	.word	0x0800ba68
 80074ec:	40007000 	.word	0x40007000
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80074f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d82d      	bhi.n	8007552 <HAL_RCC_OscConfig+0x622>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80074f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 811e 	beq.w	800773a <HAL_RCC_OscConfig+0x80a>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d02d      	beq.n	800755e <HAL_RCC_OscConfig+0x62e>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007502:	2d0c      	cmp	r5, #12
 8007504:	f000 811e 	beq.w	8007744 <HAL_RCC_OscConfig+0x814>
        __HAL_RCC_PLL_DISABLE();
 8007508:	4b8f      	ldr	r3, [pc, #572]	; (8007748 <HAL_RCC_OscConfig+0x818>)
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007510:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007518:	d104      	bne.n	8007524 <HAL_RCC_OscConfig+0x5f4>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800751a:	4a8b      	ldr	r2, [pc, #556]	; (8007748 <HAL_RCC_OscConfig+0x818>)
 800751c:	68d3      	ldr	r3, [r2, #12]
 800751e:	f023 0303 	bic.w	r3, r3, #3
 8007522:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007524:	4a88      	ldr	r2, [pc, #544]	; (8007748 <HAL_RCC_OscConfig+0x818>)
 8007526:	68d3      	ldr	r3, [r2, #12]
 8007528:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800752c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007530:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8007532:	f7fd f8e1 	bl	80046f8 <HAL_GetTick>
 8007536:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007538:	4b83      	ldr	r3, [pc, #524]	; (8007748 <HAL_RCC_OscConfig+0x818>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007540:	f000 80ef 	beq.w	8007722 <HAL_RCC_OscConfig+0x7f2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007544:	f7fd f8d8 	bl	80046f8 <HAL_GetTick>
 8007548:	1b00      	subs	r0, r0, r4
 800754a:	2802      	cmp	r0, #2
 800754c:	d9f4      	bls.n	8007538 <HAL_RCC_OscConfig+0x608>
            return HAL_TIMEOUT;
 800754e:	2003      	movs	r0, #3
 8007550:	e0f4      	b.n	800773c <HAL_RCC_OscConfig+0x80c>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8007552:	f44f 715b 	mov.w	r1, #876	; 0x36c
 8007556:	487d      	ldr	r0, [pc, #500]	; (800774c <HAL_RCC_OscConfig+0x81c>)
 8007558:	f7fb f900 	bl	800275c <assert_failed>
 800755c:	e7cb      	b.n	80074f6 <HAL_RCC_OscConfig+0x5c6>
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800755e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007560:	2b03      	cmp	r3, #3
 8007562:	d82e      	bhi.n	80075c2 <HAL_RCC_OscConfig+0x692>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8007564:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007566:	3b01      	subs	r3, #1
 8007568:	2b07      	cmp	r3, #7
 800756a:	d830      	bhi.n	80075ce <HAL_RCC_OscConfig+0x69e>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800756c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800756e:	3b08      	subs	r3, #8
 8007570:	2b4e      	cmp	r3, #78	; 0x4e
 8007572:	d832      	bhi.n	80075da <HAL_RCC_OscConfig+0x6aa>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8007574:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007576:	3b02      	subs	r3, #2
 8007578:	2b1d      	cmp	r3, #29
 800757a:	d834      	bhi.n	80075e6 <HAL_RCC_OscConfig+0x6b6>
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800757c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800757e:	2b02      	cmp	r3, #2
 8007580:	d005      	beq.n	800758e <HAL_RCC_OscConfig+0x65e>
 8007582:	2b04      	cmp	r3, #4
 8007584:	d003      	beq.n	800758e <HAL_RCC_OscConfig+0x65e>
 8007586:	2b06      	cmp	r3, #6
 8007588:	d001      	beq.n	800758e <HAL_RCC_OscConfig+0x65e>
 800758a:	2b08      	cmp	r3, #8
 800758c:	d131      	bne.n	80075f2 <HAL_RCC_OscConfig+0x6c2>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800758e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007590:	2b02      	cmp	r3, #2
 8007592:	d005      	beq.n	80075a0 <HAL_RCC_OscConfig+0x670>
 8007594:	2b04      	cmp	r3, #4
 8007596:	d003      	beq.n	80075a0 <HAL_RCC_OscConfig+0x670>
 8007598:	2b06      	cmp	r3, #6
 800759a:	d001      	beq.n	80075a0 <HAL_RCC_OscConfig+0x670>
 800759c:	2b08      	cmp	r3, #8
 800759e:	d12e      	bne.n	80075fe <HAL_RCC_OscConfig+0x6ce>
      pll_config = RCC->PLLCFGR;
 80075a0:	4b69      	ldr	r3, [pc, #420]	; (8007748 <HAL_RCC_OscConfig+0x818>)
 80075a2:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80075a4:	f003 0103 	and.w	r1, r3, #3
 80075a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80075aa:	4291      	cmp	r1, r2
 80075ac:	d02d      	beq.n	800760a <HAL_RCC_OscConfig+0x6da>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80075ae:	2d0c      	cmp	r5, #12
 80075b0:	f000 80c6 	beq.w	8007740 <HAL_RCC_OscConfig+0x810>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80075b4:	4b64      	ldr	r3, [pc, #400]	; (8007748 <HAL_RCC_OscConfig+0x818>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80075bc:	d04f      	beq.n	800765e <HAL_RCC_OscConfig+0x72e>
            return HAL_ERROR;
 80075be:	2001      	movs	r0, #1
 80075c0:	e0bc      	b.n	800773c <HAL_RCC_OscConfig+0x80c>
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80075c2:	f44f 715d 	mov.w	r1, #884	; 0x374
 80075c6:	4861      	ldr	r0, [pc, #388]	; (800774c <HAL_RCC_OscConfig+0x81c>)
 80075c8:	f7fb f8c8 	bl	800275c <assert_failed>
 80075cc:	e7ca      	b.n	8007564 <HAL_RCC_OscConfig+0x634>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80075ce:	f240 3175 	movw	r1, #885	; 0x375
 80075d2:	485e      	ldr	r0, [pc, #376]	; (800774c <HAL_RCC_OscConfig+0x81c>)
 80075d4:	f7fb f8c2 	bl	800275c <assert_failed>
 80075d8:	e7c8      	b.n	800756c <HAL_RCC_OscConfig+0x63c>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80075da:	f240 3176 	movw	r1, #886	; 0x376
 80075de:	485b      	ldr	r0, [pc, #364]	; (800774c <HAL_RCC_OscConfig+0x81c>)
 80075e0:	f7fb f8bc 	bl	800275c <assert_failed>
 80075e4:	e7c6      	b.n	8007574 <HAL_RCC_OscConfig+0x644>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80075e6:	f44f 715e 	mov.w	r1, #888	; 0x378
 80075ea:	4858      	ldr	r0, [pc, #352]	; (800774c <HAL_RCC_OscConfig+0x81c>)
 80075ec:	f7fb f8b6 	bl	800275c <assert_failed>
 80075f0:	e7c4      	b.n	800757c <HAL_RCC_OscConfig+0x64c>
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80075f2:	f240 317a 	movw	r1, #890	; 0x37a
 80075f6:	4855      	ldr	r0, [pc, #340]	; (800774c <HAL_RCC_OscConfig+0x81c>)
 80075f8:	f7fb f8b0 	bl	800275c <assert_failed>
 80075fc:	e7c7      	b.n	800758e <HAL_RCC_OscConfig+0x65e>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80075fe:	f240 317b 	movw	r1, #891	; 0x37b
 8007602:	4852      	ldr	r0, [pc, #328]	; (800774c <HAL_RCC_OscConfig+0x81c>)
 8007604:	f7fb f8aa 	bl	800275c <assert_failed>
 8007608:	e7ca      	b.n	80075a0 <HAL_RCC_OscConfig+0x670>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800760a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800760e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007610:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007612:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8007616:	d1ca      	bne.n	80075ae <HAL_RCC_OscConfig+0x67e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007618:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800761c:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800761e:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8007622:	d1c4      	bne.n	80075ae <HAL_RCC_OscConfig+0x67e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007624:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007628:	6ba1      	ldr	r1, [r4, #56]	; 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800762a:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800762e:	d1be      	bne.n	80075ae <HAL_RCC_OscConfig+0x67e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007630:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8007634:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007636:	0852      	lsrs	r2, r2, #1
 8007638:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800763a:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800763e:	d1b6      	bne.n	80075ae <HAL_RCC_OscConfig+0x67e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007640:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8007644:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007646:	0852      	lsrs	r2, r2, #1
 8007648:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800764a:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800764e:	d1ae      	bne.n	80075ae <HAL_RCC_OscConfig+0x67e>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007650:	4b3d      	ldr	r3, [pc, #244]	; (8007748 <HAL_RCC_OscConfig+0x818>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007658:	d049      	beq.n	80076ee <HAL_RCC_OscConfig+0x7be>
  return HAL_OK;
 800765a:	2000      	movs	r0, #0
 800765c:	e06e      	b.n	800773c <HAL_RCC_OscConfig+0x80c>
            __HAL_RCC_PLL_DISABLE();
 800765e:	4a3a      	ldr	r2, [pc, #232]	; (8007748 <HAL_RCC_OscConfig+0x818>)
 8007660:	6813      	ldr	r3, [r2, #0]
 8007662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007666:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8007668:	f7fd f846 	bl	80046f8 <HAL_GetTick>
 800766c:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800766e:	4b36      	ldr	r3, [pc, #216]	; (8007748 <HAL_RCC_OscConfig+0x818>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007676:	d006      	beq.n	8007686 <HAL_RCC_OscConfig+0x756>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007678:	f7fd f83e 	bl	80046f8 <HAL_GetTick>
 800767c:	1b40      	subs	r0, r0, r5
 800767e:	2802      	cmp	r0, #2
 8007680:	d9f5      	bls.n	800766e <HAL_RCC_OscConfig+0x73e>
                return HAL_TIMEOUT;
 8007682:	2003      	movs	r0, #3
 8007684:	e05a      	b.n	800773c <HAL_RCC_OscConfig+0x80c>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007686:	4a30      	ldr	r2, [pc, #192]	; (8007748 <HAL_RCC_OscConfig+0x818>)
 8007688:	68d3      	ldr	r3, [r2, #12]
 800768a:	4931      	ldr	r1, [pc, #196]	; (8007750 <HAL_RCC_OscConfig+0x820>)
 800768c:	4019      	ands	r1, r3
 800768e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007690:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007692:	3801      	subs	r0, #1
 8007694:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8007698:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800769a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800769e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80076a0:	0840      	lsrs	r0, r0, #1
 80076a2:	3801      	subs	r0, #1
 80076a4:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 80076a8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80076aa:	0840      	lsrs	r0, r0, #1
 80076ac:	3801      	subs	r0, #1
 80076ae:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80076b2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80076b4:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 80076b8:	430b      	orrs	r3, r1
 80076ba:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 80076bc:	6813      	ldr	r3, [r2, #0]
 80076be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076c2:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80076c4:	68d3      	ldr	r3, [r2, #12]
 80076c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076ca:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 80076cc:	f7fd f814 	bl	80046f8 <HAL_GetTick>
 80076d0:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076d2:	4b1d      	ldr	r3, [pc, #116]	; (8007748 <HAL_RCC_OscConfig+0x818>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80076da:	d106      	bne.n	80076ea <HAL_RCC_OscConfig+0x7ba>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076dc:	f7fd f80c 	bl	80046f8 <HAL_GetTick>
 80076e0:	1b00      	subs	r0, r0, r4
 80076e2:	2802      	cmp	r0, #2
 80076e4:	d9f5      	bls.n	80076d2 <HAL_RCC_OscConfig+0x7a2>
                return HAL_TIMEOUT;
 80076e6:	2003      	movs	r0, #3
 80076e8:	e028      	b.n	800773c <HAL_RCC_OscConfig+0x80c>
  return HAL_OK;
 80076ea:	2000      	movs	r0, #0
 80076ec:	e026      	b.n	800773c <HAL_RCC_OscConfig+0x80c>
          __HAL_RCC_PLL_ENABLE();
 80076ee:	4b16      	ldr	r3, [pc, #88]	; (8007748 <HAL_RCC_OscConfig+0x818>)
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80076f6:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80076f8:	68da      	ldr	r2, [r3, #12]
 80076fa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80076fe:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8007700:	f7fc fffa 	bl	80046f8 <HAL_GetTick>
 8007704:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007706:	4b10      	ldr	r3, [pc, #64]	; (8007748 <HAL_RCC_OscConfig+0x818>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800770e:	d106      	bne.n	800771e <HAL_RCC_OscConfig+0x7ee>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007710:	f7fc fff2 	bl	80046f8 <HAL_GetTick>
 8007714:	1b03      	subs	r3, r0, r4
 8007716:	2b02      	cmp	r3, #2
 8007718:	d9f5      	bls.n	8007706 <HAL_RCC_OscConfig+0x7d6>
              return HAL_TIMEOUT;
 800771a:	2003      	movs	r0, #3
 800771c:	e00e      	b.n	800773c <HAL_RCC_OscConfig+0x80c>
  return HAL_OK;
 800771e:	2000      	movs	r0, #0
 8007720:	e00c      	b.n	800773c <HAL_RCC_OscConfig+0x80c>
 8007722:	2000      	movs	r0, #0
 8007724:	e00a      	b.n	800773c <HAL_RCC_OscConfig+0x80c>
    return HAL_ERROR;
 8007726:	2001      	movs	r0, #1
}
 8007728:	4770      	bx	lr
        return HAL_ERROR;
 800772a:	2001      	movs	r0, #1
 800772c:	e006      	b.n	800773c <HAL_RCC_OscConfig+0x80c>
            return HAL_ERROR;
 800772e:	2001      	movs	r0, #1
 8007730:	e004      	b.n	800773c <HAL_RCC_OscConfig+0x80c>
        return HAL_ERROR;
 8007732:	2001      	movs	r0, #1
 8007734:	e002      	b.n	800773c <HAL_RCC_OscConfig+0x80c>
        return HAL_ERROR;
 8007736:	2001      	movs	r0, #1
 8007738:	e000      	b.n	800773c <HAL_RCC_OscConfig+0x80c>
  return HAL_OK;
 800773a:	2000      	movs	r0, #0
}
 800773c:	b003      	add	sp, #12
 800773e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8007740:	2001      	movs	r0, #1
 8007742:	e7fb      	b.n	800773c <HAL_RCC_OscConfig+0x80c>
        return HAL_ERROR;
 8007744:	2001      	movs	r0, #1
 8007746:	e7f9      	b.n	800773c <HAL_RCC_OscConfig+0x80c>
 8007748:	40021000 	.word	0x40021000
 800774c:	0800ba68 	.word	0x0800ba68
 8007750:	019d808c 	.word	0x019d808c

08007754 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8007754:	2800      	cmp	r0, #0
 8007756:	f000 80f5 	beq.w	8007944 <HAL_RCC_ClockConfig+0x1f0>
{
 800775a:	b570      	push	{r4, r5, r6, lr}
 800775c:	460d      	mov	r5, r1
 800775e:	4604      	mov	r4, r0
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8007760:	6803      	ldr	r3, [r0, #0]
 8007762:	3b01      	subs	r3, #1
 8007764:	2b0e      	cmp	r3, #14
 8007766:	d828      	bhi.n	80077ba <HAL_RCC_ClockConfig+0x66>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8007768:	2d04      	cmp	r5, #4
 800776a:	d82c      	bhi.n	80077c6 <HAL_RCC_ClockConfig+0x72>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800776c:	4b79      	ldr	r3, [pc, #484]	; (8007954 <HAL_RCC_ClockConfig+0x200>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 0307 	and.w	r3, r3, #7
 8007774:	42ab      	cmp	r3, r5
 8007776:	d20b      	bcs.n	8007790 <HAL_RCC_ClockConfig+0x3c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007778:	4a76      	ldr	r2, [pc, #472]	; (8007954 <HAL_RCC_ClockConfig+0x200>)
 800777a:	6813      	ldr	r3, [r2, #0]
 800777c:	f023 0307 	bic.w	r3, r3, #7
 8007780:	432b      	orrs	r3, r5
 8007782:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007784:	6813      	ldr	r3, [r2, #0]
 8007786:	f003 0307 	and.w	r3, r3, #7
 800778a:	42ab      	cmp	r3, r5
 800778c:	f040 80dc 	bne.w	8007948 <HAL_RCC_ClockConfig+0x1f4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007790:	6823      	ldr	r3, [r4, #0]
 8007792:	f013 0f01 	tst.w	r3, #1
 8007796:	d050      	beq.n	800783a <HAL_RCC_ClockConfig+0xe6>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8007798:	6863      	ldr	r3, [r4, #4]
 800779a:	2b03      	cmp	r3, #3
 800779c:	d819      	bhi.n	80077d2 <HAL_RCC_ClockConfig+0x7e>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800779e:	6863      	ldr	r3, [r4, #4]
 80077a0:	2b03      	cmp	r3, #3
 80077a2:	d01c      	beq.n	80077de <HAL_RCC_ClockConfig+0x8a>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d03a      	beq.n	800781e <HAL_RCC_ClockConfig+0xca>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d13f      	bne.n	800782c <HAL_RCC_ClockConfig+0xd8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80077ac:	4a6a      	ldr	r2, [pc, #424]	; (8007958 <HAL_RCC_ClockConfig+0x204>)
 80077ae:	6812      	ldr	r2, [r2, #0]
 80077b0:	f012 0f02 	tst.w	r2, #2
 80077b4:	d119      	bne.n	80077ea <HAL_RCC_ClockConfig+0x96>
          return HAL_ERROR;
 80077b6:	2001      	movs	r0, #1
 80077b8:	e0b1      	b.n	800791e <HAL_RCC_ClockConfig+0x1ca>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80077ba:	f240 4166 	movw	r1, #1126	; 0x466
 80077be:	4867      	ldr	r0, [pc, #412]	; (800795c <HAL_RCC_ClockConfig+0x208>)
 80077c0:	f7fa ffcc 	bl	800275c <assert_failed>
 80077c4:	e7d0      	b.n	8007768 <HAL_RCC_ClockConfig+0x14>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80077c6:	f240 4167 	movw	r1, #1127	; 0x467
 80077ca:	4864      	ldr	r0, [pc, #400]	; (800795c <HAL_RCC_ClockConfig+0x208>)
 80077cc:	f7fa ffc6 	bl	800275c <assert_failed>
 80077d0:	e7cc      	b.n	800776c <HAL_RCC_ClockConfig+0x18>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80077d2:	f240 417e 	movw	r1, #1150	; 0x47e
 80077d6:	4861      	ldr	r0, [pc, #388]	; (800795c <HAL_RCC_ClockConfig+0x208>)
 80077d8:	f7fa ffc0 	bl	800275c <assert_failed>
 80077dc:	e7df      	b.n	800779e <HAL_RCC_ClockConfig+0x4a>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077de:	4a5e      	ldr	r2, [pc, #376]	; (8007958 <HAL_RCC_ClockConfig+0x204>)
 80077e0:	6812      	ldr	r2, [r2, #0]
 80077e2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80077e6:	f000 80b1 	beq.w	800794c <HAL_RCC_ClockConfig+0x1f8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80077ea:	495b      	ldr	r1, [pc, #364]	; (8007958 <HAL_RCC_ClockConfig+0x204>)
 80077ec:	688a      	ldr	r2, [r1, #8]
 80077ee:	f022 0203 	bic.w	r2, r2, #3
 80077f2:	4313      	orrs	r3, r2
 80077f4:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80077f6:	f7fc ff7f 	bl	80046f8 <HAL_GetTick>
 80077fa:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077fc:	4b56      	ldr	r3, [pc, #344]	; (8007958 <HAL_RCC_ClockConfig+0x204>)
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f003 030c 	and.w	r3, r3, #12
 8007804:	6862      	ldr	r2, [r4, #4]
 8007806:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800780a:	d016      	beq.n	800783a <HAL_RCC_ClockConfig+0xe6>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800780c:	f7fc ff74 	bl	80046f8 <HAL_GetTick>
 8007810:	1b80      	subs	r0, r0, r6
 8007812:	f241 3388 	movw	r3, #5000	; 0x1388
 8007816:	4298      	cmp	r0, r3
 8007818:	d9f0      	bls.n	80077fc <HAL_RCC_ClockConfig+0xa8>
        return HAL_TIMEOUT;
 800781a:	2003      	movs	r0, #3
 800781c:	e07f      	b.n	800791e <HAL_RCC_ClockConfig+0x1ca>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800781e:	4a4e      	ldr	r2, [pc, #312]	; (8007958 <HAL_RCC_ClockConfig+0x204>)
 8007820:	6812      	ldr	r2, [r2, #0]
 8007822:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8007826:	d1e0      	bne.n	80077ea <HAL_RCC_ClockConfig+0x96>
          return HAL_ERROR;
 8007828:	2001      	movs	r0, #1
 800782a:	e078      	b.n	800791e <HAL_RCC_ClockConfig+0x1ca>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800782c:	4a4a      	ldr	r2, [pc, #296]	; (8007958 <HAL_RCC_ClockConfig+0x204>)
 800782e:	6812      	ldr	r2, [r2, #0]
 8007830:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8007834:	d1d9      	bne.n	80077ea <HAL_RCC_ClockConfig+0x96>
          return HAL_ERROR;
 8007836:	2001      	movs	r0, #1
 8007838:	e071      	b.n	800791e <HAL_RCC_ClockConfig+0x1ca>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800783a:	6823      	ldr	r3, [r4, #0]
 800783c:	f013 0f02 	tst.w	r3, #2
 8007840:	d018      	beq.n	8007874 <HAL_RCC_ClockConfig+0x120>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8007842:	68a3      	ldr	r3, [r4, #8]
 8007844:	b17b      	cbz	r3, 8007866 <HAL_RCC_ClockConfig+0x112>
 8007846:	2b80      	cmp	r3, #128	; 0x80
 8007848:	d00d      	beq.n	8007866 <HAL_RCC_ClockConfig+0x112>
 800784a:	2b90      	cmp	r3, #144	; 0x90
 800784c:	d00b      	beq.n	8007866 <HAL_RCC_ClockConfig+0x112>
 800784e:	2ba0      	cmp	r3, #160	; 0xa0
 8007850:	d009      	beq.n	8007866 <HAL_RCC_ClockConfig+0x112>
 8007852:	2bb0      	cmp	r3, #176	; 0xb0
 8007854:	d007      	beq.n	8007866 <HAL_RCC_ClockConfig+0x112>
 8007856:	2bc0      	cmp	r3, #192	; 0xc0
 8007858:	d005      	beq.n	8007866 <HAL_RCC_ClockConfig+0x112>
 800785a:	2bd0      	cmp	r3, #208	; 0xd0
 800785c:	d003      	beq.n	8007866 <HAL_RCC_ClockConfig+0x112>
 800785e:	2be0      	cmp	r3, #224	; 0xe0
 8007860:	d001      	beq.n	8007866 <HAL_RCC_ClockConfig+0x112>
 8007862:	2bf0      	cmp	r3, #240	; 0xf0
 8007864:	d15c      	bne.n	8007920 <HAL_RCC_ClockConfig+0x1cc>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007866:	4a3c      	ldr	r2, [pc, #240]	; (8007958 <HAL_RCC_ClockConfig+0x204>)
 8007868:	6893      	ldr	r3, [r2, #8]
 800786a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800786e:	68a1      	ldr	r1, [r4, #8]
 8007870:	430b      	orrs	r3, r1
 8007872:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007874:	4b37      	ldr	r3, [pc, #220]	; (8007954 <HAL_RCC_ClockConfig+0x200>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0307 	and.w	r3, r3, #7
 800787c:	42ab      	cmp	r3, r5
 800787e:	d90a      	bls.n	8007896 <HAL_RCC_ClockConfig+0x142>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007880:	4a34      	ldr	r2, [pc, #208]	; (8007954 <HAL_RCC_ClockConfig+0x200>)
 8007882:	6813      	ldr	r3, [r2, #0]
 8007884:	f023 0307 	bic.w	r3, r3, #7
 8007888:	432b      	orrs	r3, r5
 800788a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800788c:	6813      	ldr	r3, [r2, #0]
 800788e:	f003 0307 	and.w	r3, r3, #7
 8007892:	42ab      	cmp	r3, r5
 8007894:	d15c      	bne.n	8007950 <HAL_RCC_ClockConfig+0x1fc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007896:	6823      	ldr	r3, [r4, #0]
 8007898:	f013 0f04 	tst.w	r3, #4
 800789c:	d014      	beq.n	80078c8 <HAL_RCC_ClockConfig+0x174>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800789e:	68e3      	ldr	r3, [r4, #12]
 80078a0:	b15b      	cbz	r3, 80078ba <HAL_RCC_ClockConfig+0x166>
 80078a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078a6:	d008      	beq.n	80078ba <HAL_RCC_ClockConfig+0x166>
 80078a8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80078ac:	d005      	beq.n	80078ba <HAL_RCC_ClockConfig+0x166>
 80078ae:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80078b2:	d002      	beq.n	80078ba <HAL_RCC_ClockConfig+0x166>
 80078b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078b8:	d138      	bne.n	800792c <HAL_RCC_ClockConfig+0x1d8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078ba:	4a27      	ldr	r2, [pc, #156]	; (8007958 <HAL_RCC_ClockConfig+0x204>)
 80078bc:	6893      	ldr	r3, [r2, #8]
 80078be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80078c2:	68e1      	ldr	r1, [r4, #12]
 80078c4:	430b      	orrs	r3, r1
 80078c6:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078c8:	6823      	ldr	r3, [r4, #0]
 80078ca:	f013 0f08 	tst.w	r3, #8
 80078ce:	d015      	beq.n	80078fc <HAL_RCC_ClockConfig+0x1a8>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80078d0:	6923      	ldr	r3, [r4, #16]
 80078d2:	b15b      	cbz	r3, 80078ec <HAL_RCC_ClockConfig+0x198>
 80078d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078d8:	d008      	beq.n	80078ec <HAL_RCC_ClockConfig+0x198>
 80078da:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80078de:	d005      	beq.n	80078ec <HAL_RCC_ClockConfig+0x198>
 80078e0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80078e4:	d002      	beq.n	80078ec <HAL_RCC_ClockConfig+0x198>
 80078e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078ea:	d125      	bne.n	8007938 <HAL_RCC_ClockConfig+0x1e4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80078ec:	4a1a      	ldr	r2, [pc, #104]	; (8007958 <HAL_RCC_ClockConfig+0x204>)
 80078ee:	6893      	ldr	r3, [r2, #8]
 80078f0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80078f4:	6921      	ldr	r1, [r4, #16]
 80078f6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80078fa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80078fc:	f7ff fabe 	bl	8006e7c <HAL_RCC_GetSysClockFreq>
 8007900:	4b15      	ldr	r3, [pc, #84]	; (8007958 <HAL_RCC_ClockConfig+0x204>)
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007908:	4a15      	ldr	r2, [pc, #84]	; (8007960 <HAL_RCC_ClockConfig+0x20c>)
 800790a:	5cd3      	ldrb	r3, [r2, r3]
 800790c:	f003 031f 	and.w	r3, r3, #31
 8007910:	40d8      	lsrs	r0, r3
 8007912:	4b14      	ldr	r3, [pc, #80]	; (8007964 <HAL_RCC_ClockConfig+0x210>)
 8007914:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8007916:	4b14      	ldr	r3, [pc, #80]	; (8007968 <HAL_RCC_ClockConfig+0x214>)
 8007918:	6818      	ldr	r0, [r3, #0]
 800791a:	f7fc fea1 	bl	8004660 <HAL_InitTick>
}
 800791e:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8007920:	f240 41dc 	movw	r1, #1244	; 0x4dc
 8007924:	480d      	ldr	r0, [pc, #52]	; (800795c <HAL_RCC_ClockConfig+0x208>)
 8007926:	f7fa ff19 	bl	800275c <assert_failed>
 800792a:	e79c      	b.n	8007866 <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800792c:	f240 41fc 	movw	r1, #1276	; 0x4fc
 8007930:	480a      	ldr	r0, [pc, #40]	; (800795c <HAL_RCC_ClockConfig+0x208>)
 8007932:	f7fa ff13 	bl	800275c <assert_failed>
 8007936:	e7c0      	b.n	80078ba <HAL_RCC_ClockConfig+0x166>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8007938:	f240 5103 	movw	r1, #1283	; 0x503
 800793c:	4807      	ldr	r0, [pc, #28]	; (800795c <HAL_RCC_ClockConfig+0x208>)
 800793e:	f7fa ff0d 	bl	800275c <assert_failed>
 8007942:	e7d3      	b.n	80078ec <HAL_RCC_ClockConfig+0x198>
    return HAL_ERROR;
 8007944:	2001      	movs	r0, #1
}
 8007946:	4770      	bx	lr
      return HAL_ERROR;
 8007948:	2001      	movs	r0, #1
 800794a:	e7e8      	b.n	800791e <HAL_RCC_ClockConfig+0x1ca>
        return HAL_ERROR;
 800794c:	2001      	movs	r0, #1
 800794e:	e7e6      	b.n	800791e <HAL_RCC_ClockConfig+0x1ca>
      return HAL_ERROR;
 8007950:	2001      	movs	r0, #1
 8007952:	e7e4      	b.n	800791e <HAL_RCC_ClockConfig+0x1ca>
 8007954:	40022000 	.word	0x40022000
 8007958:	40021000 	.word	0x40021000
 800795c:	0800ba68 	.word	0x0800ba68
 8007960:	0800b558 	.word	0x0800b558
 8007964:	200015f4 	.word	0x200015f4
 8007968:	20001a3c 	.word	0x20001a3c

0800796c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800796c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796e:	4604      	mov	r4, r0
 8007970:	460d      	mov	r5, r1
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 8007972:	6803      	ldr	r3, [r0, #0]
 8007974:	2b03      	cmp	r3, #3
 8007976:	d824      	bhi.n	80079c2 <RCCEx_PLLSAI1_Config+0x56>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8007978:	6863      	ldr	r3, [r4, #4]
 800797a:	3b01      	subs	r3, #1
 800797c:	2b07      	cmp	r3, #7
 800797e:	d826      	bhi.n	80079ce <RCCEx_PLLSAI1_Config+0x62>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 8007980:	68a3      	ldr	r3, [r4, #8]
 8007982:	3b08      	subs	r3, #8
 8007984:	2b4e      	cmp	r3, #78	; 0x4e
 8007986:	d828      	bhi.n	80079da <RCCEx_PLLSAI1_Config+0x6e>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8007988:	69a3      	ldr	r3, [r4, #24]
 800798a:	4a7c      	ldr	r2, [pc, #496]	; (8007b7c <RCCEx_PLLSAI1_Config+0x210>)
 800798c:	4213      	tst	r3, r2
 800798e:	d004      	beq.n	800799a <RCCEx_PLLSAI1_Config+0x2e>
 8007990:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007994:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007998:	b123      	cbz	r3, 80079a4 <RCCEx_PLLSAI1_Config+0x38>
 800799a:	f640 3161 	movw	r1, #2913	; 0xb61
 800799e:	4878      	ldr	r0, [pc, #480]	; (8007b80 <RCCEx_PLLSAI1_Config+0x214>)
 80079a0:	f7fa fedc 	bl	800275c <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80079a4:	4b77      	ldr	r3, [pc, #476]	; (8007b84 <RCCEx_PLLSAI1_Config+0x218>)
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	f013 0f03 	tst.w	r3, #3
 80079ac:	d02a      	beq.n	8007a04 <RCCEx_PLLSAI1_Config+0x98>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80079ae:	4b75      	ldr	r3, [pc, #468]	; (8007b84 <RCCEx_PLLSAI1_Config+0x218>)
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	f003 0303 	and.w	r3, r3, #3
 80079b6:	6822      	ldr	r2, [r4, #0]
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d014      	beq.n	80079e6 <RCCEx_PLLSAI1_Config+0x7a>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80079bc:	2601      	movs	r6, #1
      }
    }
  }

  return status;
}
 80079be:	4630      	mov	r0, r6
 80079c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 80079c2:	f640 315e 	movw	r1, #2910	; 0xb5e
 80079c6:	486e      	ldr	r0, [pc, #440]	; (8007b80 <RCCEx_PLLSAI1_Config+0x214>)
 80079c8:	f7fa fec8 	bl	800275c <assert_failed>
 80079cc:	e7d4      	b.n	8007978 <RCCEx_PLLSAI1_Config+0xc>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 80079ce:	f640 315f 	movw	r1, #2911	; 0xb5f
 80079d2:	486b      	ldr	r0, [pc, #428]	; (8007b80 <RCCEx_PLLSAI1_Config+0x214>)
 80079d4:	f7fa fec2 	bl	800275c <assert_failed>
 80079d8:	e7d2      	b.n	8007980 <RCCEx_PLLSAI1_Config+0x14>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 80079da:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 80079de:	4868      	ldr	r0, [pc, #416]	; (8007b80 <RCCEx_PLLSAI1_Config+0x214>)
 80079e0:	f7fa febc 	bl	800275c <assert_failed>
 80079e4:	e7d0      	b.n	8007988 <RCCEx_PLLSAI1_Config+0x1c>
       ||
 80079e6:	2a00      	cmp	r2, #0
 80079e8:	f000 80c5 	beq.w	8007b76 <RCCEx_PLLSAI1_Config+0x20a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80079ec:	4b65      	ldr	r3, [pc, #404]	; (8007b84 <RCCEx_PLLSAI1_Config+0x218>)
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80079f4:	3301      	adds	r3, #1
 80079f6:	6862      	ldr	r2, [r4, #4]
       ||
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d001      	beq.n	8007a00 <RCCEx_PLLSAI1_Config+0x94>
      status = HAL_ERROR;
 80079fc:	2601      	movs	r6, #1
 80079fe:	e7de      	b.n	80079be <RCCEx_PLLSAI1_Config+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 8007a00:	2600      	movs	r6, #0
 8007a02:	e009      	b.n	8007a18 <RCCEx_PLLSAI1_Config+0xac>
    switch(PllSai1->PLLSAI1Source)
 8007a04:	6823      	ldr	r3, [r4, #0]
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d05a      	beq.n	8007ac0 <RCCEx_PLLSAI1_Config+0x154>
 8007a0a:	2b03      	cmp	r3, #3
 8007a0c:	d05f      	beq.n	8007ace <RCCEx_PLLSAI1_Config+0x162>
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d045      	beq.n	8007a9e <RCCEx_PLLSAI1_Config+0x132>
 8007a12:	2601      	movs	r6, #1
  if(status == HAL_OK)
 8007a14:	2e00      	cmp	r6, #0
 8007a16:	d1d2      	bne.n	80079be <RCCEx_PLLSAI1_Config+0x52>
    __HAL_RCC_PLLSAI1_DISABLE();
 8007a18:	4a5a      	ldr	r2, [pc, #360]	; (8007b84 <RCCEx_PLLSAI1_Config+0x218>)
 8007a1a:	6813      	ldr	r3, [r2, #0]
 8007a1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a20:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007a22:	f7fc fe69 	bl	80046f8 <HAL_GetTick>
 8007a26:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007a28:	4b56      	ldr	r3, [pc, #344]	; (8007b84 <RCCEx_PLLSAI1_Config+0x218>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007a30:	d005      	beq.n	8007a3e <RCCEx_PLLSAI1_Config+0xd2>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007a32:	f7fc fe61 	bl	80046f8 <HAL_GetTick>
 8007a36:	1bc3      	subs	r3, r0, r7
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d9f5      	bls.n	8007a28 <RCCEx_PLLSAI1_Config+0xbc>
        status = HAL_TIMEOUT;
 8007a3c:	2603      	movs	r6, #3
    if(status == HAL_OK)
 8007a3e:	2e00      	cmp	r6, #0
 8007a40:	d1bd      	bne.n	80079be <RCCEx_PLLSAI1_Config+0x52>
      if(Divider == DIVIDER_P_UPDATE)
 8007a42:	2d00      	cmp	r5, #0
 8007a44:	d157      	bne.n	8007af6 <RCCEx_PLLSAI1_Config+0x18a>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 8007a46:	68e3      	ldr	r3, [r4, #12]
 8007a48:	3b02      	subs	r3, #2
 8007a4a:	2b1d      	cmp	r3, #29
 8007a4c:	d84d      	bhi.n	8007aea <RCCEx_PLLSAI1_Config+0x17e>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007a4e:	494d      	ldr	r1, [pc, #308]	; (8007b84 <RCCEx_PLLSAI1_Config+0x218>)
 8007a50:	690b      	ldr	r3, [r1, #16]
 8007a52:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007a56:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007a5a:	68a0      	ldr	r0, [r4, #8]
 8007a5c:	68e2      	ldr	r2, [r4, #12]
 8007a5e:	06d2      	lsls	r2, r2, #27
 8007a60:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8007a64:	4313      	orrs	r3, r2
 8007a66:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8007a68:	4a46      	ldr	r2, [pc, #280]	; (8007b84 <RCCEx_PLLSAI1_Config+0x218>)
 8007a6a:	6813      	ldr	r3, [r2, #0]
 8007a6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a70:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8007a72:	f7fc fe41 	bl	80046f8 <HAL_GetTick>
 8007a76:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007a78:	4b42      	ldr	r3, [pc, #264]	; (8007b84 <RCCEx_PLLSAI1_Config+0x218>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007a80:	d105      	bne.n	8007a8e <RCCEx_PLLSAI1_Config+0x122>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007a82:	f7fc fe39 	bl	80046f8 <HAL_GetTick>
 8007a86:	1b40      	subs	r0, r0, r5
 8007a88:	2802      	cmp	r0, #2
 8007a8a:	d9f5      	bls.n	8007a78 <RCCEx_PLLSAI1_Config+0x10c>
          status = HAL_TIMEOUT;
 8007a8c:	2603      	movs	r6, #3
      if(status == HAL_OK)
 8007a8e:	2e00      	cmp	r6, #0
 8007a90:	d195      	bne.n	80079be <RCCEx_PLLSAI1_Config+0x52>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007a92:	4a3c      	ldr	r2, [pc, #240]	; (8007b84 <RCCEx_PLLSAI1_Config+0x218>)
 8007a94:	6913      	ldr	r3, [r2, #16]
 8007a96:	69a1      	ldr	r1, [r4, #24]
 8007a98:	430b      	orrs	r3, r1
 8007a9a:	6113      	str	r3, [r2, #16]
 8007a9c:	e78f      	b.n	80079be <RCCEx_PLLSAI1_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007a9e:	4a39      	ldr	r2, [pc, #228]	; (8007b84 <RCCEx_PLLSAI1_Config+0x218>)
 8007aa0:	6812      	ldr	r2, [r2, #0]
 8007aa2:	f012 0f02 	tst.w	r2, #2
 8007aa6:	d01e      	beq.n	8007ae6 <RCCEx_PLLSAI1_Config+0x17a>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007aa8:	4836      	ldr	r0, [pc, #216]	; (8007b84 <RCCEx_PLLSAI1_Config+0x218>)
 8007aaa:	68c2      	ldr	r2, [r0, #12]
 8007aac:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8007ab0:	6861      	ldr	r1, [r4, #4]
 8007ab2:	3901      	subs	r1, #1
 8007ab4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	60c3      	str	r3, [r0, #12]
 8007abc:	2600      	movs	r6, #0
 8007abe:	e7a9      	b.n	8007a14 <RCCEx_PLLSAI1_Config+0xa8>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007ac0:	4a30      	ldr	r2, [pc, #192]	; (8007b84 <RCCEx_PLLSAI1_Config+0x218>)
 8007ac2:	6812      	ldr	r2, [r2, #0]
 8007ac4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8007ac8:	d1ee      	bne.n	8007aa8 <RCCEx_PLLSAI1_Config+0x13c>
        status = HAL_ERROR;
 8007aca:	2601      	movs	r6, #1
 8007acc:	e7a2      	b.n	8007a14 <RCCEx_PLLSAI1_Config+0xa8>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007ace:	4a2d      	ldr	r2, [pc, #180]	; (8007b84 <RCCEx_PLLSAI1_Config+0x218>)
 8007ad0:	6812      	ldr	r2, [r2, #0]
 8007ad2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8007ad6:	d1e7      	bne.n	8007aa8 <RCCEx_PLLSAI1_Config+0x13c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007ad8:	4a2a      	ldr	r2, [pc, #168]	; (8007b84 <RCCEx_PLLSAI1_Config+0x218>)
 8007ada:	6812      	ldr	r2, [r2, #0]
 8007adc:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8007ae0:	d1e2      	bne.n	8007aa8 <RCCEx_PLLSAI1_Config+0x13c>
          status = HAL_ERROR;
 8007ae2:	2601      	movs	r6, #1
 8007ae4:	e796      	b.n	8007a14 <RCCEx_PLLSAI1_Config+0xa8>
        status = HAL_ERROR;
 8007ae6:	2601      	movs	r6, #1
 8007ae8:	e794      	b.n	8007a14 <RCCEx_PLLSAI1_Config+0xa8>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 8007aea:	f640 31b4 	movw	r1, #2996	; 0xbb4
 8007aee:	4824      	ldr	r0, [pc, #144]	; (8007b80 <RCCEx_PLLSAI1_Config+0x214>)
 8007af0:	f7fa fe34 	bl	800275c <assert_failed>
 8007af4:	e7ab      	b.n	8007a4e <RCCEx_PLLSAI1_Config+0xe2>
      else if(Divider == DIVIDER_Q_UPDATE)
 8007af6:	2d01      	cmp	r5, #1
 8007af8:	d018      	beq.n	8007b2c <RCCEx_PLLSAI1_Config+0x1c0>
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8007afa:	6963      	ldr	r3, [r4, #20]
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d005      	beq.n	8007b0c <RCCEx_PLLSAI1_Config+0x1a0>
 8007b00:	2b04      	cmp	r3, #4
 8007b02:	d003      	beq.n	8007b0c <RCCEx_PLLSAI1_Config+0x1a0>
 8007b04:	2b06      	cmp	r3, #6
 8007b06:	d001      	beq.n	8007b0c <RCCEx_PLLSAI1_Config+0x1a0>
 8007b08:	2b08      	cmp	r3, #8
 8007b0a:	d12e      	bne.n	8007b6a <RCCEx_PLLSAI1_Config+0x1fe>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b0c:	481d      	ldr	r0, [pc, #116]	; (8007b84 <RCCEx_PLLSAI1_Config+0x218>)
 8007b0e:	6902      	ldr	r2, [r0, #16]
 8007b10:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8007b14:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8007b18:	68a1      	ldr	r1, [r4, #8]
 8007b1a:	6963      	ldr	r3, [r4, #20]
 8007b1c:	085b      	lsrs	r3, r3, #1
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	065b      	lsls	r3, r3, #25
 8007b22:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007b26:	4313      	orrs	r3, r2
 8007b28:	6103      	str	r3, [r0, #16]
 8007b2a:	e79d      	b.n	8007a68 <RCCEx_PLLSAI1_Config+0xfc>
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8007b2c:	6923      	ldr	r3, [r4, #16]
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d005      	beq.n	8007b3e <RCCEx_PLLSAI1_Config+0x1d2>
 8007b32:	2b04      	cmp	r3, #4
 8007b34:	d003      	beq.n	8007b3e <RCCEx_PLLSAI1_Config+0x1d2>
 8007b36:	2b06      	cmp	r3, #6
 8007b38:	d001      	beq.n	8007b3e <RCCEx_PLLSAI1_Config+0x1d2>
 8007b3a:	2b08      	cmp	r3, #8
 8007b3c:	d10f      	bne.n	8007b5e <RCCEx_PLLSAI1_Config+0x1f2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b3e:	4811      	ldr	r0, [pc, #68]	; (8007b84 <RCCEx_PLLSAI1_Config+0x218>)
 8007b40:	6902      	ldr	r2, [r0, #16]
 8007b42:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8007b46:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8007b4a:	68a1      	ldr	r1, [r4, #8]
 8007b4c:	6923      	ldr	r3, [r4, #16]
 8007b4e:	085b      	lsrs	r3, r3, #1
 8007b50:	3b01      	subs	r3, #1
 8007b52:	055b      	lsls	r3, r3, #21
 8007b54:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	6103      	str	r3, [r0, #16]
 8007b5c:	e784      	b.n	8007a68 <RCCEx_PLLSAI1_Config+0xfc>
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8007b5e:	f640 31d8 	movw	r1, #3032	; 0xbd8
 8007b62:	4807      	ldr	r0, [pc, #28]	; (8007b80 <RCCEx_PLLSAI1_Config+0x214>)
 8007b64:	f7fa fdfa 	bl	800275c <assert_failed>
 8007b68:	e7e9      	b.n	8007b3e <RCCEx_PLLSAI1_Config+0x1d2>
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8007b6a:	f640 31ea 	movw	r1, #3050	; 0xbea
 8007b6e:	4804      	ldr	r0, [pc, #16]	; (8007b80 <RCCEx_PLLSAI1_Config+0x214>)
 8007b70:	f7fa fdf4 	bl	800275c <assert_failed>
 8007b74:	e7ca      	b.n	8007b0c <RCCEx_PLLSAI1_Config+0x1a0>
      status = HAL_ERROR;
 8007b76:	2601      	movs	r6, #1
 8007b78:	e721      	b.n	80079be <RCCEx_PLLSAI1_Config+0x52>
 8007b7a:	bf00      	nop
 8007b7c:	01110000 	.word	0x01110000
 8007b80:	0800baa0 	.word	0x0800baa0
 8007b84:	40021000 	.word	0x40021000

08007b88 <HAL_RCCEx_PeriphCLKConfig>:
{
 8007b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b8c:	b082      	sub	sp, #8
 8007b8e:	4604      	mov	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8007b90:	6802      	ldr	r2, [r0, #0]
 8007b92:	4b60      	ldr	r3, [pc, #384]	; (8007d14 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8007b94:	421a      	tst	r2, r3
 8007b96:	d002      	beq.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x16>
 8007b98:	4b5f      	ldr	r3, [pc, #380]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	b11b      	cbz	r3, 8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8007b9e:	21c9      	movs	r1, #201	; 0xc9
 8007ba0:	485e      	ldr	r0, [pc, #376]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8007ba2:	f7fa fddb 	bl	800275c <assert_failed>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007ba6:	6823      	ldr	r3, [r4, #0]
 8007ba8:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8007bac:	d032      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8007bae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007bb0:	b12b      	cbz	r3, 8007bbe <HAL_RCCEx_PeriphCLKConfig+0x36>
 8007bb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bb6:	d002      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x36>
 8007bb8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007bbc:	d10a      	bne.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8007bbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007bc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bc4:	d00b      	beq.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007bc6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007bca:	d017      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007bcc:	b173      	cbz	r3, 8007bec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007bce:	2601      	movs	r6, #1
 8007bd0:	4637      	mov	r7, r6
 8007bd2:	e021      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x90>
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8007bd4:	21d1      	movs	r1, #209	; 0xd1
 8007bd6:	4851      	ldr	r0, [pc, #324]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8007bd8:	f7fa fdc0 	bl	800275c <assert_failed>
 8007bdc:	e7ef      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x36>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007bde:	4a50      	ldr	r2, [pc, #320]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8007be0:	68d3      	ldr	r3, [r2, #12]
 8007be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007be6:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007be8:	2700      	movs	r7, #0
 8007bea:	e008      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x76>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007bec:	2100      	movs	r1, #0
 8007bee:	1d20      	adds	r0, r4, #4
 8007bf0:	f7ff febc 	bl	800796c <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 8007bf4:	4607      	mov	r7, r0
 8007bf6:	b110      	cbz	r0, 8007bfe <HAL_RCCEx_PeriphCLKConfig+0x76>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007bf8:	4606      	mov	r6, r0
 8007bfa:	e00d      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch(PeriphClkInit->Sai1ClockSelection)
 8007bfc:	2700      	movs	r7, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007bfe:	4a48      	ldr	r2, [pc, #288]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8007c00:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007c04:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007c08:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007c0a:	430b      	orrs	r3, r1
 8007c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c10:	2600      	movs	r6, #0
 8007c12:	e001      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007c14:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c16:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c18:	6823      	ldr	r3, [r4, #0]
 8007c1a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007c1e:	f000 8088 	beq.w	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8007c22:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007c24:	b143      	cbz	r3, 8007c38 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 8007c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c2a:	d005      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 8007c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c30:	d002      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 8007c32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c36:	d151      	bne.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x154>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007c38:	4b39      	ldr	r3, [pc, #228]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8007c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c3c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8007c40:	d152      	bne.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c42:	4b37      	ldr	r3, [pc, #220]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8007c44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007c46:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007c4a:	659a      	str	r2, [r3, #88]	; 0x58
 8007c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c52:	9301      	str	r3, [sp, #4]
 8007c54:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007c56:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c5a:	4a32      	ldr	r2, [pc, #200]	; (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8007c5c:	6813      	ldr	r3, [r2, #0]
 8007c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c62:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007c64:	f7fc fd48 	bl	80046f8 <HAL_GetTick>
 8007c68:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007c6a:	4b2e      	ldr	r3, [pc, #184]	; (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007c72:	d105      	bne.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c74:	f7fc fd40 	bl	80046f8 <HAL_GetTick>
 8007c78:	1b40      	subs	r0, r0, r5
 8007c7a:	2802      	cmp	r0, #2
 8007c7c:	d9f5      	bls.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0xe2>
        ret = HAL_TIMEOUT;
 8007c7e:	2703      	movs	r7, #3
    if(ret == HAL_OK)
 8007c80:	2f00      	cmp	r7, #0
 8007c82:	d151      	bne.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007c84:	4b26      	ldr	r3, [pc, #152]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8007c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007c8a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8007c8e:	d015      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x134>
 8007c90:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d012      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x134>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007c96:	4a22      	ldr	r2, [pc, #136]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8007c98:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8007ca0:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8007ca4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8007ca8:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007cac:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8007cb0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8007cb4:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8007cb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007cbc:	f013 0f01 	tst.w	r3, #1
 8007cc0:	d115      	bne.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x166>
      if(ret == HAL_OK)
 8007cc2:	2f00      	cmp	r7, #0
 8007cc4:	f040 819b 	bne.w	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x476>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007cc8:	4a15      	ldr	r2, [pc, #84]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8007cca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cd2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007cd4:	430b      	orrs	r3, r1
 8007cd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007cda:	e026      	b.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8007cdc:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8007ce0:	480e      	ldr	r0, [pc, #56]	; (8007d1c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8007ce2:	f7fa fd3b 	bl	800275c <assert_failed>
 8007ce6:	e7a7      	b.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    FlagStatus       pwrclkchanged = RESET;
 8007ce8:	f04f 0800 	mov.w	r8, #0
 8007cec:	e7b5      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
        tickstart = HAL_GetTick();
 8007cee:	f7fc fd03 	bl	80046f8 <HAL_GetTick>
 8007cf2:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cf4:	4b0a      	ldr	r3, [pc, #40]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8007cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cfa:	f013 0f02 	tst.w	r3, #2
 8007cfe:	d1e0      	bne.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d00:	f7fc fcfa 	bl	80046f8 <HAL_GetTick>
 8007d04:	1b40      	subs	r0, r0, r5
 8007d06:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d0a:	4298      	cmp	r0, r3
 8007d0c:	d9f2      	bls.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
            ret = HAL_TIMEOUT;
 8007d0e:	2703      	movs	r7, #3
 8007d10:	e7d7      	b.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
 8007d12:	bf00      	nop
 8007d14:	000eefe7 	.word	0x000eefe7
 8007d18:	fff11018 	.word	0xfff11018
 8007d1c:	0800baa0 	.word	0x0800baa0
 8007d20:	40021000 	.word	0x40021000
 8007d24:	40007000 	.word	0x40007000
      status = ret;
 8007d28:	463e      	mov	r6, r7
    if(pwrclkchanged == SET)
 8007d2a:	f1b8 0f00 	cmp.w	r8, #0
 8007d2e:	f040 8168 	bne.w	8008002 <HAL_RCCEx_PeriphCLKConfig+0x47a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d32:	6823      	ldr	r3, [r4, #0]
 8007d34:	f013 0f01 	tst.w	r3, #1
 8007d38:	d010      	beq.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8007d3a:	6a23      	ldr	r3, [r4, #32]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d904      	bls.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8007d40:	2b03      	cmp	r3, #3
 8007d42:	d002      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	f040 8162 	bne.w	800800e <HAL_RCCEx_PeriphCLKConfig+0x486>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d4a:	4ab7      	ldr	r2, [pc, #732]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d4c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007d50:	f023 0303 	bic.w	r3, r3, #3
 8007d54:	6a21      	ldr	r1, [r4, #32]
 8007d56:	430b      	orrs	r3, r1
 8007d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007d5c:	6823      	ldr	r3, [r4, #0]
 8007d5e:	f013 0f02 	tst.w	r3, #2
 8007d62:	d011      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x200>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8007d64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d66:	b133      	cbz	r3, 8007d76 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007d68:	2b04      	cmp	r3, #4
 8007d6a:	d004      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007d6c:	2b0c      	cmp	r3, #12
 8007d6e:	d002      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007d70:	2b08      	cmp	r3, #8
 8007d72:	f040 8152 	bne.w	800801a <HAL_RCCEx_PeriphCLKConfig+0x492>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007d76:	4aac      	ldr	r2, [pc, #688]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d78:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007d7c:	f023 030c 	bic.w	r3, r3, #12
 8007d80:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007d82:	430b      	orrs	r3, r1
 8007d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007d88:	6823      	ldr	r3, [r4, #0]
 8007d8a:	f013 0f04 	tst.w	r3, #4
 8007d8e:	d011      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8007d90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007d92:	b133      	cbz	r3, 8007da2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8007d94:	2b10      	cmp	r3, #16
 8007d96:	d004      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8007d98:	2b30      	cmp	r3, #48	; 0x30
 8007d9a:	d002      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8007d9c:	2b20      	cmp	r3, #32
 8007d9e:	f040 8147 	bne.w	8008030 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007da2:	4aa1      	ldr	r2, [pc, #644]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007da4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007da8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007dac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007dae:	430b      	orrs	r3, r1
 8007db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007db4:	6823      	ldr	r3, [r4, #0]
 8007db6:	f013 0f20 	tst.w	r3, #32
 8007dba:	d014      	beq.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8007dbc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007dbe:	b14b      	cbz	r3, 8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8007dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dc4:	d006      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8007dc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dca:	d003      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8007dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dd0:	f040 8134 	bne.w	800803c <HAL_RCCEx_PeriphCLKConfig+0x4b4>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007dd4:	4a94      	ldr	r2, [pc, #592]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007dd6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007dda:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007dde:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007de0:	430b      	orrs	r3, r1
 8007de2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007de6:	6823      	ldr	r3, [r4, #0]
 8007de8:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007dec:	d014      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x290>
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8007dee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007df0:	b14b      	cbz	r3, 8007e06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8007df2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007df6:	d006      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8007df8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007dfc:	d003      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8007dfe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007e02:	f040 8121 	bne.w	8008048 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e06:	4a88      	ldr	r2, [pc, #544]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007e08:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007e0c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8007e10:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007e12:	430b      	orrs	r3, r1
 8007e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007e18:	6823      	ldr	r3, [r4, #0]
 8007e1a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007e1e:	d014      	beq.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8007e20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e22:	b14b      	cbz	r3, 8007e38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007e24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e28:	d006      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007e2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e2e:	d003      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007e30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007e34:	f040 810e 	bne.w	8008054 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e38:	4a7b      	ldr	r2, [pc, #492]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007e3a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007e3e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007e42:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007e44:	430b      	orrs	r3, r1
 8007e46:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e4a:	6823      	ldr	r3, [r4, #0]
 8007e4c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007e50:	d011      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8007e52:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007e54:	b133      	cbz	r3, 8007e64 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8007e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e5a:	d003      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8007e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e60:	f040 80fe 	bne.w	8008060 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e64:	4a70      	ldr	r2, [pc, #448]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007e66:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007e6a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007e6e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007e70:	430b      	orrs	r3, r1
 8007e72:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e76:	6823      	ldr	r3, [r4, #0]
 8007e78:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007e7c:	d011      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x31a>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8007e7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e80:	b133      	cbz	r3, 8007e90 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007e82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e86:	d003      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007e88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e8c:	f040 80ee 	bne.w	800806c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e90:	4a65      	ldr	r2, [pc, #404]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007e92:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007e96:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007e9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e9c:	430b      	orrs	r3, r1
 8007e9e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007ea2:	6823      	ldr	r3, [r4, #0]
 8007ea4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007ea8:	d011      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x346>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8007eaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007eac:	b133      	cbz	r3, 8007ebc <HAL_RCCEx_PeriphCLKConfig+0x334>
 8007eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eb2:	d003      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x334>
 8007eb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007eb8:	f040 80de 	bne.w	8008078 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007ebc:	4a5a      	ldr	r2, [pc, #360]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ebe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007ec2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007ec6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007ec8:	430b      	orrs	r3, r1
 8007eca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007ece:	6823      	ldr	r3, [r4, #0]
 8007ed0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8007ed4:	d01d      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8007ed6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007ed8:	b14b      	cbz	r3, 8007eee <HAL_RCCEx_PeriphCLKConfig+0x366>
 8007eda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ede:	d006      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x366>
 8007ee0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ee4:	d003      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x366>
 8007ee6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007eea:	f040 80cb 	bne.w	8008084 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007eee:	4a4e      	ldr	r2, [pc, #312]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ef0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007ef4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8007ef8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007efa:	430b      	orrs	r3, r1
 8007efc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007f00:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007f02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f06:	f000 80c3 	beq.w	8008090 <HAL_RCCEx_PeriphCLKConfig+0x508>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007f0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f0e:	f000 80c4 	beq.w	800809a <HAL_RCCEx_PeriphCLKConfig+0x512>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007f12:	6823      	ldr	r3, [r4, #0]
 8007f14:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8007f18:	d01d      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8007f1a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007f1c:	b14b      	cbz	r3, 8007f32 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
 8007f1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f22:	d006      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
 8007f24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f28:	d003      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
 8007f2a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007f2e:	f040 80bd 	bne.w	80080ac <HAL_RCCEx_PeriphCLKConfig+0x524>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007f32:	4a3d      	ldr	r2, [pc, #244]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007f34:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007f38:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8007f3c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007f3e:	430b      	orrs	r3, r1
 8007f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007f44:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007f46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f4a:	f000 80b5 	beq.w	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x530>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007f4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f52:	f000 80b6 	beq.w	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x53a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8007f5c:	d01d      	beq.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x412>
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8007f5e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007f60:	b14b      	cbz	r3, 8007f76 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 8007f62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f66:	d006      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 8007f68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f6c:	d003      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 8007f6e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007f72:	f040 80af 	bne.w	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f76:	4a2c      	ldr	r2, [pc, #176]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007f78:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007f7c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8007f80:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007f82:	430b      	orrs	r3, r1
 8007f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007f88:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007f8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f8e:	f000 80a7 	beq.w	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x558>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007f92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f96:	f000 80a8 	beq.w	80080ea <HAL_RCCEx_PeriphCLKConfig+0x562>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f9a:	6823      	ldr	r3, [r4, #0]
 8007f9c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8007fa0:	d016      	beq.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x448>
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8007fa2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007fa4:	b133      	cbz	r3, 8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8007fa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007faa:	d003      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8007fac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007fb0:	f040 80a4 	bne.w	80080fc <HAL_RCCEx_PeriphCLKConfig+0x574>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007fb4:	4a1c      	ldr	r2, [pc, #112]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007fb6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007fba:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8007fbe:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007fc0:	430b      	orrs	r3, r1
 8007fc2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007fc6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007fc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fcc:	f000 809c 	beq.w	8008108 <HAL_RCCEx_PeriphCLKConfig+0x580>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007fd0:	6823      	ldr	r3, [r4, #0]
 8007fd2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8007fd6:	d00e      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8007fd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007fda:	b11b      	cbz	r3, 8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8007fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fe0:	f040 809b 	bne.w	800811a <HAL_RCCEx_PeriphCLKConfig+0x592>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007fe4:	4a10      	ldr	r2, [pc, #64]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007fe6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007fea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007fee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007ff0:	430b      	orrs	r3, r1
 8007ff2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8007ff6:	4630      	mov	r0, r6
 8007ff8:	b002      	add	sp, #8
 8007ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8007ffe:	463e      	mov	r6, r7
 8008000:	e693      	b.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008002:	4a09      	ldr	r2, [pc, #36]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008004:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800800a:	6593      	str	r3, [r2, #88]	; 0x58
 800800c:	e691      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800800e:	f240 1199 	movw	r1, #409	; 0x199
 8008012:	4806      	ldr	r0, [pc, #24]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008014:	f7fa fba2 	bl	800275c <assert_failed>
 8008018:	e697      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800801a:	f240 11a3 	movw	r1, #419	; 0x1a3
 800801e:	4803      	ldr	r0, [pc, #12]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008020:	f7fa fb9c 	bl	800275c <assert_failed>
 8008024:	e6a7      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008026:	bf00      	nop
 8008028:	40021000 	.word	0x40021000
 800802c:	0800baa0 	.word	0x0800baa0
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8008030:	f240 11af 	movw	r1, #431	; 0x1af
 8008034:	483c      	ldr	r0, [pc, #240]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8008036:	f7fa fb91 	bl	800275c <assert_failed>
 800803a:	e6b2      	b.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 800803c:	f240 11d7 	movw	r1, #471	; 0x1d7
 8008040:	4839      	ldr	r0, [pc, #228]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8008042:	f7fa fb8b 	bl	800275c <assert_failed>
 8008046:	e6c5      	b.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8008048:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800804c:	4836      	ldr	r0, [pc, #216]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 800804e:	f7fa fb85 	bl	800275c <assert_failed>
 8008052:	e6d8      	b.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8008054:	f240 11e7 	movw	r1, #487	; 0x1e7
 8008058:	4833      	ldr	r0, [pc, #204]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 800805a:	f7fa fb7f 	bl	800275c <assert_failed>
 800805e:	e6eb      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8008060:	f240 11ef 	movw	r1, #495	; 0x1ef
 8008064:	4830      	ldr	r0, [pc, #192]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8008066:	f7fa fb79 	bl	800275c <assert_failed>
 800806a:	e6fb      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800806c:	f240 11fb 	movw	r1, #507	; 0x1fb
 8008070:	482d      	ldr	r0, [pc, #180]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8008072:	f7fa fb73 	bl	800275c <assert_failed>
 8008076:	e70b      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x308>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8008078:	f240 2107 	movw	r1, #519	; 0x207
 800807c:	482a      	ldr	r0, [pc, #168]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 800807e:	f7fa fb6d 	bl	800275c <assert_failed>
 8008082:	e71b      	b.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x334>
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8008084:	f44f 7108 	mov.w	r1, #544	; 0x220
 8008088:	4827      	ldr	r0, [pc, #156]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 800808a:	f7fa fb67 	bl	800275c <assert_failed>
 800808e:	e72e      	b.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x366>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008090:	68d3      	ldr	r3, [r2, #12]
 8008092:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008096:	60d3      	str	r3, [r2, #12]
 8008098:	e73b      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x38a>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800809a:	2101      	movs	r1, #1
 800809c:	1d20      	adds	r0, r4, #4
 800809e:	f7ff fc65 	bl	800796c <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80080a2:	2800      	cmp	r0, #0
 80080a4:	f43f af35 	beq.w	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x38a>
          status = ret;
 80080a8:	4606      	mov	r6, r0
 80080aa:	e732      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 80080ac:	f240 2141 	movw	r1, #577	; 0x241
 80080b0:	481d      	ldr	r0, [pc, #116]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80080b2:	f7fa fb53 	bl	800275c <assert_failed>
 80080b6:	e73c      	b.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80080b8:	68d3      	ldr	r3, [r2, #12]
 80080ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080be:	60d3      	str	r3, [r2, #12]
 80080c0:	e749      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80080c2:	2101      	movs	r1, #1
 80080c4:	1d20      	adds	r0, r4, #4
 80080c6:	f7ff fc51 	bl	800796c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80080ca:	2800      	cmp	r0, #0
 80080cc:	f43f af43 	beq.w	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        status = ret;
 80080d0:	4606      	mov	r6, r0
 80080d2:	e740      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 80080d4:	f240 2166 	movw	r1, #614	; 0x266
 80080d8:	4813      	ldr	r0, [pc, #76]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80080da:	f7fa fb3f 	bl	800275c <assert_failed>
 80080de:	e74a      	b.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80080e0:	68d3      	ldr	r3, [r2, #12]
 80080e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080e6:	60d3      	str	r3, [r2, #12]
 80080e8:	e757      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x412>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80080ea:	2101      	movs	r1, #1
 80080ec:	1d20      	adds	r0, r4, #4
 80080ee:	f7ff fc3d 	bl	800796c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80080f2:	2800      	cmp	r0, #0
 80080f4:	f43f af51 	beq.w	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x412>
        status = ret;
 80080f8:	4606      	mov	r6, r0
 80080fa:	e74e      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x412>
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 80080fc:	f240 2186 	movw	r1, #646	; 0x286
 8008100:	4809      	ldr	r0, [pc, #36]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8008102:	f7fa fb2b 	bl	800275c <assert_failed>
 8008106:	e755      	b.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008108:	2102      	movs	r1, #2
 800810a:	1d20      	adds	r0, r4, #4
 800810c:	f7ff fc2e 	bl	800796c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8008110:	2800      	cmp	r0, #0
 8008112:	f43f af5d 	beq.w	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x448>
        status = ret;
 8008116:	4606      	mov	r6, r0
 8008118:	e75a      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x448>
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 800811a:	f240 21b2 	movw	r1, #690	; 0x2b2
 800811e:	4802      	ldr	r0, [pc, #8]	; (8008128 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8008120:	f7fa fb1c 	bl	800275c <assert_failed>
 8008124:	e75e      	b.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8008126:	bf00      	nop
 8008128:	0800baa0 	.word	0x0800baa0

0800812c <HAL_RNG_Init>:
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800812c:	2800      	cmp	r0, #0
 800812e:	d03d      	beq.n	80081ac <HAL_RNG_Init+0x80>
{
 8008130:	b538      	push	{r3, r4, r5, lr}
 8008132:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 8008134:	6802      	ldr	r2, [r0, #0]
 8008136:	4b1e      	ldr	r3, [pc, #120]	; (80081b0 <HAL_RNG_Init+0x84>)
 8008138:	429a      	cmp	r2, r3
 800813a:	d003      	beq.n	8008144 <HAL_RNG_Init+0x18>
 800813c:	21a7      	movs	r1, #167	; 0xa7
 800813e:	481d      	ldr	r0, [pc, #116]	; (80081b4 <HAL_RNG_Init+0x88>)
 8008140:	f7fa fb0c 	bl	800275c <assert_failed>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8008144:	7963      	ldrb	r3, [r4, #5]
 8008146:	b17b      	cbz	r3, 8008168 <HAL_RNG_Init+0x3c>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8008148:	2302      	movs	r3, #2
 800814a:	7163      	strb	r3, [r4, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800814c:	6822      	ldr	r2, [r4, #0]
 800814e:	6813      	ldr	r3, [r2, #0]
 8008150:	f043 0304 	orr.w	r3, r3, #4
 8008154:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8008156:	6823      	ldr	r3, [r4, #0]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800815e:	d008      	beq.n	8008172 <HAL_RNG_Init+0x46>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8008160:	2304      	movs	r3, #4
 8008162:	7163      	strb	r3, [r4, #5]
    return HAL_ERROR;
 8008164:	2001      	movs	r0, #1
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 8008166:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 8008168:	7123      	strb	r3, [r4, #4]
    HAL_RNG_MspInit(hrng);
 800816a:	4620      	mov	r0, r4
 800816c:	f7fb f9b6 	bl	80034dc <HAL_RNG_MspInit>
 8008170:	e7ea      	b.n	8008148 <HAL_RNG_Init+0x1c>
  tickstart = HAL_GetTick();
 8008172:	f7fc fac1 	bl	80046f8 <HAL_GetTick>
 8008176:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008178:	6823      	ldr	r3, [r4, #0]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	f013 0f04 	tst.w	r3, #4
 8008180:	d00f      	beq.n	80081a2 <HAL_RNG_Init+0x76>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008182:	f7fc fab9 	bl	80046f8 <HAL_GetTick>
 8008186:	1b40      	subs	r0, r0, r5
 8008188:	2802      	cmp	r0, #2
 800818a:	d9f5      	bls.n	8008178 <HAL_RNG_Init+0x4c>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800818c:	6823      	ldr	r3, [r4, #0]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	f013 0f04 	tst.w	r3, #4
 8008194:	d0f0      	beq.n	8008178 <HAL_RNG_Init+0x4c>
        hrng->State = HAL_RNG_STATE_ERROR;
 8008196:	2304      	movs	r3, #4
 8008198:	7163      	strb	r3, [r4, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800819a:	2302      	movs	r3, #2
 800819c:	60a3      	str	r3, [r4, #8]
        return HAL_ERROR;
 800819e:	2001      	movs	r0, #1
 80081a0:	e7e1      	b.n	8008166 <HAL_RNG_Init+0x3a>
  hrng->State = HAL_RNG_STATE_READY;
 80081a2:	2301      	movs	r3, #1
 80081a4:	7163      	strb	r3, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80081a6:	2000      	movs	r0, #0
 80081a8:	60a0      	str	r0, [r4, #8]
  return HAL_OK;
 80081aa:	e7dc      	b.n	8008166 <HAL_RNG_Init+0x3a>
    return HAL_ERROR;
 80081ac:	2001      	movs	r0, #1
}
 80081ae:	4770      	bx	lr
 80081b0:	50060800 	.word	0x50060800
 80081b4:	0800badc 	.word	0x0800badc

080081b8 <HAL_RNG_ReadyDataCallback>:
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 80081b8:	4770      	bx	lr

080081ba <HAL_RNG_ErrorCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 80081ba:	4770      	bx	lr

080081bc <HAL_RNG_IRQHandler>:
{
 80081bc:	b510      	push	{r4, lr}
 80081be:	4604      	mov	r4, r0
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 80081c0:	6803      	ldr	r3, [r0, #0]
 80081c2:	685a      	ldr	r2, [r3, #4]
 80081c4:	f012 0f20 	tst.w	r2, #32
 80081c8:	d01b      	beq.n	8008202 <HAL_RNG_IRQHandler+0x46>
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 80081ca:	2310      	movs	r3, #16
 80081cc:	6083      	str	r3, [r0, #8]
    hrng->State = HAL_RNG_STATE_ERROR;
 80081ce:	2304      	movs	r3, #4
 80081d0:	7163      	strb	r3, [r4, #5]
    HAL_RNG_ErrorCallback(hrng);
 80081d2:	4620      	mov	r0, r4
 80081d4:	f7ff fff1 	bl	80081ba <HAL_RNG_ErrorCallback>
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	f06f 0260 	mvn.w	r2, #96	; 0x60
 80081de:	605a      	str	r2, [r3, #4]
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 80081e0:	6823      	ldr	r3, [r4, #0]
 80081e2:	685a      	ldr	r2, [r3, #4]
 80081e4:	f012 0f01 	tst.w	r2, #1
 80081e8:	d00a      	beq.n	8008200 <HAL_RNG_IRQHandler+0x44>
    __HAL_RNG_DISABLE_IT(hrng);
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	f022 0208 	bic.w	r2, r2, #8
 80081f0:	601a      	str	r2, [r3, #0]
    hrng->RandomNumber = hrng->Instance->DR;
 80081f2:	6823      	ldr	r3, [r4, #0]
 80081f4:	6899      	ldr	r1, [r3, #8]
 80081f6:	60e1      	str	r1, [r4, #12]
    if (hrng->State != HAL_RNG_STATE_ERROR)
 80081f8:	7963      	ldrb	r3, [r4, #5]
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	2b04      	cmp	r3, #4
 80081fe:	d107      	bne.n	8008210 <HAL_RNG_IRQHandler+0x54>
}
 8008200:	bd10      	pop	{r4, pc}
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008208:	d0ea      	beq.n	80081e0 <HAL_RNG_IRQHandler+0x24>
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800820a:	2308      	movs	r3, #8
 800820c:	6083      	str	r3, [r0, #8]
  if (rngclockerror == 1U)
 800820e:	e7de      	b.n	80081ce <HAL_RNG_IRQHandler+0x12>
      hrng->State = HAL_RNG_STATE_READY;
 8008210:	2301      	movs	r3, #1
 8008212:	7163      	strb	r3, [r4, #5]
      __HAL_UNLOCK(hrng);
 8008214:	2300      	movs	r3, #0
 8008216:	7123      	strb	r3, [r4, #4]
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8008218:	4620      	mov	r0, r4
 800821a:	f7ff ffcd 	bl	80081b8 <HAL_RNG_ReadyDataCallback>
}
 800821e:	e7ef      	b.n	8008200 <HAL_RNG_IRQHandler+0x44>

08008220 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8008220:	b538      	push	{r3, r4, r5, lr}
 8008222:	4604      	mov	r4, r0
 8008224:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));
 8008226:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800822a:	d002      	beq.n	8008232 <HAL_RTC_DeactivateAlarm+0x12>
 800822c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008230:	d134      	bne.n	800829c <HAL_RTC_DeactivateAlarm+0x7c>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008232:	f894 3020 	ldrb.w	r3, [r4, #32]
 8008236:	2b01      	cmp	r3, #1
 8008238:	d062      	beq.n	8008300 <HAL_RTC_DeactivateAlarm+0xe0>
 800823a:	2301      	movs	r3, #1
 800823c:	f884 3020 	strb.w	r3, [r4, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008240:	2302      	movs	r3, #2
 8008242:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008246:	6823      	ldr	r3, [r4, #0]
 8008248:	22ca      	movs	r2, #202	; 0xca
 800824a:	625a      	str	r2, [r3, #36]	; 0x24
 800824c:	6823      	ldr	r3, [r4, #0]
 800824e:	2253      	movs	r2, #83	; 0x53
 8008250:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8008252:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008256:	d027      	beq.n	80082a8 <HAL_RTC_DeactivateAlarm+0x88>
    /* AlarmB */
#if defined (RTC_ALRMBSSR_SSCLR)
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMASSR_SSCLR);
#endif

    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008258:	6822      	ldr	r2, [r4, #0]
 800825a:	6893      	ldr	r3, [r2, #8]
 800825c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008260:	6093      	str	r3, [r2, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008262:	6822      	ldr	r2, [r4, #0]
 8008264:	6893      	ldr	r3, [r2, #8]
 8008266:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800826a:	6093      	str	r3, [r2, #8]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 800826c:	f7fc fa44 	bl	80046f8 <HAL_GetTick>
 8008270:	4605      	mov	r5, r0
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008272:	6823      	ldr	r3, [r4, #0]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	f013 0f02 	tst.w	r3, #2
 800827a:	d137      	bne.n	80082ec <HAL_RTC_DeactivateAlarm+0xcc>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800827c:	f7fc fa3c 	bl	80046f8 <HAL_GetTick>
 8008280:	1b43      	subs	r3, r0, r5
 8008282:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008286:	d9f4      	bls.n	8008272 <HAL_RTC_DeactivateAlarm+0x52>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008288:	6823      	ldr	r3, [r4, #0]
 800828a:	22ff      	movs	r2, #255	; 0xff
 800828c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800828e:	2003      	movs	r0, #3
 8008290:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008294:	2300      	movs	r3, #0
 8008296:	f884 3020 	strb.w	r3, [r4, #32]

        return HAL_TIMEOUT;
 800829a:	e030      	b.n	80082fe <HAL_RTC_DeactivateAlarm+0xde>
  assert_param(IS_RTC_ALARM(Alarm));
 800829c:	f640 0142 	movw	r1, #2114	; 0x842
 80082a0:	4818      	ldr	r0, [pc, #96]	; (8008304 <HAL_RTC_DeactivateAlarm+0xe4>)
 80082a2:	f7fa fa5b 	bl	800275c <assert_failed>
 80082a6:	e7c4      	b.n	8008232 <HAL_RTC_DeactivateAlarm+0x12>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80082a8:	6822      	ldr	r2, [r4, #0]
 80082aa:	6893      	ldr	r3, [r2, #8]
 80082ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082b0:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80082b2:	6822      	ldr	r2, [r4, #0]
 80082b4:	6893      	ldr	r3, [r2, #8]
 80082b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082ba:	6093      	str	r3, [r2, #8]
    uint32_t tickstart = HAL_GetTick();
 80082bc:	f7fc fa1c 	bl	80046f8 <HAL_GetTick>
 80082c0:	4605      	mov	r5, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80082c2:	6823      	ldr	r3, [r4, #0]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	f013 0f01 	tst.w	r3, #1
 80082ca:	d10f      	bne.n	80082ec <HAL_RTC_DeactivateAlarm+0xcc>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80082cc:	f7fc fa14 	bl	80046f8 <HAL_GetTick>
 80082d0:	1b40      	subs	r0, r0, r5
 80082d2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80082d6:	d9f4      	bls.n	80082c2 <HAL_RTC_DeactivateAlarm+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082d8:	6823      	ldr	r3, [r4, #0]
 80082da:	22ff      	movs	r2, #255	; 0xff
 80082dc:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80082de:	2003      	movs	r0, #3
 80082e0:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 80082e4:	2300      	movs	r3, #0
 80082e6:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_TIMEOUT;
 80082ea:	e008      	b.n	80082fe <HAL_RTC_DeactivateAlarm+0xde>
      }
    }
#endif
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082ec:	6823      	ldr	r3, [r4, #0]
 80082ee:	22ff      	movs	r2, #255	; 0xff
 80082f0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80082f2:	2301      	movs	r3, #1
 80082f4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80082f8:	2000      	movs	r0, #0
 80082fa:	f884 0020 	strb.w	r0, [r4, #32]

  return HAL_OK;
}
 80082fe:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hrtc);
 8008300:	2002      	movs	r0, #2
 8008302:	e7fc      	b.n	80082fe <HAL_RTC_DeactivateAlarm+0xde>
 8008304:	0800bb14 	.word	0x0800bb14

08008308 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008308:	b510      	push	{r4, lr}
 800830a:	4604      	mov	r4, r0
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800830c:	4b15      	ldr	r3, [pc, #84]	; (8008364 <HAL_RTC_AlarmIRQHandler+0x5c>)
 800830e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008312:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8008314:	6803      	ldr	r3, [r0, #0]
 8008316:	689a      	ldr	r2, [r3, #8]
 8008318:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 800831c:	d003      	beq.n	8008326 <HAL_RTC_AlarmIRQHandler+0x1e>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800831e:	68da      	ldr	r2, [r3, #12]
 8008320:	f412 7f80 	tst.w	r2, #256	; 0x100
 8008324:	d10c      	bne.n	8008340 <HAL_RTC_AlarmIRQHandler+0x38>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8008326:	6823      	ldr	r3, [r4, #0]
 8008328:	689a      	ldr	r2, [r3, #8]
 800832a:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800832e:	d003      	beq.n	8008338 <HAL_RTC_AlarmIRQHandler+0x30>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8008330:	68da      	ldr	r2, [r3, #12]
 8008332:	f412 7f00 	tst.w	r2, #512	; 0x200
 8008336:	d10b      	bne.n	8008350 <HAL_RTC_AlarmIRQHandler+0x48>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008338:	2301      	movs	r3, #1
 800833a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800833e:	bd10      	pop	{r4, pc}
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008340:	68da      	ldr	r2, [r3, #12]
 8008342:	b2d2      	uxtb	r2, r2
 8008344:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008348:	60da      	str	r2, [r3, #12]
      HAL_RTC_AlarmAEventCallback(hrtc);
 800834a:	f7fb f983 	bl	8003654 <HAL_RTC_AlarmAEventCallback>
 800834e:	e7ea      	b.n	8008326 <HAL_RTC_AlarmIRQHandler+0x1e>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008350:	68da      	ldr	r2, [r3, #12]
 8008352:	b2d2      	uxtb	r2, r2
 8008354:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008358:	60da      	str	r2, [r3, #12]
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800835a:	4620      	mov	r0, r4
 800835c:	f000 fcd6 	bl	8008d0c <HAL_RTCEx_AlarmBEventCallback>
 8008360:	e7ea      	b.n	8008338 <HAL_RTC_AlarmIRQHandler+0x30>
 8008362:	bf00      	nop
 8008364:	40010400 	.word	0x40010400

08008368 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008368:	b538      	push	{r3, r4, r5, lr}
 800836a:	4604      	mov	r4, r0

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800836c:	6802      	ldr	r2, [r0, #0]
 800836e:	68d3      	ldr	r3, [r2, #12]
 8008370:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008374:	60d3      	str	r3, [r2, #12]
#endif

  tickstart = HAL_GetTick();
 8008376:	f7fc f9bf 	bl	80046f8 <HAL_GetTick>
 800837a:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800837c:	6823      	ldr	r3, [r4, #0]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	f013 0f20 	tst.w	r3, #32
 8008384:	d107      	bne.n	8008396 <HAL_RTC_WaitForSynchro+0x2e>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008386:	f7fc f9b7 	bl	80046f8 <HAL_GetTick>
 800838a:	1b40      	subs	r0, r0, r5
 800838c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008390:	d9f4      	bls.n	800837c <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8008392:	2003      	movs	r0, #3
 8008394:	e000      	b.n	8008398 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8008396:	2000      	movs	r0, #0
}
 8008398:	bd38      	pop	{r3, r4, r5, pc}

0800839a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800839a:	b570      	push	{r4, r5, r6, lr}
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800839c:	6803      	ldr	r3, [r0, #0]
 800839e:	68da      	ldr	r2, [r3, #12]
 80083a0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80083a4:	d002      	beq.n	80083ac <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 80083a6:	2500      	movs	r5, #0
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
}
 80083a8:	4628      	mov	r0, r5
 80083aa:	bd70      	pop	{r4, r5, r6, pc}
 80083ac:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80083ae:	f04f 32ff 	mov.w	r2, #4294967295
 80083b2:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80083b4:	f7fc f9a0 	bl	80046f8 <HAL_GetTick>
 80083b8:	4606      	mov	r6, r0
  HAL_StatusTypeDef status = HAL_OK;
 80083ba:	2500      	movs	r5, #0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80083c4:	d1f0      	bne.n	80083a8 <RTC_EnterInitMode+0xe>
 80083c6:	2d03      	cmp	r5, #3
 80083c8:	d0ee      	beq.n	80083a8 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80083ca:	f7fc f995 	bl	80046f8 <HAL_GetTick>
 80083ce:	1b83      	subs	r3, r0, r6
 80083d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083d4:	d9f2      	bls.n	80083bc <RTC_EnterInitMode+0x22>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80083d6:	2503      	movs	r5, #3
 80083d8:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 80083dc:	e7ee      	b.n	80083bc <RTC_EnterInitMode+0x22>
	...

080083e0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80083e0:	b510      	push	{r4, lr}
 80083e2:	4604      	mov	r4, r0
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80083e4:	4b10      	ldr	r3, [pc, #64]	; (8008428 <RTC_ExitInitMode+0x48>)
 80083e6:	68da      	ldr	r2, [r3, #12]
 80083e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083ec:	60da      	str	r2, [r3, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	f013 0f20 	tst.w	r3, #32
 80083f4:	d106      	bne.n	8008404 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80083f6:	f7ff ffb7 	bl	8008368 <HAL_RTC_WaitForSynchro>
 80083fa:	b198      	cbz	r0, 8008424 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80083fc:	2003      	movs	r0, #3
 80083fe:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008402:	e00f      	b.n	8008424 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008404:	4a08      	ldr	r2, [pc, #32]	; (8008428 <RTC_ExitInitMode+0x48>)
 8008406:	6893      	ldr	r3, [r2, #8]
 8008408:	f023 0320 	bic.w	r3, r3, #32
 800840c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800840e:	f7ff ffab 	bl	8008368 <HAL_RTC_WaitForSynchro>
 8008412:	b110      	cbz	r0, 800841a <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008414:	2003      	movs	r0, #3
 8008416:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800841a:	4a03      	ldr	r2, [pc, #12]	; (8008428 <RTC_ExitInitMode+0x48>)
 800841c:	6893      	ldr	r3, [r2, #8]
 800841e:	f043 0320 	orr.w	r3, r3, #32
 8008422:	6093      	str	r3, [r2, #8]
  }

  return status;
}
 8008424:	bd10      	pop	{r4, pc}
 8008426:	bf00      	nop
 8008428:	40002800 	.word	0x40002800

0800842c <HAL_RTC_Init>:
  if (hrtc != NULL)
 800842c:	2800      	cmp	r0, #0
 800842e:	f000 809e 	beq.w	800856e <HAL_RTC_Init+0x142>
{
 8008432:	b538      	push	{r3, r4, r5, lr}
 8008434:	4604      	mov	r4, r0
    assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8008436:	6802      	ldr	r2, [r0, #0]
 8008438:	4b4e      	ldr	r3, [pc, #312]	; (8008574 <HAL_RTC_Init+0x148>)
 800843a:	429a      	cmp	r2, r3
 800843c:	d003      	beq.n	8008446 <HAL_RTC_Init+0x1a>
 800843e:	21fe      	movs	r1, #254	; 0xfe
 8008440:	484d      	ldr	r0, [pc, #308]	; (8008578 <HAL_RTC_Init+0x14c>)
 8008442:	f7fa f98b 	bl	800275c <assert_failed>
    assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8008446:	6863      	ldr	r3, [r4, #4]
 8008448:	2b40      	cmp	r3, #64	; 0x40
 800844a:	d000      	beq.n	800844e <HAL_RTC_Init+0x22>
 800844c:	bb7b      	cbnz	r3, 80084ae <HAL_RTC_Init+0x82>
    assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 800844e:	68a3      	ldr	r3, [r4, #8]
 8008450:	2b7f      	cmp	r3, #127	; 0x7f
 8008452:	d831      	bhi.n	80084b8 <HAL_RTC_Init+0x8c>
    assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8008454:	68e3      	ldr	r3, [r4, #12]
 8008456:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800845a:	d233      	bcs.n	80084c4 <HAL_RTC_Init+0x98>
    assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 800845c:	6923      	ldr	r3, [r4, #16]
 800845e:	b143      	cbz	r3, 8008472 <HAL_RTC_Init+0x46>
 8008460:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008464:	d005      	beq.n	8008472 <HAL_RTC_Init+0x46>
 8008466:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800846a:	d002      	beq.n	8008472 <HAL_RTC_Init+0x46>
 800846c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008470:	d12e      	bne.n	80084d0 <HAL_RTC_Init+0xa4>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
 8008472:	6963      	ldr	r3, [r4, #20]
 8008474:	b10b      	cbz	r3, 800847a <HAL_RTC_Init+0x4e>
 8008476:	2b02      	cmp	r3, #2
 8008478:	d130      	bne.n	80084dc <HAL_RTC_Init+0xb0>
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 800847a:	69a3      	ldr	r3, [r4, #24]
 800847c:	b113      	cbz	r3, 8008484 <HAL_RTC_Init+0x58>
 800847e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008482:	d131      	bne.n	80084e8 <HAL_RTC_Init+0xbc>
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8008484:	69e3      	ldr	r3, [r4, #28]
 8008486:	2b01      	cmp	r3, #1
 8008488:	d834      	bhi.n	80084f4 <HAL_RTC_Init+0xc8>
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800848a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800848e:	2b00      	cmp	r3, #0
 8008490:	d036      	beq.n	8008500 <HAL_RTC_Init+0xd4>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008492:	2302      	movs	r3, #2
 8008494:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008498:	6823      	ldr	r3, [r4, #0]
 800849a:	22ca      	movs	r2, #202	; 0xca
 800849c:	625a      	str	r2, [r3, #36]	; 0x24
 800849e:	6823      	ldr	r3, [r4, #0]
 80084a0:	2253      	movs	r2, #83	; 0x53
 80084a2:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 80084a4:	4620      	mov	r0, r4
 80084a6:	f7ff ff78 	bl	800839a <RTC_EnterInitMode>
    if (status == HAL_OK)
 80084aa:	b378      	cbz	r0, 800850c <HAL_RTC_Init+0xe0>
}
 80084ac:	bd38      	pop	{r3, r4, r5, pc}
    assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 80084ae:	21ff      	movs	r1, #255	; 0xff
 80084b0:	4831      	ldr	r0, [pc, #196]	; (8008578 <HAL_RTC_Init+0x14c>)
 80084b2:	f7fa f953 	bl	800275c <assert_failed>
 80084b6:	e7ca      	b.n	800844e <HAL_RTC_Init+0x22>
    assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80084b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80084bc:	482e      	ldr	r0, [pc, #184]	; (8008578 <HAL_RTC_Init+0x14c>)
 80084be:	f7fa f94d 	bl	800275c <assert_failed>
 80084c2:	e7c7      	b.n	8008454 <HAL_RTC_Init+0x28>
    assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 80084c4:	f240 1101 	movw	r1, #257	; 0x101
 80084c8:	482b      	ldr	r0, [pc, #172]	; (8008578 <HAL_RTC_Init+0x14c>)
 80084ca:	f7fa f947 	bl	800275c <assert_failed>
 80084ce:	e7c5      	b.n	800845c <HAL_RTC_Init+0x30>
    assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 80084d0:	f44f 7181 	mov.w	r1, #258	; 0x102
 80084d4:	4828      	ldr	r0, [pc, #160]	; (8008578 <HAL_RTC_Init+0x14c>)
 80084d6:	f7fa f941 	bl	800275c <assert_failed>
 80084da:	e7ca      	b.n	8008472 <HAL_RTC_Init+0x46>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
 80084dc:	f240 1103 	movw	r1, #259	; 0x103
 80084e0:	4825      	ldr	r0, [pc, #148]	; (8008578 <HAL_RTC_Init+0x14c>)
 80084e2:	f7fa f93b 	bl	800275c <assert_failed>
 80084e6:	e7c8      	b.n	800847a <HAL_RTC_Init+0x4e>
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 80084e8:	f44f 7182 	mov.w	r1, #260	; 0x104
 80084ec:	4822      	ldr	r0, [pc, #136]	; (8008578 <HAL_RTC_Init+0x14c>)
 80084ee:	f7fa f935 	bl	800275c <assert_failed>
 80084f2:	e7c7      	b.n	8008484 <HAL_RTC_Init+0x58>
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 80084f4:	f240 1105 	movw	r1, #261	; 0x105
 80084f8:	481f      	ldr	r0, [pc, #124]	; (8008578 <HAL_RTC_Init+0x14c>)
 80084fa:	f7fa f92f 	bl	800275c <assert_failed>
 80084fe:	e7c4      	b.n	800848a <HAL_RTC_Init+0x5e>
      hrtc->Lock = HAL_UNLOCKED;
 8008500:	f884 3020 	strb.w	r3, [r4, #32]
      HAL_RTC_MspInit(hrtc);
 8008504:	4620      	mov	r0, r4
 8008506:	f7fb f875 	bl	80035f4 <HAL_RTC_MspInit>
 800850a:	e7c2      	b.n	8008492 <HAL_RTC_Init+0x66>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800850c:	6822      	ldr	r2, [r4, #0]
 800850e:	6893      	ldr	r3, [r2, #8]
 8008510:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008518:	6093      	str	r3, [r2, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800851a:	6821      	ldr	r1, [r4, #0]
 800851c:	688a      	ldr	r2, [r1, #8]
 800851e:	6863      	ldr	r3, [r4, #4]
 8008520:	6920      	ldr	r0, [r4, #16]
 8008522:	4303      	orrs	r3, r0
 8008524:	69a0      	ldr	r0, [r4, #24]
 8008526:	4303      	orrs	r3, r0
 8008528:	4313      	orrs	r3, r2
 800852a:	608b      	str	r3, [r1, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800852c:	6823      	ldr	r3, [r4, #0]
 800852e:	68e2      	ldr	r2, [r4, #12]
 8008530:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008532:	6822      	ldr	r2, [r4, #0]
 8008534:	6913      	ldr	r3, [r2, #16]
 8008536:	68a1      	ldr	r1, [r4, #8]
 8008538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800853c:	6113      	str	r3, [r2, #16]
      status = RTC_ExitInitMode(hrtc);
 800853e:	4620      	mov	r0, r4
 8008540:	f7ff ff4e 	bl	80083e0 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8008544:	2800      	cmp	r0, #0
 8008546:	d1b1      	bne.n	80084ac <HAL_RTC_Init+0x80>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008548:	6822      	ldr	r2, [r4, #0]
 800854a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800854c:	f023 0303 	bic.w	r3, r3, #3
 8008550:	64d3      	str	r3, [r2, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008552:	6821      	ldr	r1, [r4, #0]
 8008554:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8008556:	69e2      	ldr	r2, [r4, #28]
 8008558:	6965      	ldr	r5, [r4, #20]
 800855a:	432a      	orrs	r2, r5
 800855c:	4313      	orrs	r3, r2
 800855e:	64cb      	str	r3, [r1, #76]	; 0x4c
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008560:	6823      	ldr	r3, [r4, #0]
 8008562:	22ff      	movs	r2, #255	; 0xff
 8008564:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_READY;
 8008566:	2301      	movs	r3, #1
 8008568:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 800856c:	e79e      	b.n	80084ac <HAL_RTC_Init+0x80>
  HAL_StatusTypeDef status = HAL_ERROR;
 800856e:	2001      	movs	r0, #1
}
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	40002800 	.word	0x40002800
 8008578:	0800bb14 	.word	0x0800bb14

0800857c <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800857c:	2300      	movs	r3, #0
  uint8_t temp = Value;

  while (temp >= 10U)
 800857e:	2809      	cmp	r0, #9
 8008580:	d903      	bls.n	800858a <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
 8008582:	3301      	adds	r3, #1
    temp -= 10U;
 8008584:	380a      	subs	r0, #10
 8008586:	b2c0      	uxtb	r0, r0
 8008588:	e7f9      	b.n	800857e <RTC_ByteToBcd2+0x2>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800858a:	011b      	lsls	r3, r3, #4
 800858c:	b2db      	uxtb	r3, r3
}
 800858e:	4318      	orrs	r0, r3
 8008590:	4770      	bx	lr

08008592 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8008592:	0903      	lsrs	r3, r0, #4
 8008594:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & 0x0FU));
 8008598:	f000 000f 	and.w	r0, r0, #15
 800859c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 80085a0:	b2c0      	uxtb	r0, r0
 80085a2:	4770      	bx	lr

080085a4 <HAL_RTC_SetTime>:
{
 80085a4:	b570      	push	{r4, r5, r6, lr}
 80085a6:	4604      	mov	r4, r0
 80085a8:	460d      	mov	r5, r1
 80085aa:	4616      	mov	r6, r2
  assert_param(IS_RTC_FORMAT(Format));
 80085ac:	2a01      	cmp	r2, #1
 80085ae:	d838      	bhi.n	8008622 <HAL_RTC_SetTime+0x7e>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 80085b0:	68eb      	ldr	r3, [r5, #12]
 80085b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085b6:	d004      	beq.n	80085c2 <HAL_RTC_SetTime+0x1e>
 80085b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085bc:	d001      	beq.n	80085c2 <HAL_RTC_SetTime+0x1e>
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d135      	bne.n	800862e <HAL_RTC_SetTime+0x8a>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 80085c2:	692b      	ldr	r3, [r5, #16]
 80085c4:	b113      	cbz	r3, 80085cc <HAL_RTC_SetTime+0x28>
 80085c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80085ca:	d136      	bne.n	800863a <HAL_RTC_SetTime+0x96>
  __HAL_LOCK(hrtc);
 80085cc:	f894 3020 	ldrb.w	r3, [r4, #32]
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	f000 80d2 	beq.w	800877a <HAL_RTC_SetTime+0x1d6>
 80085d6:	2301      	movs	r3, #1
 80085d8:	f884 3020 	strb.w	r3, [r4, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80085dc:	2302      	movs	r3, #2
 80085de:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	22ca      	movs	r2, #202	; 0xca
 80085e6:	625a      	str	r2, [r3, #36]	; 0x24
 80085e8:	6823      	ldr	r3, [r4, #0]
 80085ea:	2253      	movs	r2, #83	; 0x53
 80085ec:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 80085ee:	4620      	mov	r0, r4
 80085f0:	f7ff fed3 	bl	800839a <RTC_EnterInitMode>
  if (status == HAL_OK)
 80085f4:	2800      	cmp	r0, #0
 80085f6:	d15c      	bne.n	80086b2 <HAL_RTC_SetTime+0x10e>
    if (Format == RTC_FORMAT_BIN)
 80085f8:	2e00      	cmp	r6, #0
 80085fa:	d177      	bne.n	80086ec <HAL_RTC_SetTime+0x148>
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80085fc:	6823      	ldr	r3, [r4, #0]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008604:	d025      	beq.n	8008652 <HAL_RTC_SetTime+0xae>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
 8008606:	782b      	ldrb	r3, [r5, #0]
 8008608:	3b01      	subs	r3, #1
 800860a:	b2db      	uxtb	r3, r3
 800860c:	2b0b      	cmp	r3, #11
 800860e:	d81a      	bhi.n	8008646 <HAL_RTC_SetTime+0xa2>
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8008610:	78eb      	ldrb	r3, [r5, #3]
 8008612:	2b01      	cmp	r3, #1
 8008614:	d922      	bls.n	800865c <HAL_RTC_SetTime+0xb8>
 8008616:	f240 51bd 	movw	r1, #1469	; 0x5bd
 800861a:	4859      	ldr	r0, [pc, #356]	; (8008780 <HAL_RTC_SetTime+0x1dc>)
 800861c:	f7fa f89e 	bl	800275c <assert_failed>
 8008620:	e01c      	b.n	800865c <HAL_RTC_SetTime+0xb8>
  assert_param(IS_RTC_FORMAT(Format));
 8008622:	f44f 61b5 	mov.w	r1, #1448	; 0x5a8
 8008626:	4856      	ldr	r0, [pc, #344]	; (8008780 <HAL_RTC_SetTime+0x1dc>)
 8008628:	f7fa f898 	bl	800275c <assert_failed>
 800862c:	e7c0      	b.n	80085b0 <HAL_RTC_SetTime+0xc>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 800862e:	f240 51a9 	movw	r1, #1449	; 0x5a9
 8008632:	4853      	ldr	r0, [pc, #332]	; (8008780 <HAL_RTC_SetTime+0x1dc>)
 8008634:	f7fa f892 	bl	800275c <assert_failed>
 8008638:	e7c3      	b.n	80085c2 <HAL_RTC_SetTime+0x1e>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 800863a:	f240 51aa 	movw	r1, #1450	; 0x5aa
 800863e:	4850      	ldr	r0, [pc, #320]	; (8008780 <HAL_RTC_SetTime+0x1dc>)
 8008640:	f7fa f88c 	bl	800275c <assert_failed>
 8008644:	e7c2      	b.n	80085cc <HAL_RTC_SetTime+0x28>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
 8008646:	f240 51bc 	movw	r1, #1468	; 0x5bc
 800864a:	484d      	ldr	r0, [pc, #308]	; (8008780 <HAL_RTC_SetTime+0x1dc>)
 800864c:	f7fa f886 	bl	800275c <assert_failed>
 8008650:	e7de      	b.n	8008610 <HAL_RTC_SetTime+0x6c>
        sTime->TimeFormat = 0x00U;
 8008652:	2300      	movs	r3, #0
 8008654:	70eb      	strb	r3, [r5, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
 8008656:	782b      	ldrb	r3, [r5, #0]
 8008658:	2b17      	cmp	r3, #23
 800865a:	d835      	bhi.n	80086c8 <HAL_RTC_SetTime+0x124>
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
 800865c:	786b      	ldrb	r3, [r5, #1]
 800865e:	2b3b      	cmp	r3, #59	; 0x3b
 8008660:	d838      	bhi.n	80086d4 <HAL_RTC_SetTime+0x130>
      assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8008662:	78ab      	ldrb	r3, [r5, #2]
 8008664:	2b3b      	cmp	r3, #59	; 0x3b
 8008666:	d83b      	bhi.n	80086e0 <HAL_RTC_SetTime+0x13c>
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008668:	7828      	ldrb	r0, [r5, #0]
 800866a:	f7ff ff87 	bl	800857c <RTC_ByteToBcd2>
 800866e:	0406      	lsls	r6, r0, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008670:	7868      	ldrb	r0, [r5, #1]
 8008672:	f7ff ff83 	bl	800857c <RTC_ByteToBcd2>
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008676:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800867a:	78a8      	ldrb	r0, [r5, #2]
 800867c:	f7ff ff7e 	bl	800857c <RTC_ByteToBcd2>
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008680:	4330      	orrs	r0, r6
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008682:	78eb      	ldrb	r3, [r5, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008684:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008688:	6823      	ldr	r3, [r4, #0]
 800868a:	f000 307f 	and.w	r0, r0, #2139062143	; 0x7f7f7f7f
 800868e:	f020 40fe 	bic.w	r0, r0, #2130706432	; 0x7f000000
 8008692:	6018      	str	r0, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008694:	6822      	ldr	r2, [r4, #0]
 8008696:	6893      	ldr	r3, [r2, #8]
 8008698:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800869c:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800869e:	6821      	ldr	r1, [r4, #0]
 80086a0:	688b      	ldr	r3, [r1, #8]
 80086a2:	68ea      	ldr	r2, [r5, #12]
 80086a4:	6928      	ldr	r0, [r5, #16]
 80086a6:	4302      	orrs	r2, r0
 80086a8:	4313      	orrs	r3, r2
 80086aa:	608b      	str	r3, [r1, #8]
    status = RTC_ExitInitMode(hrtc);
 80086ac:	4620      	mov	r0, r4
 80086ae:	f7ff fe97 	bl	80083e0 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086b2:	6823      	ldr	r3, [r4, #0]
 80086b4:	22ff      	movs	r2, #255	; 0xff
 80086b6:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 80086b8:	b910      	cbnz	r0, 80086c0 <HAL_RTC_SetTime+0x11c>
    hrtc->State = HAL_RTC_STATE_READY;
 80086ba:	2301      	movs	r3, #1
 80086bc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 80086c0:	2300      	movs	r3, #0
 80086c2:	f884 3020 	strb.w	r3, [r4, #32]
}
 80086c6:	bd70      	pop	{r4, r5, r6, pc}
        assert_param(IS_RTC_HOUR24(sTime->Hours));
 80086c8:	f240 51c2 	movw	r1, #1474	; 0x5c2
 80086cc:	482c      	ldr	r0, [pc, #176]	; (8008780 <HAL_RTC_SetTime+0x1dc>)
 80086ce:	f7fa f845 	bl	800275c <assert_failed>
 80086d2:	e7c3      	b.n	800865c <HAL_RTC_SetTime+0xb8>
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80086d4:	f240 51c4 	movw	r1, #1476	; 0x5c4
 80086d8:	4829      	ldr	r0, [pc, #164]	; (8008780 <HAL_RTC_SetTime+0x1dc>)
 80086da:	f7fa f83f 	bl	800275c <assert_failed>
 80086de:	e7c0      	b.n	8008662 <HAL_RTC_SetTime+0xbe>
      assert_param(IS_RTC_SECONDS(sTime->Seconds));
 80086e0:	f240 51c5 	movw	r1, #1477	; 0x5c5
 80086e4:	4826      	ldr	r0, [pc, #152]	; (8008780 <HAL_RTC_SetTime+0x1dc>)
 80086e6:	f7fa f839 	bl	800275c <assert_failed>
 80086ea:	e7bd      	b.n	8008668 <HAL_RTC_SetTime+0xc4>
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80086ec:	6823      	ldr	r3, [r4, #0]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80086f4:	d013      	beq.n	800871e <HAL_RTC_SetTime+0x17a>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 80086f6:	7828      	ldrb	r0, [r5, #0]
 80086f8:	f7ff ff4b 	bl	8008592 <RTC_Bcd2ToByte>
 80086fc:	b108      	cbz	r0, 8008702 <HAL_RTC_SetTime+0x15e>
 80086fe:	280c      	cmp	r0, #12
 8008700:	d904      	bls.n	800870c <HAL_RTC_SetTime+0x168>
 8008702:	f44f 61ba 	mov.w	r1, #1488	; 0x5d0
 8008706:	481e      	ldr	r0, [pc, #120]	; (8008780 <HAL_RTC_SetTime+0x1dc>)
 8008708:	f7fa f828 	bl	800275c <assert_failed>
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 800870c:	78eb      	ldrb	r3, [r5, #3]
 800870e:	2b01      	cmp	r3, #1
 8008710:	d90c      	bls.n	800872c <HAL_RTC_SetTime+0x188>
 8008712:	f240 51d1 	movw	r1, #1489	; 0x5d1
 8008716:	481a      	ldr	r0, [pc, #104]	; (8008780 <HAL_RTC_SetTime+0x1dc>)
 8008718:	f7fa f820 	bl	800275c <assert_failed>
 800871c:	e006      	b.n	800872c <HAL_RTC_SetTime+0x188>
        sTime->TimeFormat = 0x00U;
 800871e:	2300      	movs	r3, #0
 8008720:	70eb      	strb	r3, [r5, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8008722:	7828      	ldrb	r0, [r5, #0]
 8008724:	f7ff ff35 	bl	8008592 <RTC_Bcd2ToByte>
 8008728:	2817      	cmp	r0, #23
 800872a:	d814      	bhi.n	8008756 <HAL_RTC_SetTime+0x1b2>
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 800872c:	7868      	ldrb	r0, [r5, #1]
 800872e:	f7ff ff30 	bl	8008592 <RTC_Bcd2ToByte>
 8008732:	283b      	cmp	r0, #59	; 0x3b
 8008734:	d815      	bhi.n	8008762 <HAL_RTC_SetTime+0x1be>
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8008736:	78a8      	ldrb	r0, [r5, #2]
 8008738:	f7ff ff2b 	bl	8008592 <RTC_Bcd2ToByte>
 800873c:	283b      	cmp	r0, #59	; 0x3b
 800873e:	d816      	bhi.n	800876e <HAL_RTC_SetTime+0x1ca>
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008740:	782b      	ldrb	r3, [r5, #0]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008742:	7868      	ldrb	r0, [r5, #1]
 8008744:	0200      	lsls	r0, r0, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008746:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800874a:	78ab      	ldrb	r3, [r5, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800874c:	4318      	orrs	r0, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800874e:	78eb      	ldrb	r3, [r5, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008750:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 8008754:	e798      	b.n	8008688 <HAL_RTC_SetTime+0xe4>
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8008756:	f240 51d6 	movw	r1, #1494	; 0x5d6
 800875a:	4809      	ldr	r0, [pc, #36]	; (8008780 <HAL_RTC_SetTime+0x1dc>)
 800875c:	f7f9 fffe 	bl	800275c <assert_failed>
 8008760:	e7e4      	b.n	800872c <HAL_RTC_SetTime+0x188>
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8008762:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
 8008766:	4806      	ldr	r0, [pc, #24]	; (8008780 <HAL_RTC_SetTime+0x1dc>)
 8008768:	f7f9 fff8 	bl	800275c <assert_failed>
 800876c:	e7e3      	b.n	8008736 <HAL_RTC_SetTime+0x192>
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 800876e:	f240 51d9 	movw	r1, #1497	; 0x5d9
 8008772:	4803      	ldr	r0, [pc, #12]	; (8008780 <HAL_RTC_SetTime+0x1dc>)
 8008774:	f7f9 fff2 	bl	800275c <assert_failed>
 8008778:	e7e2      	b.n	8008740 <HAL_RTC_SetTime+0x19c>
  __HAL_LOCK(hrtc);
 800877a:	2002      	movs	r0, #2
 800877c:	e7a3      	b.n	80086c6 <HAL_RTC_SetTime+0x122>
 800877e:	bf00      	nop
 8008780:	0800bb14 	.word	0x0800bb14

08008784 <HAL_RTC_GetTime>:
{
 8008784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008786:	4605      	mov	r5, r0
 8008788:	460c      	mov	r4, r1
 800878a:	4616      	mov	r6, r2
  assert_param(IS_RTC_FORMAT(Format));
 800878c:	2a01      	cmp	r2, #1
 800878e:	d823      	bhi.n	80087d8 <HAL_RTC_GetTime+0x54>
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008790:	682b      	ldr	r3, [r5, #0]
 8008792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008794:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008796:	682b      	ldr	r3, [r5, #0]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800879e:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80087a0:	682b      	ldr	r3, [r5, #0]
 80087a2:	681b      	ldr	r3, [r3, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80087a4:	f3c3 4005 	ubfx	r0, r3, #16, #6
 80087a8:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80087aa:	f3c3 2706 	ubfx	r7, r3, #8, #7
 80087ae:	7067      	strb	r7, [r4, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80087b0:	f003 057f 	and.w	r5, r3, #127	; 0x7f
 80087b4:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80087b6:	f3c3 5380 	ubfx	r3, r3, #22, #1
 80087ba:	70e3      	strb	r3, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 80087bc:	b956      	cbnz	r6, 80087d4 <HAL_RTC_GetTime+0x50>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80087be:	f7ff fee8 	bl	8008592 <RTC_Bcd2ToByte>
 80087c2:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80087c4:	4638      	mov	r0, r7
 80087c6:	f7ff fee4 	bl	8008592 <RTC_Bcd2ToByte>
 80087ca:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80087cc:	4628      	mov	r0, r5
 80087ce:	f7ff fee0 	bl	8008592 <RTC_Bcd2ToByte>
 80087d2:	70a0      	strb	r0, [r4, #2]
}
 80087d4:	2000      	movs	r0, #0
 80087d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_RTC_FORMAT(Format));
 80087d8:	f240 6115 	movw	r1, #1557	; 0x615
 80087dc:	4801      	ldr	r0, [pc, #4]	; (80087e4 <HAL_RTC_GetTime+0x60>)
 80087de:	f7f9 ffbd 	bl	800275c <assert_failed>
 80087e2:	e7d5      	b.n	8008790 <HAL_RTC_GetTime+0xc>
 80087e4:	0800bb14 	.word	0x0800bb14

080087e8 <HAL_RTC_SetDate>:
{
 80087e8:	b570      	push	{r4, r5, r6, lr}
 80087ea:	4604      	mov	r4, r0
 80087ec:	460d      	mov	r5, r1
 80087ee:	4616      	mov	r6, r2
  assert_param(IS_RTC_FORMAT(Format));
 80087f0:	2a01      	cmp	r2, #1
 80087f2:	d84d      	bhi.n	8008890 <HAL_RTC_SetDate+0xa8>
  __HAL_LOCK(hrtc);
 80087f4:	f894 3020 	ldrb.w	r3, [r4, #32]
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	f000 809d 	beq.w	8008938 <HAL_RTC_SetDate+0x150>
 80087fe:	2301      	movs	r3, #1
 8008800:	f884 3020 	strb.w	r3, [r4, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008804:	2302      	movs	r3, #2
 8008806:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800880a:	b93e      	cbnz	r6, 800881c <HAL_RTC_SetDate+0x34>
 800880c:	786b      	ldrb	r3, [r5, #1]
 800880e:	f013 0f10 	tst.w	r3, #16
 8008812:	d003      	beq.n	800881c <HAL_RTC_SetDate+0x34>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008814:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8008818:	330a      	adds	r3, #10
 800881a:	706b      	strb	r3, [r5, #1]
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 800881c:	782b      	ldrb	r3, [r5, #0]
 800881e:	3b01      	subs	r3, #1
 8008820:	b2db      	uxtb	r3, r3
 8008822:	2b06      	cmp	r3, #6
 8008824:	d83a      	bhi.n	800889c <HAL_RTC_SetDate+0xb4>
  if (Format == RTC_FORMAT_BIN)
 8008826:	2e00      	cmp	r6, #0
 8008828:	d150      	bne.n	80088cc <HAL_RTC_SetDate+0xe4>
    assert_param(IS_RTC_YEAR(sDate->Year));
 800882a:	78eb      	ldrb	r3, [r5, #3]
 800882c:	2b63      	cmp	r3, #99	; 0x63
 800882e:	d83b      	bhi.n	80088a8 <HAL_RTC_SetDate+0xc0>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8008830:	786b      	ldrb	r3, [r5, #1]
 8008832:	3b01      	subs	r3, #1
 8008834:	b2db      	uxtb	r3, r3
 8008836:	2b0b      	cmp	r3, #11
 8008838:	d83c      	bhi.n	80088b4 <HAL_RTC_SetDate+0xcc>
    assert_param(IS_RTC_DATE(sDate->Date));
 800883a:	78ab      	ldrb	r3, [r5, #2]
 800883c:	3b01      	subs	r3, #1
 800883e:	b2db      	uxtb	r3, r3
 8008840:	2b1e      	cmp	r3, #30
 8008842:	d83d      	bhi.n	80088c0 <HAL_RTC_SetDate+0xd8>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008844:	78e8      	ldrb	r0, [r5, #3]
 8008846:	f7ff fe99 	bl	800857c <RTC_ByteToBcd2>
 800884a:	0406      	lsls	r6, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800884c:	7868      	ldrb	r0, [r5, #1]
 800884e:	f7ff fe95 	bl	800857c <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008852:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8008856:	78a8      	ldrb	r0, [r5, #2]
 8008858:	f7ff fe90 	bl	800857c <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800885c:	4306      	orrs	r6, r0
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800885e:	782d      	ldrb	r5, [r5, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008860:	ea46 3545 	orr.w	r5, r6, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008864:	6823      	ldr	r3, [r4, #0]
 8008866:	22ca      	movs	r2, #202	; 0xca
 8008868:	625a      	str	r2, [r3, #36]	; 0x24
 800886a:	6823      	ldr	r3, [r4, #0]
 800886c:	2253      	movs	r2, #83	; 0x53
 800886e:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8008870:	4620      	mov	r0, r4
 8008872:	f7ff fd92 	bl	800839a <RTC_EnterInitMode>
  if (status == HAL_OK)
 8008876:	2800      	cmp	r0, #0
 8008878:	d054      	beq.n	8008924 <HAL_RTC_SetDate+0x13c>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800887a:	6823      	ldr	r3, [r4, #0]
 800887c:	22ff      	movs	r2, #255	; 0xff
 800887e:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 8008880:	b910      	cbnz	r0, 8008888 <HAL_RTC_SetDate+0xa0>
    hrtc->State = HAL_RTC_STATE_READY ;
 8008882:	2301      	movs	r3, #1
 8008884:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 8008888:	2300      	movs	r3, #0
 800888a:	f884 3020 	strb.w	r3, [r4, #32]
}
 800888e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_RTC_FORMAT(Format));
 8008890:	f240 6142 	movw	r1, #1602	; 0x642
 8008894:	4829      	ldr	r0, [pc, #164]	; (800893c <HAL_RTC_SetDate+0x154>)
 8008896:	f7f9 ff61 	bl	800275c <assert_failed>
 800889a:	e7ab      	b.n	80087f4 <HAL_RTC_SetDate+0xc>
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 800889c:	f240 614e 	movw	r1, #1614	; 0x64e
 80088a0:	4826      	ldr	r0, [pc, #152]	; (800893c <HAL_RTC_SetDate+0x154>)
 80088a2:	f7f9 ff5b 	bl	800275c <assert_failed>
 80088a6:	e7be      	b.n	8008826 <HAL_RTC_SetDate+0x3e>
    assert_param(IS_RTC_YEAR(sDate->Year));
 80088a8:	f240 6152 	movw	r1, #1618	; 0x652
 80088ac:	4823      	ldr	r0, [pc, #140]	; (800893c <HAL_RTC_SetDate+0x154>)
 80088ae:	f7f9 ff55 	bl	800275c <assert_failed>
 80088b2:	e7bd      	b.n	8008830 <HAL_RTC_SetDate+0x48>
    assert_param(IS_RTC_MONTH(sDate->Month));
 80088b4:	f240 6153 	movw	r1, #1619	; 0x653
 80088b8:	4820      	ldr	r0, [pc, #128]	; (800893c <HAL_RTC_SetDate+0x154>)
 80088ba:	f7f9 ff4f 	bl	800275c <assert_failed>
 80088be:	e7bc      	b.n	800883a <HAL_RTC_SetDate+0x52>
    assert_param(IS_RTC_DATE(sDate->Date));
 80088c0:	f240 6154 	movw	r1, #1620	; 0x654
 80088c4:	481d      	ldr	r0, [pc, #116]	; (800893c <HAL_RTC_SetDate+0x154>)
 80088c6:	f7f9 ff49 	bl	800275c <assert_failed>
 80088ca:	e7bb      	b.n	8008844 <HAL_RTC_SetDate+0x5c>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 80088cc:	78e8      	ldrb	r0, [r5, #3]
 80088ce:	f7ff fe60 	bl	8008592 <RTC_Bcd2ToByte>
 80088d2:	2863      	cmp	r0, #99	; 0x63
 80088d4:	d820      	bhi.n	8008918 <HAL_RTC_SetDate+0x130>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 80088d6:	7868      	ldrb	r0, [r5, #1]
 80088d8:	f7ff fe5b 	bl	8008592 <RTC_Bcd2ToByte>
 80088dc:	b108      	cbz	r0, 80088e2 <HAL_RTC_SetDate+0xfa>
 80088de:	280c      	cmp	r0, #12
 80088e0:	d904      	bls.n	80088ec <HAL_RTC_SetDate+0x104>
 80088e2:	f240 615e 	movw	r1, #1630	; 0x65e
 80088e6:	4815      	ldr	r0, [pc, #84]	; (800893c <HAL_RTC_SetDate+0x154>)
 80088e8:	f7f9 ff38 	bl	800275c <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 80088ec:	78a8      	ldrb	r0, [r5, #2]
 80088ee:	f7ff fe50 	bl	8008592 <RTC_Bcd2ToByte>
 80088f2:	b108      	cbz	r0, 80088f8 <HAL_RTC_SetDate+0x110>
 80088f4:	281f      	cmp	r0, #31
 80088f6:	d904      	bls.n	8008902 <HAL_RTC_SetDate+0x11a>
 80088f8:	f240 615f 	movw	r1, #1631	; 0x65f
 80088fc:	480f      	ldr	r0, [pc, #60]	; (800893c <HAL_RTC_SetDate+0x154>)
 80088fe:	f7f9 ff2d 	bl	800275c <assert_failed>
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008902:	78eb      	ldrb	r3, [r5, #3]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008904:	7868      	ldrb	r0, [r5, #1]
 8008906:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008908:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800890c:	78ab      	ldrb	r3, [r5, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800890e:	4318      	orrs	r0, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008910:	782d      	ldrb	r5, [r5, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008912:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 8008916:	e7a5      	b.n	8008864 <HAL_RTC_SetDate+0x7c>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8008918:	f240 615d 	movw	r1, #1629	; 0x65d
 800891c:	4807      	ldr	r0, [pc, #28]	; (800893c <HAL_RTC_SetDate+0x154>)
 800891e:	f7f9 ff1d 	bl	800275c <assert_failed>
 8008922:	e7d8      	b.n	80088d6 <HAL_RTC_SetDate+0xee>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008924:	6823      	ldr	r3, [r4, #0]
 8008926:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 800892a:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 800892e:	605d      	str	r5, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 8008930:	4620      	mov	r0, r4
 8008932:	f7ff fd55 	bl	80083e0 <RTC_ExitInitMode>
 8008936:	e7a0      	b.n	800887a <HAL_RTC_SetDate+0x92>
  __HAL_LOCK(hrtc);
 8008938:	2002      	movs	r0, #2
 800893a:	e7a8      	b.n	800888e <HAL_RTC_SetDate+0xa6>
 800893c:	0800bb14 	.word	0x0800bb14

08008940 <HAL_RTC_GetDate>:
{
 8008940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008942:	4606      	mov	r6, r0
 8008944:	460c      	mov	r4, r1
 8008946:	4615      	mov	r5, r2
  assert_param(IS_RTC_FORMAT(Format));
 8008948:	2a01      	cmp	r2, #1
 800894a:	d81b      	bhi.n	8008984 <HAL_RTC_GetDate+0x44>
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800894c:	6833      	ldr	r3, [r6, #0]
 800894e:	685b      	ldr	r3, [r3, #4]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008950:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8008954:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008956:	f3c3 2704 	ubfx	r7, r3, #8, #5
 800895a:	7067      	strb	r7, [r4, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800895c:	f003 063f 	and.w	r6, r3, #63	; 0x3f
 8008960:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8008962:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8008966:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 8008968:	b955      	cbnz	r5, 8008980 <HAL_RTC_GetDate+0x40>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800896a:	f7ff fe12 	bl	8008592 <RTC_Bcd2ToByte>
 800896e:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008970:	4638      	mov	r0, r7
 8008972:	f7ff fe0e 	bl	8008592 <RTC_Bcd2ToByte>
 8008976:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008978:	4630      	mov	r0, r6
 800897a:	f7ff fe0a 	bl	8008592 <RTC_Bcd2ToByte>
 800897e:	70a0      	strb	r0, [r4, #2]
}
 8008980:	2000      	movs	r0, #0
 8008982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_RTC_FORMAT(Format));
 8008984:	f240 6195 	movw	r1, #1685	; 0x695
 8008988:	4801      	ldr	r0, [pc, #4]	; (8008990 <HAL_RTC_GetDate+0x50>)
 800898a:	f7f9 fee7 	bl	800275c <assert_failed>
 800898e:	e7dd      	b.n	800894c <HAL_RTC_GetDate+0xc>
 8008990:	0800bb14 	.word	0x0800bb14

08008994 <HAL_RTC_SetAlarm_IT>:
{
 8008994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008996:	4604      	mov	r4, r0
 8008998:	460d      	mov	r5, r1
 800899a:	4616      	mov	r6, r2
  assert_param(IS_RTC_FORMAT(Format));
 800899c:	2a01      	cmp	r2, #1
 800899e:	d83b      	bhi.n	8008a18 <HAL_RTC_SetAlarm_IT+0x84>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 80089a0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80089a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089a6:	d002      	beq.n	80089ae <HAL_RTC_SetAlarm_IT+0x1a>
 80089a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089ac:	d13a      	bne.n	8008a24 <HAL_RTC_SetAlarm_IT+0x90>
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 80089ae:	696b      	ldr	r3, [r5, #20]
 80089b0:	f013 3f7f 	tst.w	r3, #2139062143	; 0x7f7f7f7f
 80089b4:	d13c      	bne.n	8008a30 <HAL_RTC_SetAlarm_IT+0x9c>
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 80089b6:	6a2b      	ldr	r3, [r5, #32]
 80089b8:	b113      	cbz	r3, 80089c0 <HAL_RTC_SetAlarm_IT+0x2c>
 80089ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089be:	d13d      	bne.n	8008a3c <HAL_RTC_SetAlarm_IT+0xa8>
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 80089c0:	686b      	ldr	r3, [r5, #4]
 80089c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089c6:	d23f      	bcs.n	8008a48 <HAL_RTC_SetAlarm_IT+0xb4>
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 80089c8:	69eb      	ldr	r3, [r5, #28]
 80089ca:	b123      	cbz	r3, 80089d6 <HAL_RTC_SetAlarm_IT+0x42>
 80089cc:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 80089d0:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80089d4:	d83e      	bhi.n	8008a54 <HAL_RTC_SetAlarm_IT+0xc0>
  __HAL_LOCK(hrtc);
 80089d6:	f894 3020 	ldrb.w	r3, [r4, #32]
 80089da:	2b01      	cmp	r3, #1
 80089dc:	f000 8192 	beq.w	8008d04 <HAL_RTC_SetAlarm_IT+0x370>
 80089e0:	2301      	movs	r3, #1
 80089e2:	f884 3020 	strb.w	r3, [r4, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80089e6:	2302      	movs	r3, #2
 80089e8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  if (Format == RTC_FORMAT_BIN)
 80089ec:	2e00      	cmp	r6, #0
 80089ee:	f040 8090 	bne.w	8008b12 <HAL_RTC_SetAlarm_IT+0x17e>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80089f2:	6823      	ldr	r3, [r4, #0]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80089fa:	d037      	beq.n	8008a6c <HAL_RTC_SetAlarm_IT+0xd8>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 80089fc:	782b      	ldrb	r3, [r5, #0]
 80089fe:	3b01      	subs	r3, #1
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	2b0b      	cmp	r3, #11
 8008a04:	d82c      	bhi.n	8008a60 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8008a06:	78eb      	ldrb	r3, [r5, #3]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d934      	bls.n	8008a76 <HAL_RTC_SetAlarm_IT+0xe2>
 8008a0c:	f240 7197 	movw	r1, #1943	; 0x797
 8008a10:	48ab      	ldr	r0, [pc, #684]	; (8008cc0 <HAL_RTC_SetAlarm_IT+0x32c>)
 8008a12:	f7f9 fea3 	bl	800275c <assert_failed>
 8008a16:	e02e      	b.n	8008a76 <HAL_RTC_SetAlarm_IT+0xe2>
  assert_param(IS_RTC_FORMAT(Format));
 8008a18:	f240 7186 	movw	r1, #1926	; 0x786
 8008a1c:	48a8      	ldr	r0, [pc, #672]	; (8008cc0 <HAL_RTC_SetAlarm_IT+0x32c>)
 8008a1e:	f7f9 fe9d 	bl	800275c <assert_failed>
 8008a22:	e7bd      	b.n	80089a0 <HAL_RTC_SetAlarm_IT+0xc>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 8008a24:	f240 7187 	movw	r1, #1927	; 0x787
 8008a28:	48a5      	ldr	r0, [pc, #660]	; (8008cc0 <HAL_RTC_SetAlarm_IT+0x32c>)
 8008a2a:	f7f9 fe97 	bl	800275c <assert_failed>
 8008a2e:	e7be      	b.n	80089ae <HAL_RTC_SetAlarm_IT+0x1a>
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 8008a30:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 8008a34:	48a2      	ldr	r0, [pc, #648]	; (8008cc0 <HAL_RTC_SetAlarm_IT+0x32c>)
 8008a36:	f7f9 fe91 	bl	800275c <assert_failed>
 8008a3a:	e7bc      	b.n	80089b6 <HAL_RTC_SetAlarm_IT+0x22>
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 8008a3c:	f240 7189 	movw	r1, #1929	; 0x789
 8008a40:	489f      	ldr	r0, [pc, #636]	; (8008cc0 <HAL_RTC_SetAlarm_IT+0x32c>)
 8008a42:	f7f9 fe8b 	bl	800275c <assert_failed>
 8008a46:	e7bb      	b.n	80089c0 <HAL_RTC_SetAlarm_IT+0x2c>
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 8008a48:	f240 718a 	movw	r1, #1930	; 0x78a
 8008a4c:	489c      	ldr	r0, [pc, #624]	; (8008cc0 <HAL_RTC_SetAlarm_IT+0x32c>)
 8008a4e:	f7f9 fe85 	bl	800275c <assert_failed>
 8008a52:	e7b9      	b.n	80089c8 <HAL_RTC_SetAlarm_IT+0x34>
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 8008a54:	f240 718b 	movw	r1, #1931	; 0x78b
 8008a58:	4899      	ldr	r0, [pc, #612]	; (8008cc0 <HAL_RTC_SetAlarm_IT+0x32c>)
 8008a5a:	f7f9 fe7f 	bl	800275c <assert_failed>
 8008a5e:	e7ba      	b.n	80089d6 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 8008a60:	f240 7196 	movw	r1, #1942	; 0x796
 8008a64:	4896      	ldr	r0, [pc, #600]	; (8008cc0 <HAL_RTC_SetAlarm_IT+0x32c>)
 8008a66:	f7f9 fe79 	bl	800275c <assert_failed>
 8008a6a:	e7cc      	b.n	8008a06 <HAL_RTC_SetAlarm_IT+0x72>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	70eb      	strb	r3, [r5, #3]
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 8008a70:	782b      	ldrb	r3, [r5, #0]
 8008a72:	2b17      	cmp	r3, #23
 8008a74:	d829      	bhi.n	8008aca <HAL_RTC_SetAlarm_IT+0x136>
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 8008a76:	786b      	ldrb	r3, [r5, #1]
 8008a78:	2b3b      	cmp	r3, #59	; 0x3b
 8008a7a:	d82c      	bhi.n	8008ad6 <HAL_RTC_SetAlarm_IT+0x142>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 8008a7c:	78ab      	ldrb	r3, [r5, #2]
 8008a7e:	2b3b      	cmp	r3, #59	; 0x3b
 8008a80:	d82f      	bhi.n	8008ae2 <HAL_RTC_SetAlarm_IT+0x14e>
    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8008a82:	6a2b      	ldr	r3, [r5, #32]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d138      	bne.n	8008afa <HAL_RTC_SetAlarm_IT+0x166>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 8008a88:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	2b1e      	cmp	r3, #30
 8008a92:	d82c      	bhi.n	8008aee <HAL_RTC_SetAlarm_IT+0x15a>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008a94:	7828      	ldrb	r0, [r5, #0]
 8008a96:	f7ff fd71 	bl	800857c <RTC_ByteToBcd2>
 8008a9a:	0406      	lsls	r6, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008a9c:	7868      	ldrb	r0, [r5, #1]
 8008a9e:	f7ff fd6d 	bl	800857c <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008aa2:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008aa6:	78a8      	ldrb	r0, [r5, #2]
 8008aa8:	f7ff fd68 	bl	800857c <RTC_ByteToBcd2>
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008aac:	4306      	orrs	r6, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008aae:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008ab0:	ea46 5680 	orr.w	r6, r6, r0, lsl #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008ab4:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
 8008ab8:	f7ff fd60 	bl	800857c <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008abc:	ea46 6600 	orr.w	r6, r6, r0, lsl #24
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008ac0:	6a28      	ldr	r0, [r5, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008ac2:	4306      	orrs	r6, r0
              ((uint32_t)sAlarm->AlarmMask));
 8008ac4:	696b      	ldr	r3, [r5, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008ac6:	431e      	orrs	r6, r3
 8008ac8:	e06e      	b.n	8008ba8 <HAL_RTC_SetAlarm_IT+0x214>
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 8008aca:	f240 719c 	movw	r1, #1948	; 0x79c
 8008ace:	487c      	ldr	r0, [pc, #496]	; (8008cc0 <HAL_RTC_SetAlarm_IT+0x32c>)
 8008ad0:	f7f9 fe44 	bl	800275c <assert_failed>
 8008ad4:	e7cf      	b.n	8008a76 <HAL_RTC_SetAlarm_IT+0xe2>
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 8008ad6:	f240 719e 	movw	r1, #1950	; 0x79e
 8008ada:	4879      	ldr	r0, [pc, #484]	; (8008cc0 <HAL_RTC_SetAlarm_IT+0x32c>)
 8008adc:	f7f9 fe3e 	bl	800275c <assert_failed>
 8008ae0:	e7cc      	b.n	8008a7c <HAL_RTC_SetAlarm_IT+0xe8>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 8008ae2:	f240 719f 	movw	r1, #1951	; 0x79f
 8008ae6:	4876      	ldr	r0, [pc, #472]	; (8008cc0 <HAL_RTC_SetAlarm_IT+0x32c>)
 8008ae8:	f7f9 fe38 	bl	800275c <assert_failed>
 8008aec:	e7c9      	b.n	8008a82 <HAL_RTC_SetAlarm_IT+0xee>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 8008aee:	f240 71a3 	movw	r1, #1955	; 0x7a3
 8008af2:	4873      	ldr	r0, [pc, #460]	; (8008cc0 <HAL_RTC_SetAlarm_IT+0x32c>)
 8008af4:	f7f9 fe32 	bl	800275c <assert_failed>
 8008af8:	e7cc      	b.n	8008a94 <HAL_RTC_SetAlarm_IT+0x100>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 8008afa:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8008afe:	3b01      	subs	r3, #1
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	2b06      	cmp	r3, #6
 8008b04:	d9c6      	bls.n	8008a94 <HAL_RTC_SetAlarm_IT+0x100>
 8008b06:	f240 71a7 	movw	r1, #1959	; 0x7a7
 8008b0a:	486d      	ldr	r0, [pc, #436]	; (8008cc0 <HAL_RTC_SetAlarm_IT+0x32c>)
 8008b0c:	f7f9 fe26 	bl	800275c <assert_failed>
 8008b10:	e7c0      	b.n	8008a94 <HAL_RTC_SetAlarm_IT+0x100>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008b12:	6823      	ldr	r3, [r4, #0]
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008b1a:	d013      	beq.n	8008b44 <HAL_RTC_SetAlarm_IT+0x1b0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8008b1c:	7828      	ldrb	r0, [r5, #0]
 8008b1e:	f7ff fd38 	bl	8008592 <RTC_Bcd2ToByte>
 8008b22:	b108      	cbz	r0, 8008b28 <HAL_RTC_SetAlarm_IT+0x194>
 8008b24:	280c      	cmp	r0, #12
 8008b26:	d904      	bls.n	8008b32 <HAL_RTC_SetAlarm_IT+0x19e>
 8008b28:	f240 71b6 	movw	r1, #1974	; 0x7b6
 8008b2c:	4864      	ldr	r0, [pc, #400]	; (8008cc0 <HAL_RTC_SetAlarm_IT+0x32c>)
 8008b2e:	f7f9 fe15 	bl	800275c <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8008b32:	78eb      	ldrb	r3, [r5, #3]
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d90c      	bls.n	8008b52 <HAL_RTC_SetAlarm_IT+0x1be>
 8008b38:	f240 71b7 	movw	r1, #1975	; 0x7b7
 8008b3c:	4860      	ldr	r0, [pc, #384]	; (8008cc0 <HAL_RTC_SetAlarm_IT+0x32c>)
 8008b3e:	f7f9 fe0d 	bl	800275c <assert_failed>
 8008b42:	e006      	b.n	8008b52 <HAL_RTC_SetAlarm_IT+0x1be>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008b44:	2300      	movs	r3, #0
 8008b46:	70eb      	strb	r3, [r5, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8008b48:	7828      	ldrb	r0, [r5, #0]
 8008b4a:	f7ff fd22 	bl	8008592 <RTC_Bcd2ToByte>
 8008b4e:	2817      	cmp	r0, #23
 8008b50:	d85a      	bhi.n	8008c08 <HAL_RTC_SetAlarm_IT+0x274>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 8008b52:	7868      	ldrb	r0, [r5, #1]
 8008b54:	f7ff fd1d 	bl	8008592 <RTC_Bcd2ToByte>
 8008b58:	283b      	cmp	r0, #59	; 0x3b
 8008b5a:	d85b      	bhi.n	8008c14 <HAL_RTC_SetAlarm_IT+0x280>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8008b5c:	78a8      	ldrb	r0, [r5, #2]
 8008b5e:	f7ff fd18 	bl	8008592 <RTC_Bcd2ToByte>
 8008b62:	283b      	cmp	r0, #59	; 0x3b
 8008b64:	d85c      	bhi.n	8008c20 <HAL_RTC_SetAlarm_IT+0x28c>
    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8008b66:	6a2b      	ldr	r3, [r5, #32]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d15f      	bne.n	8008c2c <HAL_RTC_SetAlarm_IT+0x298>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8008b6c:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
 8008b70:	f7ff fd0f 	bl	8008592 <RTC_Bcd2ToByte>
 8008b74:	b108      	cbz	r0, 8008b7a <HAL_RTC_SetAlarm_IT+0x1e6>
 8008b76:	281f      	cmp	r0, #31
 8008b78:	d904      	bls.n	8008b84 <HAL_RTC_SetAlarm_IT+0x1f0>
 8008b7a:	f240 71c5 	movw	r1, #1989	; 0x7c5
 8008b7e:	4850      	ldr	r0, [pc, #320]	; (8008cc0 <HAL_RTC_SetAlarm_IT+0x32c>)
 8008b80:	f7f9 fdec 	bl	800275c <assert_failed>
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008b84:	782b      	ldrb	r3, [r5, #0]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008b86:	786e      	ldrb	r6, [r5, #1]
 8008b88:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008b8a:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008b8e:	78ab      	ldrb	r3, [r5, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008b90:	431e      	orrs	r6, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008b92:	78eb      	ldrb	r3, [r5, #3]
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008b94:	ea46 5683 	orr.w	r6, r6, r3, lsl #22
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008b98:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008b9c:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008ba0:	6a2b      	ldr	r3, [r5, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008ba2:	431e      	orrs	r6, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008ba4:	696b      	ldr	r3, [r5, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008ba6:	431e      	orrs	r6, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008ba8:	686f      	ldr	r7, [r5, #4]
 8008baa:	69eb      	ldr	r3, [r5, #28]
 8008bac:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	22ca      	movs	r2, #202	; 0xca
 8008bb2:	625a      	str	r2, [r3, #36]	; 0x24
 8008bb4:	6823      	ldr	r3, [r4, #0]
 8008bb6:	2253      	movs	r2, #83	; 0x53
 8008bb8:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008bba:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008bbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bc0:	d04c      	beq.n	8008c5c <HAL_RTC_SetAlarm_IT+0x2c8>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008bc2:	6822      	ldr	r2, [r4, #0]
 8008bc4:	6893      	ldr	r3, [r2, #8]
 8008bc6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008bca:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008bcc:	6822      	ldr	r2, [r4, #0]
 8008bce:	68d3      	ldr	r3, [r2, #12]
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	f463 7320 	orn	r3, r3, #640	; 0x280
 8008bd6:	60d3      	str	r3, [r2, #12]
    uint32_t tickstart = HAL_GetTick();
 8008bd8:	f7fb fd8e 	bl	80046f8 <HAL_GetTick>
 8008bdc:	4605      	mov	r5, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008bde:	6823      	ldr	r3, [r4, #0]
 8008be0:	68da      	ldr	r2, [r3, #12]
 8008be2:	f012 0f02 	tst.w	r2, #2
 8008be6:	d16d      	bne.n	8008cc4 <HAL_RTC_SetAlarm_IT+0x330>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008be8:	f7fb fd86 	bl	80046f8 <HAL_GetTick>
 8008bec:	1b40      	subs	r0, r0, r5
 8008bee:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008bf2:	d9f4      	bls.n	8008bde <HAL_RTC_SetAlarm_IT+0x24a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bf4:	6823      	ldr	r3, [r4, #0]
 8008bf6:	22ff      	movs	r2, #255	; 0xff
 8008bf8:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008bfa:	2003      	movs	r0, #3
 8008bfc:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8008c00:	2300      	movs	r3, #0
 8008c02:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_TIMEOUT;
 8008c06:	e07c      	b.n	8008d02 <HAL_RTC_SetAlarm_IT+0x36e>
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8008c08:	f240 71bc 	movw	r1, #1980	; 0x7bc
 8008c0c:	482c      	ldr	r0, [pc, #176]	; (8008cc0 <HAL_RTC_SetAlarm_IT+0x32c>)
 8008c0e:	f7f9 fda5 	bl	800275c <assert_failed>
 8008c12:	e79e      	b.n	8008b52 <HAL_RTC_SetAlarm_IT+0x1be>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 8008c14:	f240 71bf 	movw	r1, #1983	; 0x7bf
 8008c18:	4829      	ldr	r0, [pc, #164]	; (8008cc0 <HAL_RTC_SetAlarm_IT+0x32c>)
 8008c1a:	f7f9 fd9f 	bl	800275c <assert_failed>
 8008c1e:	e79d      	b.n	8008b5c <HAL_RTC_SetAlarm_IT+0x1c8>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8008c20:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 8008c24:	4826      	ldr	r0, [pc, #152]	; (8008cc0 <HAL_RTC_SetAlarm_IT+0x32c>)
 8008c26:	f7f9 fd99 	bl	800275c <assert_failed>
 8008c2a:	e79c      	b.n	8008b66 <HAL_RTC_SetAlarm_IT+0x1d2>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8008c2c:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
 8008c30:	f7ff fcaf 	bl	8008592 <RTC_Bcd2ToByte>
 8008c34:	2801      	cmp	r0, #1
 8008c36:	d0a5      	beq.n	8008b84 <HAL_RTC_SetAlarm_IT+0x1f0>
 8008c38:	2802      	cmp	r0, #2
 8008c3a:	d0a3      	beq.n	8008b84 <HAL_RTC_SetAlarm_IT+0x1f0>
 8008c3c:	2803      	cmp	r0, #3
 8008c3e:	d0a1      	beq.n	8008b84 <HAL_RTC_SetAlarm_IT+0x1f0>
 8008c40:	2804      	cmp	r0, #4
 8008c42:	d09f      	beq.n	8008b84 <HAL_RTC_SetAlarm_IT+0x1f0>
 8008c44:	2805      	cmp	r0, #5
 8008c46:	d09d      	beq.n	8008b84 <HAL_RTC_SetAlarm_IT+0x1f0>
 8008c48:	2806      	cmp	r0, #6
 8008c4a:	d09b      	beq.n	8008b84 <HAL_RTC_SetAlarm_IT+0x1f0>
 8008c4c:	2807      	cmp	r0, #7
 8008c4e:	d099      	beq.n	8008b84 <HAL_RTC_SetAlarm_IT+0x1f0>
 8008c50:	f240 71c9 	movw	r1, #1993	; 0x7c9
 8008c54:	481a      	ldr	r0, [pc, #104]	; (8008cc0 <HAL_RTC_SetAlarm_IT+0x32c>)
 8008c56:	f7f9 fd81 	bl	800275c <assert_failed>
 8008c5a:	e793      	b.n	8008b84 <HAL_RTC_SetAlarm_IT+0x1f0>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008c5c:	6822      	ldr	r2, [r4, #0]
 8008c5e:	6893      	ldr	r3, [r2, #8]
 8008c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c64:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008c66:	6822      	ldr	r2, [r4, #0]
 8008c68:	68d3      	ldr	r3, [r2, #12]
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	f463 73c0 	orn	r3, r3, #384	; 0x180
 8008c70:	60d3      	str	r3, [r2, #12]
    uint32_t tickstart = HAL_GetTick();
 8008c72:	f7fb fd41 	bl	80046f8 <HAL_GetTick>
 8008c76:	4605      	mov	r5, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008c78:	6823      	ldr	r3, [r4, #0]
 8008c7a:	68da      	ldr	r2, [r3, #12]
 8008c7c:	f012 0f01 	tst.w	r2, #1
 8008c80:	d10f      	bne.n	8008ca2 <HAL_RTC_SetAlarm_IT+0x30e>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008c82:	f7fb fd39 	bl	80046f8 <HAL_GetTick>
 8008c86:	1b40      	subs	r0, r0, r5
 8008c88:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008c8c:	d9f4      	bls.n	8008c78 <HAL_RTC_SetAlarm_IT+0x2e4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c8e:	6823      	ldr	r3, [r4, #0]
 8008c90:	22ff      	movs	r2, #255	; 0xff
 8008c92:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008c94:	2003      	movs	r0, #3
 8008c96:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_TIMEOUT;
 8008ca0:	e02f      	b.n	8008d02 <HAL_RTC_SetAlarm_IT+0x36e>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008ca2:	61de      	str	r6, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008ca4:	6823      	ldr	r3, [r4, #0]
 8008ca6:	645f      	str	r7, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008ca8:	6822      	ldr	r2, [r4, #0]
 8008caa:	6893      	ldr	r3, [r2, #8]
 8008cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cb0:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8008cb2:	6822      	ldr	r2, [r4, #0]
 8008cb4:	6893      	ldr	r3, [r2, #8]
 8008cb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008cba:	6093      	str	r3, [r2, #8]
 8008cbc:	e00f      	b.n	8008cde <HAL_RTC_SetAlarm_IT+0x34a>
 8008cbe:	bf00      	nop
 8008cc0:	0800bb14 	.word	0x0800bb14
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008cc4:	621e      	str	r6, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008cc6:	6823      	ldr	r3, [r4, #0]
 8008cc8:	649f      	str	r7, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008cca:	6822      	ldr	r2, [r4, #0]
 8008ccc:	6893      	ldr	r3, [r2, #8]
 8008cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008cd2:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8008cd4:	6822      	ldr	r2, [r4, #0]
 8008cd6:	6893      	ldr	r3, [r2, #8]
 8008cd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008cdc:	6093      	str	r3, [r2, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8008cde:	4b0a      	ldr	r3, [pc, #40]	; (8008d08 <HAL_RTC_SetAlarm_IT+0x374>)
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008ce6:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8008ce8:	689a      	ldr	r2, [r3, #8]
 8008cea:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008cee:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cf0:	6823      	ldr	r3, [r4, #0]
 8008cf2:	22ff      	movs	r2, #255	; 0xff
 8008cf4:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 8008cfc:	2000      	movs	r0, #0
 8008cfe:	f884 0020 	strb.w	r0, [r4, #32]
}
 8008d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 8008d04:	2002      	movs	r0, #2
 8008d06:	e7fc      	b.n	8008d02 <HAL_RTC_SetAlarm_IT+0x36e>
 8008d08:	40010400 	.word	0x40010400

08008d0c <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008d0c:	4770      	bx	lr
	...

08008d10 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008d10:	2800      	cmp	r0, #0
 8008d12:	f000 8146 	beq.w	8008fa2 <HAL_SPI_Init+0x292>
{
 8008d16:	b510      	push	{r4, lr}
 8008d18:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8008d1a:	6803      	ldr	r3, [r0, #0]
 8008d1c:	4aa2      	ldr	r2, [pc, #648]	; (8008fa8 <HAL_SPI_Init+0x298>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d00c      	beq.n	8008d3c <HAL_SPI_Init+0x2c>
 8008d22:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d008      	beq.n	8008d3c <HAL_SPI_Init+0x2c>
 8008d2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d004      	beq.n	8008d3c <HAL_SPI_Init+0x2c>
 8008d32:	f240 1145 	movw	r1, #325	; 0x145
 8008d36:	489d      	ldr	r0, [pc, #628]	; (8008fac <HAL_SPI_Init+0x29c>)
 8008d38:	f7f9 fd10 	bl	800275c <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8008d3c:	6863      	ldr	r3, [r4, #4]
 8008d3e:	b113      	cbz	r3, 8008d46 <HAL_SPI_Init+0x36>
 8008d40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d44:	d165      	bne.n	8008e12 <HAL_SPI_Init+0x102>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8008d46:	68a3      	ldr	r3, [r4, #8]
 8008d48:	b12b      	cbz	r3, 8008d56 <HAL_SPI_Init+0x46>
 8008d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d4e:	d002      	beq.n	8008d56 <HAL_SPI_Init+0x46>
 8008d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d54:	d163      	bne.n	8008e1e <HAL_SPI_Init+0x10e>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8008d56:	68e3      	ldr	r3, [r4, #12]
 8008d58:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008d5c:	d023      	beq.n	8008da6 <HAL_SPI_Init+0x96>
 8008d5e:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8008d62:	d020      	beq.n	8008da6 <HAL_SPI_Init+0x96>
 8008d64:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8008d68:	d01d      	beq.n	8008da6 <HAL_SPI_Init+0x96>
 8008d6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d6e:	d01a      	beq.n	8008da6 <HAL_SPI_Init+0x96>
 8008d70:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8008d74:	d017      	beq.n	8008da6 <HAL_SPI_Init+0x96>
 8008d76:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008d7a:	d014      	beq.n	8008da6 <HAL_SPI_Init+0x96>
 8008d7c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8008d80:	d011      	beq.n	8008da6 <HAL_SPI_Init+0x96>
 8008d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d86:	d00e      	beq.n	8008da6 <HAL_SPI_Init+0x96>
 8008d88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d8c:	d00b      	beq.n	8008da6 <HAL_SPI_Init+0x96>
 8008d8e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008d92:	d008      	beq.n	8008da6 <HAL_SPI_Init+0x96>
 8008d94:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008d98:	d005      	beq.n	8008da6 <HAL_SPI_Init+0x96>
 8008d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d9e:	d002      	beq.n	8008da6 <HAL_SPI_Init+0x96>
 8008da0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008da4:	d141      	bne.n	8008e2a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8008da6:	69a3      	ldr	r3, [r4, #24]
 8008da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dac:	d003      	beq.n	8008db6 <HAL_SPI_Init+0xa6>
 8008dae:	b113      	cbz	r3, 8008db6 <HAL_SPI_Init+0xa6>
 8008db0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008db4:	d13f      	bne.n	8008e36 <HAL_SPI_Init+0x126>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8008db6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008db8:	2b08      	cmp	r3, #8
 8008dba:	d001      	beq.n	8008dc0 <HAL_SPI_Init+0xb0>
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d140      	bne.n	8008e42 <HAL_SPI_Init+0x132>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008dc0:	69e3      	ldr	r3, [r4, #28]
 8008dc2:	b16b      	cbz	r3, 8008de0 <HAL_SPI_Init+0xd0>
 8008dc4:	2b08      	cmp	r3, #8
 8008dc6:	d00b      	beq.n	8008de0 <HAL_SPI_Init+0xd0>
 8008dc8:	2b10      	cmp	r3, #16
 8008dca:	d009      	beq.n	8008de0 <HAL_SPI_Init+0xd0>
 8008dcc:	2b18      	cmp	r3, #24
 8008dce:	d007      	beq.n	8008de0 <HAL_SPI_Init+0xd0>
 8008dd0:	2b20      	cmp	r3, #32
 8008dd2:	d005      	beq.n	8008de0 <HAL_SPI_Init+0xd0>
 8008dd4:	2b28      	cmp	r3, #40	; 0x28
 8008dd6:	d003      	beq.n	8008de0 <HAL_SPI_Init+0xd0>
 8008dd8:	2b30      	cmp	r3, #48	; 0x30
 8008dda:	d001      	beq.n	8008de0 <HAL_SPI_Init+0xd0>
 8008ddc:	2b38      	cmp	r3, #56	; 0x38
 8008dde:	d136      	bne.n	8008e4e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8008de0:	6a23      	ldr	r3, [r4, #32]
 8008de2:	b10b      	cbz	r3, 8008de8 <HAL_SPI_Init+0xd8>
 8008de4:	2b80      	cmp	r3, #128	; 0x80
 8008de6:	d138      	bne.n	8008e5a <HAL_SPI_Init+0x14a>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8008de8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dea:	b10b      	cbz	r3, 8008df0 <HAL_SPI_Init+0xe0>
 8008dec:	2b10      	cmp	r3, #16
 8008dee:	d13a      	bne.n	8008e66 <HAL_SPI_Init+0x156>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008df0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d15f      	bne.n	8008eb6 <HAL_SPI_Init+0x1a6>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8008df6:	6923      	ldr	r3, [r4, #16]
 8008df8:	b10b      	cbz	r3, 8008dfe <HAL_SPI_Init+0xee>
 8008dfa:	2b02      	cmp	r3, #2
 8008dfc:	d139      	bne.n	8008e72 <HAL_SPI_Init+0x162>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8008dfe:	6963      	ldr	r3, [r4, #20]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d83c      	bhi.n	8008e7e <HAL_SPI_Init+0x16e>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e04:	6863      	ldr	r3, [r4, #4]
 8008e06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e0a:	d03e      	beq.n	8008e8a <HAL_SPI_Init+0x17a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	61e3      	str	r3, [r4, #28]
 8008e10:	e064      	b.n	8008edc <HAL_SPI_Init+0x1cc>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8008e12:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8008e16:	4865      	ldr	r0, [pc, #404]	; (8008fac <HAL_SPI_Init+0x29c>)
 8008e18:	f7f9 fca0 	bl	800275c <assert_failed>
 8008e1c:	e793      	b.n	8008d46 <HAL_SPI_Init+0x36>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8008e1e:	f240 1147 	movw	r1, #327	; 0x147
 8008e22:	4862      	ldr	r0, [pc, #392]	; (8008fac <HAL_SPI_Init+0x29c>)
 8008e24:	f7f9 fc9a 	bl	800275c <assert_failed>
 8008e28:	e795      	b.n	8008d56 <HAL_SPI_Init+0x46>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8008e2a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008e2e:	485f      	ldr	r0, [pc, #380]	; (8008fac <HAL_SPI_Init+0x29c>)
 8008e30:	f7f9 fc94 	bl	800275c <assert_failed>
 8008e34:	e7b7      	b.n	8008da6 <HAL_SPI_Init+0x96>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8008e36:	f240 1149 	movw	r1, #329	; 0x149
 8008e3a:	485c      	ldr	r0, [pc, #368]	; (8008fac <HAL_SPI_Init+0x29c>)
 8008e3c:	f7f9 fc8e 	bl	800275c <assert_failed>
 8008e40:	e7b9      	b.n	8008db6 <HAL_SPI_Init+0xa6>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8008e42:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8008e46:	4859      	ldr	r0, [pc, #356]	; (8008fac <HAL_SPI_Init+0x29c>)
 8008e48:	f7f9 fc88 	bl	800275c <assert_failed>
 8008e4c:	e7b8      	b.n	8008dc0 <HAL_SPI_Init+0xb0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008e4e:	f240 114b 	movw	r1, #331	; 0x14b
 8008e52:	4856      	ldr	r0, [pc, #344]	; (8008fac <HAL_SPI_Init+0x29c>)
 8008e54:	f7f9 fc82 	bl	800275c <assert_failed>
 8008e58:	e7c2      	b.n	8008de0 <HAL_SPI_Init+0xd0>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8008e5a:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8008e5e:	4853      	ldr	r0, [pc, #332]	; (8008fac <HAL_SPI_Init+0x29c>)
 8008e60:	f7f9 fc7c 	bl	800275c <assert_failed>
 8008e64:	e7c0      	b.n	8008de8 <HAL_SPI_Init+0xd8>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8008e66:	f240 114d 	movw	r1, #333	; 0x14d
 8008e6a:	4850      	ldr	r0, [pc, #320]	; (8008fac <HAL_SPI_Init+0x29c>)
 8008e6c:	f7f9 fc76 	bl	800275c <assert_failed>
 8008e70:	e7be      	b.n	8008df0 <HAL_SPI_Init+0xe0>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8008e72:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8008e76:	484d      	ldr	r0, [pc, #308]	; (8008fac <HAL_SPI_Init+0x29c>)
 8008e78:	f7f9 fc70 	bl	800275c <assert_failed>
 8008e7c:	e7bf      	b.n	8008dfe <HAL_SPI_Init+0xee>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8008e7e:	f240 1151 	movw	r1, #337	; 0x151
 8008e82:	484a      	ldr	r0, [pc, #296]	; (8008fac <HAL_SPI_Init+0x29c>)
 8008e84:	f7f9 fc6a 	bl	800275c <assert_failed>
 8008e88:	e7bc      	b.n	8008e04 <HAL_SPI_Init+0xf4>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008e8a:	69e3      	ldr	r3, [r4, #28]
 8008e8c:	b333      	cbz	r3, 8008edc <HAL_SPI_Init+0x1cc>
 8008e8e:	2b08      	cmp	r3, #8
 8008e90:	d024      	beq.n	8008edc <HAL_SPI_Init+0x1cc>
 8008e92:	2b10      	cmp	r3, #16
 8008e94:	d022      	beq.n	8008edc <HAL_SPI_Init+0x1cc>
 8008e96:	2b18      	cmp	r3, #24
 8008e98:	d020      	beq.n	8008edc <HAL_SPI_Init+0x1cc>
 8008e9a:	2b20      	cmp	r3, #32
 8008e9c:	d01e      	beq.n	8008edc <HAL_SPI_Init+0x1cc>
 8008e9e:	2b28      	cmp	r3, #40	; 0x28
 8008ea0:	d01c      	beq.n	8008edc <HAL_SPI_Init+0x1cc>
 8008ea2:	2b30      	cmp	r3, #48	; 0x30
 8008ea4:	d01a      	beq.n	8008edc <HAL_SPI_Init+0x1cc>
 8008ea6:	2b38      	cmp	r3, #56	; 0x38
 8008ea8:	d018      	beq.n	8008edc <HAL_SPI_Init+0x1cc>
 8008eaa:	f240 1155 	movw	r1, #341	; 0x155
 8008eae:	483f      	ldr	r0, [pc, #252]	; (8008fac <HAL_SPI_Init+0x29c>)
 8008eb0:	f7f9 fc54 	bl	800275c <assert_failed>
 8008eb4:	e012      	b.n	8008edc <HAL_SPI_Init+0x1cc>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008eb6:	69e3      	ldr	r3, [r4, #28]
 8008eb8:	b16b      	cbz	r3, 8008ed6 <HAL_SPI_Init+0x1c6>
 8008eba:	2b08      	cmp	r3, #8
 8008ebc:	d00b      	beq.n	8008ed6 <HAL_SPI_Init+0x1c6>
 8008ebe:	2b10      	cmp	r3, #16
 8008ec0:	d009      	beq.n	8008ed6 <HAL_SPI_Init+0x1c6>
 8008ec2:	2b18      	cmp	r3, #24
 8008ec4:	d007      	beq.n	8008ed6 <HAL_SPI_Init+0x1c6>
 8008ec6:	2b20      	cmp	r3, #32
 8008ec8:	d005      	beq.n	8008ed6 <HAL_SPI_Init+0x1c6>
 8008eca:	2b28      	cmp	r3, #40	; 0x28
 8008ecc:	d003      	beq.n	8008ed6 <HAL_SPI_Init+0x1c6>
 8008ece:	2b30      	cmp	r3, #48	; 0x30
 8008ed0:	d001      	beq.n	8008ed6 <HAL_SPI_Init+0x1c6>
 8008ed2:	2b38      	cmp	r3, #56	; 0x38
 8008ed4:	d156      	bne.n	8008f84 <HAL_SPI_Init+0x274>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008eda:	6163      	str	r3, [r4, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008edc:	2300      	movs	r3, #0
 8008ede:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008ee0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d053      	beq.n	8008f90 <HAL_SPI_Init+0x280>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008ee8:	2302      	movs	r3, #2
 8008eea:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008eee:	6822      	ldr	r2, [r4, #0]
 8008ef0:	6813      	ldr	r3, [r2, #0]
 8008ef2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ef6:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ef8:	68e3      	ldr	r3, [r4, #12]
 8008efa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008efe:	d94d      	bls.n	8008f9c <HAL_SPI_Init+0x28c>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008f00:	2200      	movs	r2, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008f02:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008f06:	d004      	beq.n	8008f12 <HAL_SPI_Init+0x202>
 8008f08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f0c:	d001      	beq.n	8008f12 <HAL_SPI_Init+0x202>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008f12:	6863      	ldr	r3, [r4, #4]
 8008f14:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8008f18:	68a1      	ldr	r1, [r4, #8]
 8008f1a:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8008f1e:	430b      	orrs	r3, r1
 8008f20:	6921      	ldr	r1, [r4, #16]
 8008f22:	f001 0102 	and.w	r1, r1, #2
 8008f26:	430b      	orrs	r3, r1
 8008f28:	6961      	ldr	r1, [r4, #20]
 8008f2a:	f001 0101 	and.w	r1, r1, #1
 8008f2e:	430b      	orrs	r3, r1
 8008f30:	69a1      	ldr	r1, [r4, #24]
 8008f32:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8008f36:	430b      	orrs	r3, r1
 8008f38:	69e1      	ldr	r1, [r4, #28]
 8008f3a:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8008f3e:	430b      	orrs	r3, r1
 8008f40:	6a21      	ldr	r1, [r4, #32]
 8008f42:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8008f46:	430b      	orrs	r3, r1
 8008f48:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008f4a:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8008f4e:	6820      	ldr	r0, [r4, #0]
 8008f50:	430b      	orrs	r3, r1
 8008f52:	6003      	str	r3, [r0, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008f54:	8b63      	ldrh	r3, [r4, #26]
 8008f56:	f003 0304 	and.w	r3, r3, #4
 8008f5a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008f5c:	f001 0110 	and.w	r1, r1, #16
 8008f60:	430b      	orrs	r3, r1
 8008f62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f64:	f001 0108 	and.w	r1, r1, #8
 8008f68:	430b      	orrs	r3, r1
 8008f6a:	68e1      	ldr	r1, [r4, #12]
 8008f6c:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8008f70:	430b      	orrs	r3, r1
 8008f72:	6821      	ldr	r1, [r4, #0]
 8008f74:	4313      	orrs	r3, r2
 8008f76:	604b      	str	r3, [r1, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008f78:	2000      	movs	r0, #0
 8008f7a:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8008f82:	bd10      	pop	{r4, pc}
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008f84:	f240 115f 	movw	r1, #351	; 0x15f
 8008f88:	4808      	ldr	r0, [pc, #32]	; (8008fac <HAL_SPI_Init+0x29c>)
 8008f8a:	f7f9 fbe7 	bl	800275c <assert_failed>
 8008f8e:	e7a2      	b.n	8008ed6 <HAL_SPI_Init+0x1c6>
    hspi->Lock = HAL_UNLOCKED;
 8008f90:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8008f94:	4620      	mov	r0, r4
 8008f96:	f7fa fbf1 	bl	800377c <HAL_SPI_MspInit>
 8008f9a:	e7a5      	b.n	8008ee8 <HAL_SPI_Init+0x1d8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008f9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008fa0:	e7af      	b.n	8008f02 <HAL_SPI_Init+0x1f2>
    return HAL_ERROR;
 8008fa2:	2001      	movs	r0, #1
}
 8008fa4:	4770      	bx	lr
 8008fa6:	bf00      	nop
 8008fa8:	40013000 	.word	0x40013000
 8008fac:	0800bb4c 	.word	0x0800bb4c

08008fb0 <HAL_SPI_ErrorCallback>:
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008fb0:	4770      	bx	lr
	...

08008fb4 <HAL_SPI_IRQHandler>:
{
 8008fb4:	b530      	push	{r4, r5, lr}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8008fba:	6802      	ldr	r2, [r0, #0]
 8008fbc:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8008fbe:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008fc0:	f3c3 1080 	ubfx	r0, r3, #6, #1
 8008fc4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008fc8:	d105      	bne.n	8008fd6 <HAL_SPI_IRQHandler+0x22>
 8008fca:	f013 0f01 	tst.w	r3, #1
 8008fce:	d002      	beq.n	8008fd6 <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008fd0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8008fd4:	d169      	bne.n	80090aa <HAL_SPI_IRQHandler+0xf6>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008fd6:	f013 0f02 	tst.w	r3, #2
 8008fda:	d002      	beq.n	8008fe2 <HAL_SPI_IRQHandler+0x2e>
 8008fdc:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008fe0:	d167      	bne.n	80090b2 <HAL_SPI_IRQHandler+0xfe>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008fe2:	f3c3 1540 	ubfx	r5, r3, #5, #1
 8008fe6:	f013 0f20 	tst.w	r3, #32
 8008fea:	d103      	bne.n	8008ff4 <HAL_SPI_IRQHandler+0x40>
 8008fec:	b910      	cbnz	r0, 8008ff4 <HAL_SPI_IRQHandler+0x40>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008fee:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008ff2:	d061      	beq.n	80090b8 <HAL_SPI_IRQHandler+0x104>
 8008ff4:	f011 0f20 	tst.w	r1, #32
 8008ff8:	d05e      	beq.n	80090b8 <HAL_SPI_IRQHandler+0x104>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008ffa:	b178      	cbz	r0, 800901c <HAL_SPI_IRQHandler+0x68>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008ffc:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8009000:	b2c0      	uxtb	r0, r0
 8009002:	2803      	cmp	r0, #3
 8009004:	d05a      	beq.n	80090bc <HAL_SPI_IRQHandler+0x108>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009006:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8009008:	f040 0004 	orr.w	r0, r0, #4
 800900c:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800900e:	2000      	movs	r0, #0
 8009010:	9000      	str	r0, [sp, #0]
 8009012:	68d0      	ldr	r0, [r2, #12]
 8009014:	9000      	str	r0, [sp, #0]
 8009016:	6890      	ldr	r0, [r2, #8]
 8009018:	9000      	str	r0, [sp, #0]
 800901a:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800901c:	b165      	cbz	r5, 8009038 <HAL_SPI_IRQHandler+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800901e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8009020:	f040 0001 	orr.w	r0, r0, #1
 8009024:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009026:	2000      	movs	r0, #0
 8009028:	9002      	str	r0, [sp, #8]
 800902a:	6890      	ldr	r0, [r2, #8]
 800902c:	9002      	str	r0, [sp, #8]
 800902e:	6810      	ldr	r0, [r2, #0]
 8009030:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8009034:	6010      	str	r0, [r2, #0]
 8009036:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009038:	f413 7f80 	tst.w	r3, #256	; 0x100
 800903c:	d009      	beq.n	8009052 <HAL_SPI_IRQHandler+0x9e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800903e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009040:	f043 0308 	orr.w	r3, r3, #8
 8009044:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009046:	2300      	movs	r3, #0
 8009048:	9303      	str	r3, [sp, #12]
 800904a:	6823      	ldr	r3, [r4, #0]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	9303      	str	r3, [sp, #12]
 8009050:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009052:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009054:	2b00      	cmp	r3, #0
 8009056:	d02f      	beq.n	80090b8 <HAL_SPI_IRQHandler+0x104>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009058:	6822      	ldr	r2, [r4, #0]
 800905a:	6853      	ldr	r3, [r2, #4]
 800905c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8009060:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8009062:	2301      	movs	r3, #1
 8009064:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009068:	f011 0f03 	tst.w	r1, #3
 800906c:	d02e      	beq.n	80090cc <HAL_SPI_IRQHandler+0x118>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800906e:	6822      	ldr	r2, [r4, #0]
 8009070:	6853      	ldr	r3, [r2, #4]
 8009072:	f023 0303 	bic.w	r3, r3, #3
 8009076:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8009078:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800907a:	b14b      	cbz	r3, 8009090 <HAL_SPI_IRQHandler+0xdc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800907c:	4a15      	ldr	r2, [pc, #84]	; (80090d4 <HAL_SPI_IRQHandler+0x120>)
 800907e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009082:	f7fc fa47 	bl	8005514 <HAL_DMA_Abort_IT>
 8009086:	b118      	cbz	r0, 8009090 <HAL_SPI_IRQHandler+0xdc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009088:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800908a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800908e:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009090:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009092:	b18b      	cbz	r3, 80090b8 <HAL_SPI_IRQHandler+0x104>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009094:	4a0f      	ldr	r2, [pc, #60]	; (80090d4 <HAL_SPI_IRQHandler+0x120>)
 8009096:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009098:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800909a:	f7fc fa3b 	bl	8005514 <HAL_DMA_Abort_IT>
 800909e:	b158      	cbz	r0, 80090b8 <HAL_SPI_IRQHandler+0x104>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80090a0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80090a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090a6:	6623      	str	r3, [r4, #96]	; 0x60
 80090a8:	e006      	b.n	80090b8 <HAL_SPI_IRQHandler+0x104>
    hspi->RxISR(hspi);
 80090aa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80090ac:	4620      	mov	r0, r4
 80090ae:	4798      	blx	r3
    return;
 80090b0:	e002      	b.n	80090b8 <HAL_SPI_IRQHandler+0x104>
    hspi->TxISR(hspi);
 80090b2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80090b4:	4620      	mov	r0, r4
 80090b6:	4798      	blx	r3
}
 80090b8:	b005      	add	sp, #20
 80090ba:	bd30      	pop	{r4, r5, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80090bc:	2300      	movs	r3, #0
 80090be:	9301      	str	r3, [sp, #4]
 80090c0:	68d3      	ldr	r3, [r2, #12]
 80090c2:	9301      	str	r3, [sp, #4]
 80090c4:	6893      	ldr	r3, [r2, #8]
 80090c6:	9301      	str	r3, [sp, #4]
 80090c8:	9b01      	ldr	r3, [sp, #4]
        return;
 80090ca:	e7f5      	b.n	80090b8 <HAL_SPI_IRQHandler+0x104>
        HAL_SPI_ErrorCallback(hspi);
 80090cc:	4620      	mov	r0, r4
 80090ce:	f7ff ff6f 	bl	8008fb0 <HAL_SPI_ErrorCallback>
    return;
 80090d2:	e7f1      	b.n	80090b8 <HAL_SPI_IRQHandler+0x104>
 80090d4:	080090d9 	.word	0x080090d9

080090d8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090d8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80090da:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 80090dc:	2300      	movs	r3, #0
 80090de:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80090e2:	87c3      	strh	r3, [r0, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80090e4:	f7ff ff64 	bl	8008fb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80090e8:	bd08      	pop	{r3, pc}
	...

080090ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80090ec:	b510      	push	{r4, lr}
 80090ee:	4604      	mov	r4, r0
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80090f0:	6803      	ldr	r3, [r0, #0]
 80090f2:	4a26      	ldr	r2, [pc, #152]	; (800918c <HAL_TIM_Base_Start_IT+0xa0>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d017      	beq.n	8009128 <HAL_TIM_Base_Start_IT+0x3c>
 80090f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090fc:	d014      	beq.n	8009128 <HAL_TIM_Base_Start_IT+0x3c>
 80090fe:	f5a2 328e 	sub.w	r2, r2, #72704	; 0x11c00
 8009102:	4293      	cmp	r3, r2
 8009104:	d010      	beq.n	8009128 <HAL_TIM_Base_Start_IT+0x3c>
 8009106:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800910a:	4293      	cmp	r3, r2
 800910c:	d00c      	beq.n	8009128 <HAL_TIM_Base_Start_IT+0x3c>
 800910e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8009112:	4293      	cmp	r3, r2
 8009114:	d008      	beq.n	8009128 <HAL_TIM_Base_Start_IT+0x3c>
 8009116:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800911a:	4293      	cmp	r3, r2
 800911c:	d004      	beq.n	8009128 <HAL_TIM_Base_Start_IT+0x3c>
 800911e:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8009122:	481b      	ldr	r0, [pc, #108]	; (8009190 <HAL_TIM_Base_Start_IT+0xa4>)
 8009124:	f7f9 fb1a 	bl	800275c <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009128:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800912c:	b2db      	uxtb	r3, r3
 800912e:	2b01      	cmp	r3, #1
 8009130:	d126      	bne.n	8009180 <HAL_TIM_Base_Start_IT+0x94>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009132:	2302      	movs	r3, #2
 8009134:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009138:	6822      	ldr	r2, [r4, #0]
 800913a:	68d3      	ldr	r3, [r2, #12]
 800913c:	f043 0301 	orr.w	r3, r3, #1
 8009140:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009142:	6823      	ldr	r3, [r4, #0]
 8009144:	4a11      	ldr	r2, [pc, #68]	; (800918c <HAL_TIM_Base_Start_IT+0xa0>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d00c      	beq.n	8009164 <HAL_TIM_Base_Start_IT+0x78>
 800914a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800914e:	d009      	beq.n	8009164 <HAL_TIM_Base_Start_IT+0x78>
 8009150:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8009154:	4293      	cmp	r3, r2
 8009156:	d005      	beq.n	8009164 <HAL_TIM_Base_Start_IT+0x78>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	f042 0201 	orr.w	r2, r2, #1
 800915e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009160:	2000      	movs	r0, #0
 8009162:	e00e      	b.n	8009182 <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009164:	6899      	ldr	r1, [r3, #8]
 8009166:	4a0b      	ldr	r2, [pc, #44]	; (8009194 <HAL_TIM_Base_Start_IT+0xa8>)
 8009168:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800916a:	2a06      	cmp	r2, #6
 800916c:	d00a      	beq.n	8009184 <HAL_TIM_Base_Start_IT+0x98>
 800916e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009172:	d009      	beq.n	8009188 <HAL_TIM_Base_Start_IT+0x9c>
      __HAL_TIM_ENABLE(htim);
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	f042 0201 	orr.w	r2, r2, #1
 800917a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800917c:	2000      	movs	r0, #0
 800917e:	e000      	b.n	8009182 <HAL_TIM_Base_Start_IT+0x96>
    return HAL_ERROR;
 8009180:	2001      	movs	r0, #1
}
 8009182:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8009184:	2000      	movs	r0, #0
 8009186:	e7fc      	b.n	8009182 <HAL_TIM_Base_Start_IT+0x96>
 8009188:	2000      	movs	r0, #0
 800918a:	e7fa      	b.n	8009182 <HAL_TIM_Base_Start_IT+0x96>
 800918c:	40012c00 	.word	0x40012c00
 8009190:	0800bb84 	.word	0x0800bb84
 8009194:	00010007 	.word	0x00010007

08009198 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009198:	4770      	bx	lr

0800919a <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800919a:	4770      	bx	lr

0800919c <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800919c:	4770      	bx	lr

0800919e <HAL_TIM_IRQHandler>:
{
 800919e:	b510      	push	{r4, lr}
 80091a0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80091a2:	6803      	ldr	r3, [r0, #0]
 80091a4:	691a      	ldr	r2, [r3, #16]
 80091a6:	f012 0f02 	tst.w	r2, #2
 80091aa:	d011      	beq.n	80091d0 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80091ac:	68da      	ldr	r2, [r3, #12]
 80091ae:	f012 0f02 	tst.w	r2, #2
 80091b2:	d00d      	beq.n	80091d0 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80091b4:	f06f 0202 	mvn.w	r2, #2
 80091b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80091ba:	2301      	movs	r3, #1
 80091bc:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80091be:	6803      	ldr	r3, [r0, #0]
 80091c0:	699b      	ldr	r3, [r3, #24]
 80091c2:	f013 0f03 	tst.w	r3, #3
 80091c6:	d079      	beq.n	80092bc <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80091c8:	f7fb fa48 	bl	800465c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091cc:	2300      	movs	r3, #0
 80091ce:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80091d0:	6823      	ldr	r3, [r4, #0]
 80091d2:	691a      	ldr	r2, [r3, #16]
 80091d4:	f012 0f04 	tst.w	r2, #4
 80091d8:	d012      	beq.n	8009200 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80091da:	68da      	ldr	r2, [r3, #12]
 80091dc:	f012 0f04 	tst.w	r2, #4
 80091e0:	d00e      	beq.n	8009200 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80091e2:	f06f 0204 	mvn.w	r2, #4
 80091e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80091e8:	2302      	movs	r3, #2
 80091ea:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80091ec:	6823      	ldr	r3, [r4, #0]
 80091ee:	699b      	ldr	r3, [r3, #24]
 80091f0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80091f4:	d068      	beq.n	80092c8 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80091f6:	4620      	mov	r0, r4
 80091f8:	f7fb fa30 	bl	800465c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091fc:	2300      	movs	r3, #0
 80091fe:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009200:	6823      	ldr	r3, [r4, #0]
 8009202:	691a      	ldr	r2, [r3, #16]
 8009204:	f012 0f08 	tst.w	r2, #8
 8009208:	d012      	beq.n	8009230 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800920a:	68da      	ldr	r2, [r3, #12]
 800920c:	f012 0f08 	tst.w	r2, #8
 8009210:	d00e      	beq.n	8009230 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009212:	f06f 0208 	mvn.w	r2, #8
 8009216:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009218:	2304      	movs	r3, #4
 800921a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800921c:	6823      	ldr	r3, [r4, #0]
 800921e:	69db      	ldr	r3, [r3, #28]
 8009220:	f013 0f03 	tst.w	r3, #3
 8009224:	d057      	beq.n	80092d6 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8009226:	4620      	mov	r0, r4
 8009228:	f7fb fa18 	bl	800465c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800922c:	2300      	movs	r3, #0
 800922e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009230:	6823      	ldr	r3, [r4, #0]
 8009232:	691a      	ldr	r2, [r3, #16]
 8009234:	f012 0f10 	tst.w	r2, #16
 8009238:	d012      	beq.n	8009260 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800923a:	68da      	ldr	r2, [r3, #12]
 800923c:	f012 0f10 	tst.w	r2, #16
 8009240:	d00e      	beq.n	8009260 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009242:	f06f 0210 	mvn.w	r2, #16
 8009246:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009248:	2308      	movs	r3, #8
 800924a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800924c:	6823      	ldr	r3, [r4, #0]
 800924e:	69db      	ldr	r3, [r3, #28]
 8009250:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009254:	d046      	beq.n	80092e4 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8009256:	4620      	mov	r0, r4
 8009258:	f7fb fa00 	bl	800465c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800925c:	2300      	movs	r3, #0
 800925e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009260:	6823      	ldr	r3, [r4, #0]
 8009262:	691a      	ldr	r2, [r3, #16]
 8009264:	f012 0f01 	tst.w	r2, #1
 8009268:	d003      	beq.n	8009272 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800926a:	68da      	ldr	r2, [r3, #12]
 800926c:	f012 0f01 	tst.w	r2, #1
 8009270:	d13f      	bne.n	80092f2 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009272:	6823      	ldr	r3, [r4, #0]
 8009274:	691a      	ldr	r2, [r3, #16]
 8009276:	f012 0f80 	tst.w	r2, #128	; 0x80
 800927a:	d003      	beq.n	8009284 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800927c:	68da      	ldr	r2, [r3, #12]
 800927e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8009282:	d13d      	bne.n	8009300 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009284:	6823      	ldr	r3, [r4, #0]
 8009286:	691a      	ldr	r2, [r3, #16]
 8009288:	f412 7f80 	tst.w	r2, #256	; 0x100
 800928c:	d003      	beq.n	8009296 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800928e:	68da      	ldr	r2, [r3, #12]
 8009290:	f012 0f80 	tst.w	r2, #128	; 0x80
 8009294:	d13b      	bne.n	800930e <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009296:	6823      	ldr	r3, [r4, #0]
 8009298:	691a      	ldr	r2, [r3, #16]
 800929a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800929e:	d003      	beq.n	80092a8 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80092a0:	68da      	ldr	r2, [r3, #12]
 80092a2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80092a6:	d139      	bne.n	800931c <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80092a8:	6823      	ldr	r3, [r4, #0]
 80092aa:	691a      	ldr	r2, [r3, #16]
 80092ac:	f012 0f20 	tst.w	r2, #32
 80092b0:	d003      	beq.n	80092ba <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80092b2:	68da      	ldr	r2, [r3, #12]
 80092b4:	f012 0f20 	tst.w	r2, #32
 80092b8:	d137      	bne.n	800932a <HAL_TIM_IRQHandler+0x18c>
}
 80092ba:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80092bc:	f7ff ff6c 	bl	8009198 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092c0:	4620      	mov	r0, r4
 80092c2:	f7ff ff6a 	bl	800919a <HAL_TIM_PWM_PulseFinishedCallback>
 80092c6:	e781      	b.n	80091cc <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092c8:	4620      	mov	r0, r4
 80092ca:	f7ff ff65 	bl	8009198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092ce:	4620      	mov	r0, r4
 80092d0:	f7ff ff63 	bl	800919a <HAL_TIM_PWM_PulseFinishedCallback>
 80092d4:	e792      	b.n	80091fc <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092d6:	4620      	mov	r0, r4
 80092d8:	f7ff ff5e 	bl	8009198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092dc:	4620      	mov	r0, r4
 80092de:	f7ff ff5c 	bl	800919a <HAL_TIM_PWM_PulseFinishedCallback>
 80092e2:	e7a3      	b.n	800922c <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092e4:	4620      	mov	r0, r4
 80092e6:	f7ff ff57 	bl	8009198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092ea:	4620      	mov	r0, r4
 80092ec:	f7ff ff55 	bl	800919a <HAL_TIM_PWM_PulseFinishedCallback>
 80092f0:	e7b4      	b.n	800925c <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80092f2:	f06f 0201 	mvn.w	r2, #1
 80092f6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80092f8:	4620      	mov	r0, r4
 80092fa:	f7fb f8f7 	bl	80044ec <HAL_TIM_PeriodElapsedCallback>
 80092fe:	e7b8      	b.n	8009272 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009300:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009304:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8009306:	4620      	mov	r0, r4
 8009308:	f000 f971 	bl	80095ee <HAL_TIMEx_BreakCallback>
 800930c:	e7ba      	b.n	8009284 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800930e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009312:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8009314:	4620      	mov	r0, r4
 8009316:	f000 f96b 	bl	80095f0 <HAL_TIMEx_Break2Callback>
 800931a:	e7bc      	b.n	8009296 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800931c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009320:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009322:	4620      	mov	r0, r4
 8009324:	f7ff ff3a 	bl	800919c <HAL_TIM_TriggerCallback>
 8009328:	e7be      	b.n	80092a8 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800932a:	f06f 0220 	mvn.w	r2, #32
 800932e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8009330:	4620      	mov	r0, r4
 8009332:	f000 f95b 	bl	80095ec <HAL_TIMEx_CommutCallback>
}
 8009336:	e7c0      	b.n	80092ba <HAL_TIM_IRQHandler+0x11c>

08009338 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009338:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800933a:	4a1a      	ldr	r2, [pc, #104]	; (80093a4 <TIM_Base_SetConfig+0x6c>)
 800933c:	4290      	cmp	r0, r2
 800933e:	d002      	beq.n	8009346 <TIM_Base_SetConfig+0xe>
 8009340:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009344:	d103      	bne.n	800934e <TIM_Base_SetConfig+0x16>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800934a:	684a      	ldr	r2, [r1, #4]
 800934c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800934e:	4a15      	ldr	r2, [pc, #84]	; (80093a4 <TIM_Base_SetConfig+0x6c>)
 8009350:	4290      	cmp	r0, r2
 8009352:	d00a      	beq.n	800936a <TIM_Base_SetConfig+0x32>
 8009354:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009358:	d007      	beq.n	800936a <TIM_Base_SetConfig+0x32>
 800935a:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800935e:	4290      	cmp	r0, r2
 8009360:	d003      	beq.n	800936a <TIM_Base_SetConfig+0x32>
 8009362:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009366:	4290      	cmp	r0, r2
 8009368:	d103      	bne.n	8009372 <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800936a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800936e:	68ca      	ldr	r2, [r1, #12]
 8009370:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009376:	694a      	ldr	r2, [r1, #20]
 8009378:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800937a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800937c:	688b      	ldr	r3, [r1, #8]
 800937e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009380:	680b      	ldr	r3, [r1, #0]
 8009382:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009384:	4b07      	ldr	r3, [pc, #28]	; (80093a4 <TIM_Base_SetConfig+0x6c>)
 8009386:	4298      	cmp	r0, r3
 8009388:	d007      	beq.n	800939a <TIM_Base_SetConfig+0x62>
 800938a:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800938e:	4298      	cmp	r0, r3
 8009390:	d003      	beq.n	800939a <TIM_Base_SetConfig+0x62>
 8009392:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009396:	4298      	cmp	r0, r3
 8009398:	d101      	bne.n	800939e <TIM_Base_SetConfig+0x66>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800939a:	690b      	ldr	r3, [r1, #16]
 800939c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800939e:	2301      	movs	r3, #1
 80093a0:	6143      	str	r3, [r0, #20]
}
 80093a2:	4770      	bx	lr
 80093a4:	40012c00 	.word	0x40012c00

080093a8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80093a8:	2800      	cmp	r0, #0
 80093aa:	d071      	beq.n	8009490 <HAL_TIM_Base_Init+0xe8>
{
 80093ac:	b510      	push	{r4, lr}
 80093ae:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80093b0:	6803      	ldr	r3, [r0, #0]
 80093b2:	4a38      	ldr	r2, [pc, #224]	; (8009494 <HAL_TIM_Base_Init+0xec>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d017      	beq.n	80093e8 <HAL_TIM_Base_Init+0x40>
 80093b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093bc:	d014      	beq.n	80093e8 <HAL_TIM_Base_Init+0x40>
 80093be:	f5a2 328e 	sub.w	r2, r2, #72704	; 0x11c00
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d010      	beq.n	80093e8 <HAL_TIM_Base_Init+0x40>
 80093c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d00c      	beq.n	80093e8 <HAL_TIM_Base_Init+0x40>
 80093ce:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d008      	beq.n	80093e8 <HAL_TIM_Base_Init+0x40>
 80093d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80093da:	4293      	cmp	r3, r2
 80093dc:	d004      	beq.n	80093e8 <HAL_TIM_Base_Init+0x40>
 80093de:	f44f 718b 	mov.w	r1, #278	; 0x116
 80093e2:	482d      	ldr	r0, [pc, #180]	; (8009498 <HAL_TIM_Base_Init+0xf0>)
 80093e4:	f7f9 f9ba 	bl	800275c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80093e8:	68a3      	ldr	r3, [r4, #8]
 80093ea:	b13b      	cbz	r3, 80093fc <HAL_TIM_Base_Init+0x54>
 80093ec:	2b10      	cmp	r3, #16
 80093ee:	d005      	beq.n	80093fc <HAL_TIM_Base_Init+0x54>
 80093f0:	2b20      	cmp	r3, #32
 80093f2:	d003      	beq.n	80093fc <HAL_TIM_Base_Init+0x54>
 80093f4:	2b40      	cmp	r3, #64	; 0x40
 80093f6:	d001      	beq.n	80093fc <HAL_TIM_Base_Init+0x54>
 80093f8:	2b60      	cmp	r3, #96	; 0x60
 80093fa:	d131      	bne.n	8009460 <HAL_TIM_Base_Init+0xb8>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80093fc:	6923      	ldr	r3, [r4, #16]
 80093fe:	b12b      	cbz	r3, 800940c <HAL_TIM_Base_Init+0x64>
 8009400:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009404:	d002      	beq.n	800940c <HAL_TIM_Base_Init+0x64>
 8009406:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800940a:	d12f      	bne.n	800946c <HAL_TIM_Base_Init+0xc4>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800940c:	69a3      	ldr	r3, [r4, #24]
 800940e:	b10b      	cbz	r3, 8009414 <HAL_TIM_Base_Init+0x6c>
 8009410:	2b80      	cmp	r3, #128	; 0x80
 8009412:	d131      	bne.n	8009478 <HAL_TIM_Base_Init+0xd0>
  if (htim->State == HAL_TIM_STATE_RESET)
 8009414:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8009418:	b3a3      	cbz	r3, 8009484 <HAL_TIM_Base_Init+0xdc>
  htim->State = HAL_TIM_STATE_BUSY;
 800941a:	2302      	movs	r3, #2
 800941c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009420:	4621      	mov	r1, r4
 8009422:	f851 0b04 	ldr.w	r0, [r1], #4
 8009426:	f7ff ff87 	bl	8009338 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800942a:	2301      	movs	r3, #1
 800942c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009430:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009434:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009438:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800943c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009440:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009448:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800944c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009450:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8009454:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009458:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800945c:	2000      	movs	r0, #0
}
 800945e:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009460:	f240 1117 	movw	r1, #279	; 0x117
 8009464:	480c      	ldr	r0, [pc, #48]	; (8009498 <HAL_TIM_Base_Init+0xf0>)
 8009466:	f7f9 f979 	bl	800275c <assert_failed>
 800946a:	e7c7      	b.n	80093fc <HAL_TIM_Base_Init+0x54>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800946c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8009470:	4809      	ldr	r0, [pc, #36]	; (8009498 <HAL_TIM_Base_Init+0xf0>)
 8009472:	f7f9 f973 	bl	800275c <assert_failed>
 8009476:	e7c9      	b.n	800940c <HAL_TIM_Base_Init+0x64>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009478:	f240 1119 	movw	r1, #281	; 0x119
 800947c:	4806      	ldr	r0, [pc, #24]	; (8009498 <HAL_TIM_Base_Init+0xf0>)
 800947e:	f7f9 f96d 	bl	800275c <assert_failed>
 8009482:	e7c7      	b.n	8009414 <HAL_TIM_Base_Init+0x6c>
    htim->Lock = HAL_UNLOCKED;
 8009484:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8009488:	4620      	mov	r0, r4
 800948a:	f7fa faf1 	bl	8003a70 <HAL_TIM_Base_MspInit>
 800948e:	e7c4      	b.n	800941a <HAL_TIM_Base_Init+0x72>
    return HAL_ERROR;
 8009490:	2001      	movs	r0, #1
}
 8009492:	4770      	bx	lr
 8009494:	40012c00 	.word	0x40012c00
 8009498:	0800bb84 	.word	0x0800bb84

0800949c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800949c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800949e:	4604      	mov	r4, r0
 80094a0:	460d      	mov	r5, r1
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80094a2:	6803      	ldr	r3, [r0, #0]
 80094a4:	4a4f      	ldr	r2, [pc, #316]	; (80095e4 <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d013      	beq.n	80094d2 <HAL_TIMEx_MasterConfigSynchronization+0x36>
 80094aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094ae:	d010      	beq.n	80094d2 <HAL_TIMEx_MasterConfigSynchronization+0x36>
 80094b0:	f5a2 328e 	sub.w	r2, r2, #72704	; 0x11c00
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d00c      	beq.n	80094d2 <HAL_TIMEx_MasterConfigSynchronization+0x36>
 80094b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80094bc:	4293      	cmp	r3, r2
 80094be:	d008      	beq.n	80094d2 <HAL_TIMEx_MasterConfigSynchronization+0x36>
 80094c0:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d004      	beq.n	80094d2 <HAL_TIMEx_MasterConfigSynchronization+0x36>
 80094c8:	f240 71b4 	movw	r1, #1972	; 0x7b4
 80094cc:	4846      	ldr	r0, [pc, #280]	; (80095e8 <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 80094ce:	f7f9 f945 	bl	800275c <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80094d2:	682b      	ldr	r3, [r5, #0]
 80094d4:	b16b      	cbz	r3, 80094f2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80094d6:	2b10      	cmp	r3, #16
 80094d8:	d00b      	beq.n	80094f2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80094da:	2b20      	cmp	r3, #32
 80094dc:	d009      	beq.n	80094f2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80094de:	2b30      	cmp	r3, #48	; 0x30
 80094e0:	d007      	beq.n	80094f2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80094e2:	2b40      	cmp	r3, #64	; 0x40
 80094e4:	d005      	beq.n	80094f2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80094e6:	2b50      	cmp	r3, #80	; 0x50
 80094e8:	d003      	beq.n	80094f2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80094ea:	2b60      	cmp	r3, #96	; 0x60
 80094ec:	d001      	beq.n	80094f2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80094ee:	2b70      	cmp	r3, #112	; 0x70
 80094f0:	d130      	bne.n	8009554 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80094f2:	68ab      	ldr	r3, [r5, #8]
 80094f4:	2b80      	cmp	r3, #128	; 0x80
 80094f6:	d000      	beq.n	80094fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80094f8:	bb93      	cbnz	r3, 8009560 <HAL_TIMEx_MasterConfigSynchronization+0xc4>

  /* Check input state */
  __HAL_LOCK(htim);
 80094fa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d06e      	beq.n	80095e0 <HAL_TIMEx_MasterConfigSynchronization+0x144>
 8009502:	2301      	movs	r3, #1
 8009504:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009508:	2302      	movs	r3, #2
 800950a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800950e:	6823      	ldr	r3, [r4, #0]
 8009510:	685e      	ldr	r6, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009512:	689f      	ldr	r7, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009514:	4a33      	ldr	r2, [pc, #204]	; (80095e4 <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d028      	beq.n	800956c <HAL_TIMEx_MasterConfigSynchronization+0xd0>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800951a:	f026 0670 	bic.w	r6, r6, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800951e:	682b      	ldr	r3, [r5, #0]
 8009520:	431e      	orrs	r6, r3

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009522:	6823      	ldr	r3, [r4, #0]
 8009524:	605e      	str	r6, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009526:	6823      	ldr	r3, [r4, #0]
 8009528:	4a2e      	ldr	r2, [pc, #184]	; (80095e4 <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d006      	beq.n	800953c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 800952e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009532:	d003      	beq.n	800953c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8009534:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8009538:	4293      	cmp	r3, r2
 800953a:	d104      	bne.n	8009546 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800953c:	f027 0780 	bic.w	r7, r7, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009540:	68aa      	ldr	r2, [r5, #8]
 8009542:	4317      	orrs	r7, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009544:	609f      	str	r7, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009546:	2301      	movs	r3, #1
 8009548:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800954c:	2000      	movs	r0, #0
 800954e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
}
 8009552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8009554:	f240 71b5 	movw	r1, #1973	; 0x7b5
 8009558:	4823      	ldr	r0, [pc, #140]	; (80095e8 <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 800955a:	f7f9 f8ff 	bl	800275c <assert_failed>
 800955e:	e7c8      	b.n	80094f2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8009560:	f240 71b6 	movw	r1, #1974	; 0x7b6
 8009564:	4820      	ldr	r0, [pc, #128]	; (80095e8 <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 8009566:	f7f9 f8f9 	bl	800275c <assert_failed>
 800956a:	e7c6      	b.n	80094fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800956c:	686b      	ldr	r3, [r5, #4]
 800956e:	b363      	cbz	r3, 80095ca <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009570:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009574:	d029      	beq.n	80095ca <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009576:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800957a:	d026      	beq.n	80095ca <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800957c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009580:	d023      	beq.n	80095ca <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009582:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009586:	d020      	beq.n	80095ca <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009588:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800958c:	d01d      	beq.n	80095ca <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800958e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009592:	d01a      	beq.n	80095ca <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009594:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8009598:	d017      	beq.n	80095ca <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800959a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800959e:	d014      	beq.n	80095ca <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 80095a0:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 80095a4:	d011      	beq.n	80095ca <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 80095a6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80095aa:	d00e      	beq.n	80095ca <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 80095ac:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 80095b0:	d00b      	beq.n	80095ca <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 80095b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80095b6:	d008      	beq.n	80095ca <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 80095b8:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 80095bc:	d005      	beq.n	80095ca <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 80095be:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 80095c2:	d002      	beq.n	80095ca <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 80095c4:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 80095c8:	d104      	bne.n	80095d4 <HAL_TIMEx_MasterConfigSynchronization+0x138>
    tmpcr2 &= ~TIM_CR2_MMS2;
 80095ca:	f426 0670 	bic.w	r6, r6, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80095ce:	686b      	ldr	r3, [r5, #4]
 80095d0:	431e      	orrs	r6, r3
 80095d2:	e7a2      	b.n	800951a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 80095d4:	f44f 61f9 	mov.w	r1, #1992	; 0x7c8
 80095d8:	4803      	ldr	r0, [pc, #12]	; (80095e8 <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 80095da:	f7f9 f8bf 	bl	800275c <assert_failed>
 80095de:	e7f4      	b.n	80095ca <HAL_TIMEx_MasterConfigSynchronization+0x12e>
  __HAL_LOCK(htim);
 80095e0:	2002      	movs	r0, #2
 80095e2:	e7b6      	b.n	8009552 <HAL_TIMEx_MasterConfigSynchronization+0xb6>
 80095e4:	40012c00 	.word	0x40012c00
 80095e8:	0800bbbc 	.word	0x0800bbbc

080095ec <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80095ec:	4770      	bx	lr

080095ee <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80095ee:	4770      	bx	lr

080095f0 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80095f0:	4770      	bx	lr
	...

080095f4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80095f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095f6:	4607      	mov	r7, r0
 80095f8:	460d      	mov	r5, r1
  uint32_t pinpos;
  uint32_t currentpin;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80095fa:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80095fe:	d016      	beq.n	800962e <LL_GPIO_Init+0x3a>
 8009600:	4b81      	ldr	r3, [pc, #516]	; (8009808 <LL_GPIO_Init+0x214>)
 8009602:	4298      	cmp	r0, r3
 8009604:	d013      	beq.n	800962e <LL_GPIO_Init+0x3a>
 8009606:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800960a:	4298      	cmp	r0, r3
 800960c:	d00f      	beq.n	800962e <LL_GPIO_Init+0x3a>
 800960e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009612:	4298      	cmp	r0, r3
 8009614:	d00b      	beq.n	800962e <LL_GPIO_Init+0x3a>
 8009616:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800961a:	4298      	cmp	r0, r3
 800961c:	d007      	beq.n	800962e <LL_GPIO_Init+0x3a>
 800961e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8009622:	4298      	cmp	r0, r3
 8009624:	d003      	beq.n	800962e <LL_GPIO_Init+0x3a>
 8009626:	21c4      	movs	r1, #196	; 0xc4
 8009628:	4878      	ldr	r0, [pc, #480]	; (800980c <LL_GPIO_Init+0x218>)
 800962a:	f7f9 f897 	bl	800275c <assert_failed>
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));
 800962e:	682b      	ldr	r3, [r5, #0]
 8009630:	3b01      	subs	r3, #1
 8009632:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009636:	4293      	cmp	r3, r2
 8009638:	d80c      	bhi.n	8009654 <LL_GPIO_Init+0x60>
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
 800963a:	686b      	ldr	r3, [r5, #4]
 800963c:	2b03      	cmp	r3, #3
 800963e:	d80e      	bhi.n	800965e <LL_GPIO_Init+0x6a>
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
 8009640:	692b      	ldr	r3, [r5, #16]
 8009642:	2b02      	cmp	r3, #2
 8009644:	d810      	bhi.n	8009668 <LL_GPIO_Init+0x74>

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009646:	682e      	ldr	r6, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009648:	fa96 f6a6 	rbit	r6, r6
  if (value == 0U)
 800964c:	b18e      	cbz	r6, 8009672 <LL_GPIO_Init+0x7e>
  return __builtin_clz(value);
 800964e:	fab6 f686 	clz	r6, r6
 8009652:	e05a      	b.n	800970a <LL_GPIO_Init+0x116>
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));
 8009654:	21c5      	movs	r1, #197	; 0xc5
 8009656:	486d      	ldr	r0, [pc, #436]	; (800980c <LL_GPIO_Init+0x218>)
 8009658:	f7f9 f880 	bl	800275c <assert_failed>
 800965c:	e7ed      	b.n	800963a <LL_GPIO_Init+0x46>
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
 800965e:	21c6      	movs	r1, #198	; 0xc6
 8009660:	486a      	ldr	r0, [pc, #424]	; (800980c <LL_GPIO_Init+0x218>)
 8009662:	f7f9 f87b 	bl	800275c <assert_failed>
 8009666:	e7eb      	b.n	8009640 <LL_GPIO_Init+0x4c>
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
 8009668:	21c7      	movs	r1, #199	; 0xc7
 800966a:	4868      	ldr	r0, [pc, #416]	; (800980c <LL_GPIO_Init+0x218>)
 800966c:	f7f9 f876 	bl	800275c <assert_failed>
 8009670:	e7e9      	b.n	8009646 <LL_GPIO_Init+0x52>
    return 32U;
 8009672:	2620      	movs	r6, #32

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8009674:	e049      	b.n	800970a <LL_GPIO_Init+0x116>
    if (currentpin != 0x00u)
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
 8009676:	21d8      	movs	r1, #216	; 0xd8
 8009678:	4864      	ldr	r0, [pc, #400]	; (800980c <LL_GPIO_Init+0x218>)
 800967a:	f7f9 f86f 	bl	800275c <assert_failed>
 800967e:	e053      	b.n	8009728 <LL_GPIO_Init+0x134>
 8009680:	2220      	movs	r2, #32
 8009682:	e059      	b.n	8009738 <LL_GPIO_Init+0x144>
 8009684:	2320      	movs	r3, #32
 8009686:	e063      	b.n	8009750 <LL_GPIO_Init+0x15c>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8009688:	6829      	ldr	r1, [r5, #0]
 800968a:	68ea      	ldr	r2, [r5, #12]
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	ea23 0301 	bic.w	r3, r3, r1
 8009692:	fb02 f201 	mul.w	r2, r2, r1
 8009696:	4313      	orrs	r3, r2
 8009698:	607b      	str	r3, [r7, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800969a:	6929      	ldr	r1, [r5, #16]
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800969c:	68fb      	ldr	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800969e:	fa94 f2a4 	rbit	r2, r4
  if (value == 0U)
 80096a2:	2a00      	cmp	r2, #0
 80096a4:	d061      	beq.n	800976a <LL_GPIO_Init+0x176>
  return __builtin_clz(value);
 80096a6:	fab2 f282 	clz	r2, r2
 80096aa:	0052      	lsls	r2, r2, #1
 80096ac:	2003      	movs	r0, #3
 80096ae:	fa00 f202 	lsl.w	r2, r0, r2
 80096b2:	ea23 0202 	bic.w	r2, r3, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096b6:	fa94 f3a4 	rbit	r3, r4
  if (value == 0U)
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d057      	beq.n	800976e <LL_GPIO_Init+0x17a>
  return __builtin_clz(value);
 80096be:	fab3 f383 	clz	r3, r3
 80096c2:	005b      	lsls	r3, r3, #1
 80096c4:	fa01 f303 	lsl.w	r3, r1, r3
 80096c8:	4313      	orrs	r3, r2
 80096ca:	60fb      	str	r3, [r7, #12]

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80096cc:	686b      	ldr	r3, [r5, #4]
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d04f      	beq.n	8009772 <LL_GPIO_Init+0x17e>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80096d2:	6869      	ldr	r1, [r5, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80096d4:	683b      	ldr	r3, [r7, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096d6:	fa94 f2a4 	rbit	r2, r4
  if (value == 0U)
 80096da:	2a00      	cmp	r2, #0
 80096dc:	f000 808d 	beq.w	80097fa <LL_GPIO_Init+0x206>
  return __builtin_clz(value);
 80096e0:	fab2 f282 	clz	r2, r2
 80096e4:	0052      	lsls	r2, r2, #1
 80096e6:	2003      	movs	r0, #3
 80096e8:	fa00 f202 	lsl.w	r2, r0, r2
 80096ec:	ea23 0202 	bic.w	r2, r3, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096f0:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 80096f4:	2c00      	cmp	r4, #0
 80096f6:	f000 8082 	beq.w	80097fe <LL_GPIO_Init+0x20a>
  return __builtin_clz(value);
 80096fa:	fab4 f384 	clz	r3, r4
 80096fe:	005b      	lsls	r3, r3, #1
 8009700:	fa01 f303 	lsl.w	r3, r1, r3
 8009704:	4313      	orrs	r3, r2
 8009706:	603b      	str	r3, [r7, #0]
    }
    pinpos++;
 8009708:	3601      	adds	r6, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800970a:	682b      	ldr	r3, [r5, #0]
 800970c:	fa33 f206 	lsrs.w	r2, r3, r6
 8009710:	d077      	beq.n	8009802 <LL_GPIO_Init+0x20e>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8009712:	2401      	movs	r4, #1
 8009714:	40b4      	lsls	r4, r6
    if (currentpin != 0x00u)
 8009716:	401c      	ands	r4, r3
 8009718:	d0f6      	beq.n	8009708 <LL_GPIO_Init+0x114>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800971a:	686b      	ldr	r3, [r5, #4]
 800971c:	3b01      	subs	r3, #1
 800971e:	2b01      	cmp	r3, #1
 8009720:	d8bb      	bhi.n	800969a <LL_GPIO_Init+0xa6>
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
 8009722:	68ab      	ldr	r3, [r5, #8]
 8009724:	2b03      	cmp	r3, #3
 8009726:	d8a6      	bhi.n	8009676 <LL_GPIO_Init+0x82>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009728:	68a9      	ldr	r1, [r5, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800972a:	68bb      	ldr	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800972c:	fa94 f2a4 	rbit	r2, r4
  if (value == 0U)
 8009730:	2a00      	cmp	r2, #0
 8009732:	d0a5      	beq.n	8009680 <LL_GPIO_Init+0x8c>
  return __builtin_clz(value);
 8009734:	fab2 f282 	clz	r2, r2
 8009738:	0052      	lsls	r2, r2, #1
 800973a:	2003      	movs	r0, #3
 800973c:	fa00 f202 	lsl.w	r2, r0, r2
 8009740:	ea23 0202 	bic.w	r2, r3, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009744:	fa94 f3a4 	rbit	r3, r4
  if (value == 0U)
 8009748:	2b00      	cmp	r3, #0
 800974a:	d09b      	beq.n	8009684 <LL_GPIO_Init+0x90>
  return __builtin_clz(value);
 800974c:	fab3 f383 	clz	r3, r3
 8009750:	005b      	lsls	r3, r3, #1
 8009752:	fa01 f303 	lsl.w	r3, r1, r3
 8009756:	4313      	orrs	r3, r2
 8009758:	60bb      	str	r3, [r7, #8]
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
 800975a:	68eb      	ldr	r3, [r5, #12]
 800975c:	2b01      	cmp	r3, #1
 800975e:	d993      	bls.n	8009688 <LL_GPIO_Init+0x94>
 8009760:	21de      	movs	r1, #222	; 0xde
 8009762:	482a      	ldr	r0, [pc, #168]	; (800980c <LL_GPIO_Init+0x218>)
 8009764:	f7f8 fffa 	bl	800275c <assert_failed>
 8009768:	e78e      	b.n	8009688 <LL_GPIO_Init+0x94>
    return 32U;
 800976a:	2220      	movs	r2, #32
 800976c:	e79d      	b.n	80096aa <LL_GPIO_Init+0xb6>
 800976e:	2320      	movs	r3, #32
 8009770:	e7a7      	b.n	80096c2 <LL_GPIO_Init+0xce>
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
 8009772:	696b      	ldr	r3, [r5, #20]
 8009774:	2b0f      	cmp	r3, #15
 8009776:	d819      	bhi.n	80097ac <LL_GPIO_Init+0x1b8>
        if (currentpin < LL_GPIO_PIN_8)
 8009778:	2cff      	cmp	r4, #255	; 0xff
 800977a:	d820      	bhi.n	80097be <LL_GPIO_Init+0x1ca>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800977c:	6969      	ldr	r1, [r5, #20]
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800977e:	6a3b      	ldr	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009780:	fa94 f2a4 	rbit	r2, r4
  if (value == 0U)
 8009784:	b1ba      	cbz	r2, 80097b6 <LL_GPIO_Init+0x1c2>
  return __builtin_clz(value);
 8009786:	fab2 f282 	clz	r2, r2
 800978a:	0092      	lsls	r2, r2, #2
 800978c:	200f      	movs	r0, #15
 800978e:	fa00 f202 	lsl.w	r2, r0, r2
 8009792:	ea23 0202 	bic.w	r2, r3, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009796:	fa94 f3a4 	rbit	r3, r4
  if (value == 0U)
 800979a:	b173      	cbz	r3, 80097ba <LL_GPIO_Init+0x1c6>
  return __builtin_clz(value);
 800979c:	fab3 f383 	clz	r3, r3
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	fa01 f303 	lsl.w	r3, r1, r3
 80097a6:	4313      	orrs	r3, r2
 80097a8:	623b      	str	r3, [r7, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80097aa:	e792      	b.n	80096d2 <LL_GPIO_Init+0xde>
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
 80097ac:	21ea      	movs	r1, #234	; 0xea
 80097ae:	4817      	ldr	r0, [pc, #92]	; (800980c <LL_GPIO_Init+0x218>)
 80097b0:	f7f8 ffd4 	bl	800275c <assert_failed>
 80097b4:	e7e0      	b.n	8009778 <LL_GPIO_Init+0x184>
    return 32U;
 80097b6:	2220      	movs	r2, #32
 80097b8:	e7e7      	b.n	800978a <LL_GPIO_Init+0x196>
 80097ba:	2320      	movs	r3, #32
 80097bc:	e7f0      	b.n	80097a0 <LL_GPIO_Init+0x1ac>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80097be:	6968      	ldr	r0, [r5, #20]
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80097c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80097c2:	0a23      	lsrs	r3, r4, #8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097c4:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 80097c8:	b19a      	cbz	r2, 80097f2 <LL_GPIO_Init+0x1fe>
  return __builtin_clz(value);
 80097ca:	fab2 f282 	clz	r2, r2
 80097ce:	0092      	lsls	r2, r2, #2
 80097d0:	f04f 0c0f 	mov.w	ip, #15
 80097d4:	fa0c f202 	lsl.w	r2, ip, r2
 80097d8:	ea21 0202 	bic.w	r2, r1, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097dc:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80097e0:	b14b      	cbz	r3, 80097f6 <LL_GPIO_Init+0x202>
  return __builtin_clz(value);
 80097e2:	fab3 f383 	clz	r3, r3
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	fa00 f303 	lsl.w	r3, r0, r3
 80097ec:	4313      	orrs	r3, r2
 80097ee:	627b      	str	r3, [r7, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80097f0:	e76f      	b.n	80096d2 <LL_GPIO_Init+0xde>
    return 32U;
 80097f2:	2220      	movs	r2, #32
 80097f4:	e7eb      	b.n	80097ce <LL_GPIO_Init+0x1da>
 80097f6:	2320      	movs	r3, #32
 80097f8:	e7f5      	b.n	80097e6 <LL_GPIO_Init+0x1f2>
 80097fa:	2220      	movs	r2, #32
 80097fc:	e772      	b.n	80096e4 <LL_GPIO_Init+0xf0>
 80097fe:	2320      	movs	r3, #32
 8009800:	e77d      	b.n	80096fe <LL_GPIO_Init+0x10a>
  }

  return (SUCCESS);
}
 8009802:	2000      	movs	r0, #0
 8009804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009806:	bf00      	nop
 8009808:	48000400 	.word	0x48000400
 800980c:	0800bbf8 	.word	0x0800bbf8

08009810 <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8009810:	4b03      	ldr	r3, [pc, #12]	; (8009820 <RCC_GetHCLKClockFreq+0x10>)
 8009812:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8009814:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009818:	4a02      	ldr	r2, [pc, #8]	; (8009824 <RCC_GetHCLKClockFreq+0x14>)
 800981a:	5cd3      	ldrb	r3, [r2, r3]
}
 800981c:	40d8      	lsrs	r0, r3
 800981e:	4770      	bx	lr
 8009820:	40021000 	.word	0x40021000
 8009824:	0800b558 	.word	0x0800b558

08009828 <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8009828:	4b03      	ldr	r3, [pc, #12]	; (8009838 <RCC_GetPCLK1ClockFreq+0x10>)
 800982a:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800982c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009830:	4a02      	ldr	r2, [pc, #8]	; (800983c <RCC_GetPCLK1ClockFreq+0x14>)
 8009832:	5cd3      	ldrb	r3, [r2, r3]
}
 8009834:	40d8      	lsrs	r0, r3
 8009836:	4770      	bx	lr
 8009838:	40021000 	.word	0x40021000
 800983c:	0800b568 	.word	0x0800b568

08009840 <RCC_GetPCLK2ClockFreq>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8009840:	4b03      	ldr	r3, [pc, #12]	; (8009850 <RCC_GetPCLK2ClockFreq+0x10>)
 8009842:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8009844:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8009848:	4a02      	ldr	r2, [pc, #8]	; (8009854 <RCC_GetPCLK2ClockFreq+0x14>)
 800984a:	5cd3      	ldrb	r3, [r2, r3]
}
 800984c:	40d8      	lsrs	r0, r3
 800984e:	4770      	bx	lr
 8009850:	40021000 	.word	0x40021000
 8009854:	0800b568 	.word	0x0800b568

08009858 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8009858:	4b3a      	ldr	r3, [pc, #232]	; (8009944 <RCC_PLL_GetFreqDomain_SYS+0xec>)
 800985a:	68db      	ldr	r3, [r3, #12]
 800985c:	f003 0303 	and.w	r3, r3, #3
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8009860:	2b02      	cmp	r3, #2
 8009862:	d057      	beq.n	8009914 <RCC_PLL_GetFreqDomain_SYS+0xbc>
 8009864:	2b03      	cmp	r3, #3
 8009866:	d057      	beq.n	8009918 <RCC_PLL_GetFreqDomain_SYS+0xc0>
 8009868:	2b01      	cmp	r3, #1
 800986a:	d012      	beq.n	8009892 <RCC_PLL_GetFreqDomain_SYS+0x3a>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 800986c:	4b35      	ldr	r3, [pc, #212]	; (8009944 <RCC_PLL_GetFreqDomain_SYS+0xec>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f013 0308 	ands.w	r3, r3, #8
 8009874:	d137      	bne.n	80098e6 <RCC_PLL_GetFreqDomain_SYS+0x8e>
 8009876:	4a33      	ldr	r2, [pc, #204]	; (8009944 <RCC_PLL_GetFreqDomain_SYS+0xec>)
 8009878:	6812      	ldr	r2, [r2, #0]
 800987a:	f012 0f08 	tst.w	r2, #8
 800987e:	d141      	bne.n	8009904 <RCC_PLL_GetFreqDomain_SYS+0xac>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8009880:	4b30      	ldr	r3, [pc, #192]	; (8009944 <RCC_PLL_GetFreqDomain_SYS+0xec>)
 8009882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
      break;

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8009886:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800988a:	4a2f      	ldr	r2, [pc, #188]	; (8009948 <RCC_PLL_GetFreqDomain_SYS+0xf0>)
 800988c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009890:	e043      	b.n	800991a <RCC_PLL_GetFreqDomain_SYS+0xc2>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8009892:	4b2c      	ldr	r3, [pc, #176]	; (8009944 <RCC_PLL_GetFreqDomain_SYS+0xec>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f013 0308 	ands.w	r3, r3, #8
 800989a:	d00e      	beq.n	80098ba <RCC_PLL_GetFreqDomain_SYS+0x62>
 800989c:	4b29      	ldr	r3, [pc, #164]	; (8009944 <RCC_PLL_GetFreqDomain_SYS+0xec>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f013 0f08 	tst.w	r3, #8
 80098a4:	d11a      	bne.n	80098dc <RCC_PLL_GetFreqDomain_SYS+0x84>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80098a6:	4b27      	ldr	r3, [pc, #156]	; (8009944 <RCC_PLL_GetFreqDomain_SYS+0xec>)
 80098a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80098ac:	091b      	lsrs	r3, r3, #4
 80098ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80098b2:	4a25      	ldr	r2, [pc, #148]	; (8009948 <RCC_PLL_GetFreqDomain_SYS+0xf0>)
 80098b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098b8:	e02f      	b.n	800991a <RCC_PLL_GetFreqDomain_SYS+0xc2>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 80098ba:	4a22      	ldr	r2, [pc, #136]	; (8009944 <RCC_PLL_GetFreqDomain_SYS+0xec>)
 80098bc:	6812      	ldr	r2, [r2, #0]
 80098be:	f012 0f08 	tst.w	r2, #8
 80098c2:	d108      	bne.n	80098d6 <RCC_PLL_GetFreqDomain_SYS+0x7e>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80098c4:	4b1f      	ldr	r3, [pc, #124]	; (8009944 <RCC_PLL_GetFreqDomain_SYS+0xec>)
 80098c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80098ca:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80098ce:	4a1e      	ldr	r2, [pc, #120]	; (8009948 <RCC_PLL_GetFreqDomain_SYS+0xf0>)
 80098d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098d4:	e021      	b.n	800991a <RCC_PLL_GetFreqDomain_SYS+0xc2>
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80098d6:	4a1b      	ldr	r2, [pc, #108]	; (8009944 <RCC_PLL_GetFreqDomain_SYS+0xec>)
 80098d8:	6812      	ldr	r2, [r2, #0]
 80098da:	e7f8      	b.n	80098ce <RCC_PLL_GetFreqDomain_SYS+0x76>
 80098dc:	4b19      	ldr	r3, [pc, #100]	; (8009944 <RCC_PLL_GetFreqDomain_SYS+0xec>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80098e4:	e7e5      	b.n	80098b2 <RCC_PLL_GetFreqDomain_SYS+0x5a>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 80098e6:	4b17      	ldr	r3, [pc, #92]	; (8009944 <RCC_PLL_GetFreqDomain_SYS+0xec>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f013 0f08 	tst.w	r3, #8
 80098ee:	d10c      	bne.n	800990a <RCC_PLL_GetFreqDomain_SYS+0xb2>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80098f0:	4b14      	ldr	r3, [pc, #80]	; (8009944 <RCC_PLL_GetFreqDomain_SYS+0xec>)
 80098f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80098f6:	091b      	lsrs	r3, r3, #4
 80098f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80098fc:	4a12      	ldr	r2, [pc, #72]	; (8009948 <RCC_PLL_GetFreqDomain_SYS+0xf0>)
 80098fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009902:	e00a      	b.n	800991a <RCC_PLL_GetFreqDomain_SYS+0xc2>
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8009904:	4a0f      	ldr	r2, [pc, #60]	; (8009944 <RCC_PLL_GetFreqDomain_SYS+0xec>)
 8009906:	6812      	ldr	r2, [r2, #0]
 8009908:	e7bf      	b.n	800988a <RCC_PLL_GetFreqDomain_SYS+0x32>
 800990a:	4b0e      	ldr	r3, [pc, #56]	; (8009944 <RCC_PLL_GetFreqDomain_SYS+0xec>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009912:	e7f3      	b.n	80098fc <RCC_PLL_GetFreqDomain_SYS+0xa4>
  switch (pllsource)
 8009914:	4b0d      	ldr	r3, [pc, #52]	; (800994c <RCC_PLL_GetFreqDomain_SYS+0xf4>)
 8009916:	e000      	b.n	800991a <RCC_PLL_GetFreqDomain_SYS+0xc2>
      pllinputfreq = HSE_VALUE;
 8009918:	4b0d      	ldr	r3, [pc, #52]	; (8009950 <RCC_PLL_GetFreqDomain_SYS+0xf8>)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800991a:	4a0a      	ldr	r2, [pc, #40]	; (8009944 <RCC_PLL_GetFreqDomain_SYS+0xec>)
 800991c:	68d0      	ldr	r0, [r2, #12]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800991e:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8009922:	3001      	adds	r0, #1
 8009924:	fbb3 f3f0 	udiv	r3, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8009928:	68d0      	ldr	r0, [r2, #12]
 800992a:	f3c0 2006 	ubfx	r0, r0, #8, #7
 800992e:	fb00 f003 	mul.w	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8009932:	68d3      	ldr	r3, [r2, #12]
 8009934:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8009938:	3301      	adds	r3, #1
 800993a:	005b      	lsls	r3, r3, #1
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800993c:	fbb0 f0f3 	udiv	r0, r0, r3
 8009940:	4770      	bx	lr
 8009942:	bf00      	nop
 8009944:	40021000 	.word	0x40021000
 8009948:	0800b528 	.word	0x0800b528
 800994c:	00f42400 	.word	0x00f42400
 8009950:	007a1200 	.word	0x007a1200

08009954 <RCC_GetSystemClockFreq>:
{
 8009954:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009956:	4b35      	ldr	r3, [pc, #212]	; (8009a2c <RCC_GetSystemClockFreq+0xd8>)
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	f003 030c 	and.w	r3, r3, #12
 800995e:	2b0c      	cmp	r3, #12
 8009960:	d837      	bhi.n	80099d2 <RCC_GetSystemClockFreq+0x7e>
 8009962:	e8df f003 	tbb	[pc, r3]
 8009966:	3609      	.short	0x3609
 8009968:	36073636 	.word	0x36073636
 800996c:	36603636 	.word	0x36603636
 8009970:	3636      	.short	0x3636
 8009972:	33          	.byte	0x33
 8009973:	00          	.byte	0x00
 8009974:	482e      	ldr	r0, [pc, #184]	; (8009a30 <RCC_GetSystemClockFreq+0xdc>)
 8009976:	e02b      	b.n	80099d0 <RCC_GetSystemClockFreq+0x7c>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8009978:	4b2c      	ldr	r3, [pc, #176]	; (8009a2c <RCC_GetSystemClockFreq+0xd8>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f013 0308 	ands.w	r3, r3, #8
 8009980:	d00e      	beq.n	80099a0 <RCC_GetSystemClockFreq+0x4c>
 8009982:	4b2a      	ldr	r3, [pc, #168]	; (8009a2c <RCC_GetSystemClockFreq+0xd8>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f013 0f08 	tst.w	r3, #8
 800998a:	d11a      	bne.n	80099c2 <RCC_GetSystemClockFreq+0x6e>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800998c:	4b27      	ldr	r3, [pc, #156]	; (8009a2c <RCC_GetSystemClockFreq+0xd8>)
 800998e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8009992:	091b      	lsrs	r3, r3, #4
 8009994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009998:	4a26      	ldr	r2, [pc, #152]	; (8009a34 <RCC_GetSystemClockFreq+0xe0>)
 800999a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800999e:	e017      	b.n	80099d0 <RCC_GetSystemClockFreq+0x7c>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 80099a0:	4a22      	ldr	r2, [pc, #136]	; (8009a2c <RCC_GetSystemClockFreq+0xd8>)
 80099a2:	6812      	ldr	r2, [r2, #0]
 80099a4:	f012 0f08 	tst.w	r2, #8
 80099a8:	d108      	bne.n	80099bc <RCC_GetSystemClockFreq+0x68>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80099aa:	4b20      	ldr	r3, [pc, #128]	; (8009a2c <RCC_GetSystemClockFreq+0xd8>)
 80099ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80099b0:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80099b4:	4a1f      	ldr	r2, [pc, #124]	; (8009a34 <RCC_GetSystemClockFreq+0xe0>)
 80099b6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80099ba:	e009      	b.n	80099d0 <RCC_GetSystemClockFreq+0x7c>
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80099bc:	4a1b      	ldr	r2, [pc, #108]	; (8009a2c <RCC_GetSystemClockFreq+0xd8>)
 80099be:	6812      	ldr	r2, [r2, #0]
 80099c0:	e7f8      	b.n	80099b4 <RCC_GetSystemClockFreq+0x60>
 80099c2:	4b1a      	ldr	r3, [pc, #104]	; (8009a2c <RCC_GetSystemClockFreq+0xd8>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80099ca:	e7e5      	b.n	8009998 <RCC_GetSystemClockFreq+0x44>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80099cc:	f7ff ff44 	bl	8009858 <RCC_PLL_GetFreqDomain_SYS>
}
 80099d0:	bd08      	pop	{r3, pc}
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 80099d2:	4b16      	ldr	r3, [pc, #88]	; (8009a2c <RCC_GetSystemClockFreq+0xd8>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f013 0308 	ands.w	r3, r3, #8
 80099da:	d10d      	bne.n	80099f8 <RCC_GetSystemClockFreq+0xa4>
 80099dc:	4a13      	ldr	r2, [pc, #76]	; (8009a2c <RCC_GetSystemClockFreq+0xd8>)
 80099de:	6812      	ldr	r2, [r2, #0]
 80099e0:	f012 0f08 	tst.w	r2, #8
 80099e4:	d117      	bne.n	8009a16 <RCC_GetSystemClockFreq+0xc2>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80099e6:	4b11      	ldr	r3, [pc, #68]	; (8009a2c <RCC_GetSystemClockFreq+0xd8>)
 80099e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80099ec:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80099f0:	4a10      	ldr	r2, [pc, #64]	; (8009a34 <RCC_GetSystemClockFreq+0xe0>)
 80099f2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80099f6:	e7eb      	b.n	80099d0 <RCC_GetSystemClockFreq+0x7c>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 80099f8:	4b0c      	ldr	r3, [pc, #48]	; (8009a2c <RCC_GetSystemClockFreq+0xd8>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f013 0f08 	tst.w	r3, #8
 8009a00:	d10c      	bne.n	8009a1c <RCC_GetSystemClockFreq+0xc8>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8009a02:	4b0a      	ldr	r3, [pc, #40]	; (8009a2c <RCC_GetSystemClockFreq+0xd8>)
 8009a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a08:	091b      	lsrs	r3, r3, #4
 8009a0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a0e:	4a09      	ldr	r2, [pc, #36]	; (8009a34 <RCC_GetSystemClockFreq+0xe0>)
 8009a10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009a14:	e7dc      	b.n	80099d0 <RCC_GetSystemClockFreq+0x7c>
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8009a16:	4a05      	ldr	r2, [pc, #20]	; (8009a2c <RCC_GetSystemClockFreq+0xd8>)
 8009a18:	6812      	ldr	r2, [r2, #0]
 8009a1a:	e7e9      	b.n	80099f0 <RCC_GetSystemClockFreq+0x9c>
 8009a1c:	4b03      	ldr	r3, [pc, #12]	; (8009a2c <RCC_GetSystemClockFreq+0xd8>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009a24:	e7f3      	b.n	8009a0e <RCC_GetSystemClockFreq+0xba>
      frequency = HSE_VALUE;
 8009a26:	4804      	ldr	r0, [pc, #16]	; (8009a38 <RCC_GetSystemClockFreq+0xe4>)
  return frequency;
 8009a28:	e7d2      	b.n	80099d0 <RCC_GetSystemClockFreq+0x7c>
 8009a2a:	bf00      	nop
 8009a2c:	40021000 	.word	0x40021000
 8009a30:	00f42400 	.word	0x00f42400
 8009a34:	0800b528 	.word	0x0800b528
 8009a38:	007a1200 	.word	0x007a1200

08009a3c <LL_RCC_GetUSARTClockFreq>:
{
 8009a3c:	b510      	push	{r4, lr}
 8009a3e:	4604      	mov	r4, r0
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
 8009a40:	2803      	cmp	r0, #3
 8009a42:	d003      	beq.n	8009a4c <LL_RCC_GetUSARTClockFreq+0x10>
 8009a44:	280c      	cmp	r0, #12
 8009a46:	d001      	beq.n	8009a4c <LL_RCC_GetUSARTClockFreq+0x10>
 8009a48:	2830      	cmp	r0, #48	; 0x30
 8009a4a:	d107      	bne.n	8009a5c <LL_RCC_GetUSARTClockFreq+0x20>
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8009a4c:	2c03      	cmp	r4, #3
 8009a4e:	d00b      	beq.n	8009a68 <LL_RCC_GetUSARTClockFreq+0x2c>
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8009a50:	2c0c      	cmp	r4, #12
 8009a52:	d031      	beq.n	8009ab8 <LL_RCC_GetUSARTClockFreq+0x7c>
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8009a54:	2c30      	cmp	r4, #48	; 0x30
 8009a56:	d05c      	beq.n	8009b12 <LL_RCC_GetUSARTClockFreq+0xd6>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8009a58:	2000      	movs	r0, #0
}
 8009a5a:	bd10      	pop	{r4, pc}
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
 8009a5c:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8009a60:	4847      	ldr	r0, [pc, #284]	; (8009b80 <LL_RCC_GetUSARTClockFreq+0x144>)
 8009a62:	f7f8 fe7b 	bl	800275c <assert_failed>
 8009a66:	e7f1      	b.n	8009a4c <LL_RCC_GetUSARTClockFreq+0x10>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8009a68:	4b46      	ldr	r3, [pc, #280]	; (8009b84 <LL_RCC_GetUSARTClockFreq+0x148>)
 8009a6a:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8009a6e:	4020      	ands	r0, r4
 8009a70:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8009a74:	f5a4 3440 	sub.w	r4, r4, #196608	; 0x30000
 8009a78:	2c03      	cmp	r4, #3
 8009a7a:	d87c      	bhi.n	8009b76 <LL_RCC_GetUSARTClockFreq+0x13a>
 8009a7c:	e8df f004 	tbb	[pc, r4]
 8009a80:	0c050215 	.word	0x0c050215
        usart_frequency = RCC_GetSystemClockFreq();
 8009a84:	f7ff ff66 	bl	8009954 <RCC_GetSystemClockFreq>
        break;
 8009a88:	e7e7      	b.n	8009a5a <LL_RCC_GetUSARTClockFreq+0x1e>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8009a8a:	4b3e      	ldr	r3, [pc, #248]	; (8009b84 <LL_RCC_GetUSARTClockFreq+0x148>)
 8009a8c:	6818      	ldr	r0, [r3, #0]
 8009a8e:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8009a92:	d0e2      	beq.n	8009a5a <LL_RCC_GetUSARTClockFreq+0x1e>
          usart_frequency = HSI_VALUE;
 8009a94:	483c      	ldr	r0, [pc, #240]	; (8009b88 <LL_RCC_GetUSARTClockFreq+0x14c>)
 8009a96:	e7e0      	b.n	8009a5a <LL_RCC_GetUSARTClockFreq+0x1e>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8009a98:	4b3a      	ldr	r3, [pc, #232]	; (8009b84 <LL_RCC_GetUSARTClockFreq+0x148>)
 8009a9a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8009a9e:	f010 0002 	ands.w	r0, r0, #2
 8009aa2:	d0da      	beq.n	8009a5a <LL_RCC_GetUSARTClockFreq+0x1e>
          usart_frequency = LSE_VALUE;
 8009aa4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009aa8:	e7d7      	b.n	8009a5a <LL_RCC_GetUSARTClockFreq+0x1e>
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8009aaa:	f7ff ff53 	bl	8009954 <RCC_GetSystemClockFreq>
 8009aae:	f7ff feaf 	bl	8009810 <RCC_GetHCLKClockFreq>
 8009ab2:	f7ff fec5 	bl	8009840 <RCC_GetPCLK2ClockFreq>
        break;
 8009ab6:	e7d0      	b.n	8009a5a <LL_RCC_GetUSARTClockFreq+0x1e>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8009ab8:	4b32      	ldr	r3, [pc, #200]	; (8009b84 <LL_RCC_GetUSARTClockFreq+0x148>)
 8009aba:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8009abe:	4020      	ands	r0, r4
 8009ac0:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8009ac4:	f5a4 2440 	sub.w	r4, r4, #786432	; 0xc0000
 8009ac8:	2c0c      	cmp	r4, #12
 8009aca:	d856      	bhi.n	8009b7a <LL_RCC_GetUSARTClockFreq+0x13e>
 8009acc:	e8df f004 	tbb	[pc, r4]
 8009ad0:	5555551a 	.word	0x5555551a
 8009ad4:	55555507 	.word	0x55555507
 8009ad8:	5555550a 	.word	0x5555550a
 8009adc:	11          	.byte	0x11
 8009add:	00          	.byte	0x00
        usart_frequency = RCC_GetSystemClockFreq();
 8009ade:	f7ff ff39 	bl	8009954 <RCC_GetSystemClockFreq>
        break;
 8009ae2:	e7ba      	b.n	8009a5a <LL_RCC_GetUSARTClockFreq+0x1e>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8009ae4:	4b27      	ldr	r3, [pc, #156]	; (8009b84 <LL_RCC_GetUSARTClockFreq+0x148>)
 8009ae6:	6818      	ldr	r0, [r3, #0]
 8009ae8:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8009aec:	d0b5      	beq.n	8009a5a <LL_RCC_GetUSARTClockFreq+0x1e>
          usart_frequency = HSI_VALUE;
 8009aee:	4826      	ldr	r0, [pc, #152]	; (8009b88 <LL_RCC_GetUSARTClockFreq+0x14c>)
 8009af0:	e7b3      	b.n	8009a5a <LL_RCC_GetUSARTClockFreq+0x1e>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8009af2:	4b24      	ldr	r3, [pc, #144]	; (8009b84 <LL_RCC_GetUSARTClockFreq+0x148>)
 8009af4:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8009af8:	f010 0002 	ands.w	r0, r0, #2
 8009afc:	d0ad      	beq.n	8009a5a <LL_RCC_GetUSARTClockFreq+0x1e>
          usart_frequency = LSE_VALUE;
 8009afe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009b02:	e7aa      	b.n	8009a5a <LL_RCC_GetUSARTClockFreq+0x1e>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8009b04:	f7ff ff26 	bl	8009954 <RCC_GetSystemClockFreq>
 8009b08:	f7ff fe82 	bl	8009810 <RCC_GetHCLKClockFreq>
 8009b0c:	f7ff fe8c 	bl	8009828 <RCC_GetPCLK1ClockFreq>
        break;
 8009b10:	e7a3      	b.n	8009a5a <LL_RCC_GetUSARTClockFreq+0x1e>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8009b12:	4b1c      	ldr	r3, [pc, #112]	; (8009b84 <LL_RCC_GetUSARTClockFreq+0x148>)
 8009b14:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8009b18:	4020      	ands	r0, r4
 8009b1a:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8009b1e:	4b1b      	ldr	r3, [pc, #108]	; (8009b8c <LL_RCC_GetUSARTClockFreq+0x150>)
 8009b20:	429c      	cmp	r4, r3
 8009b22:	d019      	beq.n	8009b58 <LL_RCC_GetUSARTClockFreq+0x11c>
 8009b24:	d80a      	bhi.n	8009b3c <LL_RCC_GetUSARTClockFreq+0x100>
 8009b26:	f5b4 1f40 	cmp.w	r4, #3145728	; 0x300000
 8009b2a:	d01d      	beq.n	8009b68 <LL_RCC_GetUSARTClockFreq+0x12c>
 8009b2c:	3b10      	subs	r3, #16
 8009b2e:	429c      	cmp	r4, r3
 8009b30:	d102      	bne.n	8009b38 <LL_RCC_GetUSARTClockFreq+0xfc>
          usart_frequency = RCC_GetSystemClockFreq();
 8009b32:	f7ff ff0f 	bl	8009954 <RCC_GetSystemClockFreq>
          break;
 8009b36:	e790      	b.n	8009a5a <LL_RCC_GetUSARTClockFreq+0x1e>
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8009b38:	2000      	movs	r0, #0
 8009b3a:	e78e      	b.n	8009a5a <LL_RCC_GetUSARTClockFreq+0x1e>
 8009b3c:	f1b4 1f30 	cmp.w	r4, #3145776	; 0x300030
 8009b40:	d108      	bne.n	8009b54 <LL_RCC_GetUSARTClockFreq+0x118>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8009b42:	4b10      	ldr	r3, [pc, #64]	; (8009b84 <LL_RCC_GetUSARTClockFreq+0x148>)
 8009b44:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8009b48:	f010 0002 	ands.w	r0, r0, #2
 8009b4c:	d085      	beq.n	8009a5a <LL_RCC_GetUSARTClockFreq+0x1e>
            usart_frequency = LSE_VALUE;
 8009b4e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  return usart_frequency;
 8009b52:	e782      	b.n	8009a5a <LL_RCC_GetUSARTClockFreq+0x1e>
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8009b54:	2000      	movs	r0, #0
 8009b56:	e780      	b.n	8009a5a <LL_RCC_GetUSARTClockFreq+0x1e>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8009b58:	4b0a      	ldr	r3, [pc, #40]	; (8009b84 <LL_RCC_GetUSARTClockFreq+0x148>)
 8009b5a:	6818      	ldr	r0, [r3, #0]
 8009b5c:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8009b60:	f43f af7b 	beq.w	8009a5a <LL_RCC_GetUSARTClockFreq+0x1e>
            usart_frequency = HSI_VALUE;
 8009b64:	4808      	ldr	r0, [pc, #32]	; (8009b88 <LL_RCC_GetUSARTClockFreq+0x14c>)
 8009b66:	e778      	b.n	8009a5a <LL_RCC_GetUSARTClockFreq+0x1e>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8009b68:	f7ff fef4 	bl	8009954 <RCC_GetSystemClockFreq>
 8009b6c:	f7ff fe50 	bl	8009810 <RCC_GetHCLKClockFreq>
 8009b70:	f7ff fe5a 	bl	8009828 <RCC_GetPCLK1ClockFreq>
          break;
 8009b74:	e771      	b.n	8009a5a <LL_RCC_GetUSARTClockFreq+0x1e>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8009b76:	2000      	movs	r0, #0
 8009b78:	e76f      	b.n	8009a5a <LL_RCC_GetUSARTClockFreq+0x1e>
 8009b7a:	2000      	movs	r0, #0
 8009b7c:	e76d      	b.n	8009a5a <LL_RCC_GetUSARTClockFreq+0x1e>
 8009b7e:	bf00      	nop
 8009b80:	0800bc30 	.word	0x0800bc30
 8009b84:	40021000 	.word	0x40021000
 8009b88:	00f42400 	.word	0x00f42400
 8009b8c:	00300020 	.word	0x00300020

08009b90 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8009b90:	b538      	push	{r3, r4, r5, lr}
 8009b92:	4605      	mov	r5, r0
 8009b94:	460c      	mov	r4, r1
  ErrorStatus status = ERROR;
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(USARTx));
 8009b96:	4b63      	ldr	r3, [pc, #396]	; (8009d24 <LL_USART_Init+0x194>)
 8009b98:	4298      	cmp	r0, r3
 8009b9a:	d00b      	beq.n	8009bb4 <LL_USART_Init+0x24>
 8009b9c:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8009ba0:	4298      	cmp	r0, r3
 8009ba2:	d007      	beq.n	8009bb4 <LL_USART_Init+0x24>
 8009ba4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ba8:	4298      	cmp	r0, r3
 8009baa:	d003      	beq.n	8009bb4 <LL_USART_Init+0x24>
 8009bac:	21d7      	movs	r1, #215	; 0xd7
 8009bae:	485e      	ldr	r0, [pc, #376]	; (8009d28 <LL_USART_Init+0x198>)
 8009bb0:	f7f8 fdd4 	bl	800275c <assert_failed>
#if defined(USART_PRESC_PRESCALER)
  assert_param(IS_LL_USART_PRESCALER(USART_InitStruct->PrescalerValue));
#endif /* USART_PRESC_PRESCALER */
  assert_param(IS_LL_USART_BAUDRATE(USART_InitStruct->BaudRate));
 8009bb4:	6822      	ldr	r2, [r4, #0]
 8009bb6:	4b5d      	ldr	r3, [pc, #372]	; (8009d2c <LL_USART_Init+0x19c>)
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d859      	bhi.n	8009c70 <LL_USART_Init+0xe0>
  assert_param(IS_LL_USART_DATAWIDTH(USART_InitStruct->DataWidth));
 8009bbc:	6863      	ldr	r3, [r4, #4]
 8009bbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bc2:	d003      	beq.n	8009bcc <LL_USART_Init+0x3c>
 8009bc4:	b113      	cbz	r3, 8009bcc <LL_USART_Init+0x3c>
 8009bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bca:	d156      	bne.n	8009c7a <LL_USART_Init+0xea>
  assert_param(IS_LL_USART_STOPBITS(USART_InitStruct->StopBits));
 8009bcc:	68a3      	ldr	r3, [r4, #8]
 8009bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bd2:	d006      	beq.n	8009be2 <LL_USART_Init+0x52>
 8009bd4:	b12b      	cbz	r3, 8009be2 <LL_USART_Init+0x52>
 8009bd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009bda:	d002      	beq.n	8009be2 <LL_USART_Init+0x52>
 8009bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009be0:	d150      	bne.n	8009c84 <LL_USART_Init+0xf4>
  assert_param(IS_LL_USART_PARITY(USART_InitStruct->Parity));
 8009be2:	68e3      	ldr	r3, [r4, #12]
 8009be4:	b12b      	cbz	r3, 8009bf2 <LL_USART_Init+0x62>
 8009be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bea:	d002      	beq.n	8009bf2 <LL_USART_Init+0x62>
 8009bec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009bf0:	d14d      	bne.n	8009c8e <LL_USART_Init+0xfe>
  assert_param(IS_LL_USART_DIRECTION(USART_InitStruct->TransferDirection));
 8009bf2:	6923      	ldr	r3, [r4, #16]
 8009bf4:	b12b      	cbz	r3, 8009c02 <LL_USART_Init+0x72>
 8009bf6:	2b04      	cmp	r3, #4
 8009bf8:	d003      	beq.n	8009c02 <LL_USART_Init+0x72>
 8009bfa:	2b08      	cmp	r3, #8
 8009bfc:	d001      	beq.n	8009c02 <LL_USART_Init+0x72>
 8009bfe:	2b0c      	cmp	r3, #12
 8009c00:	d14a      	bne.n	8009c98 <LL_USART_Init+0x108>
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
 8009c02:	6963      	ldr	r3, [r4, #20]
 8009c04:	b143      	cbz	r3, 8009c18 <LL_USART_Init+0x88>
 8009c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c0a:	d005      	beq.n	8009c18 <LL_USART_Init+0x88>
 8009c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c10:	d002      	beq.n	8009c18 <LL_USART_Init+0x88>
 8009c12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c16:	d144      	bne.n	8009ca2 <LL_USART_Init+0x112>
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
 8009c18:	69a3      	ldr	r3, [r4, #24]
 8009c1a:	b113      	cbz	r3, 8009c22 <LL_USART_Init+0x92>
 8009c1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c20:	d144      	bne.n	8009cac <LL_USART_Init+0x11c>
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8009c22:	682b      	ldr	r3, [r5, #0]
 8009c24:	f013 0f01 	tst.w	r3, #1
 8009c28:	d176      	bne.n	8009d18 <LL_USART_Init+0x188>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8009c2a:	682b      	ldr	r3, [r5, #0]
 8009c2c:	4a40      	ldr	r2, [pc, #256]	; (8009d30 <LL_USART_Init+0x1a0>)
 8009c2e:	401a      	ands	r2, r3
 8009c30:	6863      	ldr	r3, [r4, #4]
 8009c32:	68e1      	ldr	r1, [r4, #12]
 8009c34:	430b      	orrs	r3, r1
 8009c36:	6921      	ldr	r1, [r4, #16]
 8009c38:	430b      	orrs	r3, r1
 8009c3a:	69a1      	ldr	r1, [r4, #24]
 8009c3c:	430b      	orrs	r3, r1
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	602b      	str	r3, [r5, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8009c42:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8009c44:	686a      	ldr	r2, [r5, #4]
 8009c46:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	606b      	str	r3, [r5, #4]
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8009c4e:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8009c50:	68aa      	ldr	r2, [r5, #8]
 8009c52:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009c56:	4313      	orrs	r3, r2
 8009c58:	60ab      	str	r3, [r5, #8]

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8009c5a:	4b32      	ldr	r3, [pc, #200]	; (8009d24 <LL_USART_Init+0x194>)
 8009c5c:	429d      	cmp	r5, r3
 8009c5e:	d02a      	beq.n	8009cb6 <LL_USART_Init+0x126>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
    }
    else if (USARTx == USART2)
 8009c60:	4b34      	ldr	r3, [pc, #208]	; (8009d34 <LL_USART_Init+0x1a4>)
 8009c62:	429d      	cmp	r5, r3
 8009c64:	d03c      	beq.n	8009ce0 <LL_USART_Init+0x150>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8009c66:	4b34      	ldr	r3, [pc, #208]	; (8009d38 <LL_USART_Init+0x1a8>)
 8009c68:	429d      	cmp	r5, r3
 8009c6a:	d03d      	beq.n	8009ce8 <LL_USART_Init+0x158>
  ErrorStatus status = ERROR;
 8009c6c:	2001      	movs	r0, #1
 8009c6e:	e054      	b.n	8009d1a <LL_USART_Init+0x18a>
  assert_param(IS_LL_USART_BAUDRATE(USART_InitStruct->BaudRate));
 8009c70:	21db      	movs	r1, #219	; 0xdb
 8009c72:	482d      	ldr	r0, [pc, #180]	; (8009d28 <LL_USART_Init+0x198>)
 8009c74:	f7f8 fd72 	bl	800275c <assert_failed>
 8009c78:	e7a0      	b.n	8009bbc <LL_USART_Init+0x2c>
  assert_param(IS_LL_USART_DATAWIDTH(USART_InitStruct->DataWidth));
 8009c7a:	21dc      	movs	r1, #220	; 0xdc
 8009c7c:	482a      	ldr	r0, [pc, #168]	; (8009d28 <LL_USART_Init+0x198>)
 8009c7e:	f7f8 fd6d 	bl	800275c <assert_failed>
 8009c82:	e7a3      	b.n	8009bcc <LL_USART_Init+0x3c>
  assert_param(IS_LL_USART_STOPBITS(USART_InitStruct->StopBits));
 8009c84:	21dd      	movs	r1, #221	; 0xdd
 8009c86:	4828      	ldr	r0, [pc, #160]	; (8009d28 <LL_USART_Init+0x198>)
 8009c88:	f7f8 fd68 	bl	800275c <assert_failed>
 8009c8c:	e7a9      	b.n	8009be2 <LL_USART_Init+0x52>
  assert_param(IS_LL_USART_PARITY(USART_InitStruct->Parity));
 8009c8e:	21de      	movs	r1, #222	; 0xde
 8009c90:	4825      	ldr	r0, [pc, #148]	; (8009d28 <LL_USART_Init+0x198>)
 8009c92:	f7f8 fd63 	bl	800275c <assert_failed>
 8009c96:	e7ac      	b.n	8009bf2 <LL_USART_Init+0x62>
  assert_param(IS_LL_USART_DIRECTION(USART_InitStruct->TransferDirection));
 8009c98:	21df      	movs	r1, #223	; 0xdf
 8009c9a:	4823      	ldr	r0, [pc, #140]	; (8009d28 <LL_USART_Init+0x198>)
 8009c9c:	f7f8 fd5e 	bl	800275c <assert_failed>
 8009ca0:	e7af      	b.n	8009c02 <LL_USART_Init+0x72>
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
 8009ca2:	21e0      	movs	r1, #224	; 0xe0
 8009ca4:	4820      	ldr	r0, [pc, #128]	; (8009d28 <LL_USART_Init+0x198>)
 8009ca6:	f7f8 fd59 	bl	800275c <assert_failed>
 8009caa:	e7b5      	b.n	8009c18 <LL_USART_Init+0x88>
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
 8009cac:	21e1      	movs	r1, #225	; 0xe1
 8009cae:	481e      	ldr	r0, [pc, #120]	; (8009d28 <LL_USART_Init+0x198>)
 8009cb0:	f7f8 fd54 	bl	800275c <assert_failed>
 8009cb4:	e7b5      	b.n	8009c22 <LL_USART_Init+0x92>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8009cb6:	2003      	movs	r0, #3
 8009cb8:	f7ff fec0 	bl	8009a3c <LL_RCC_GetUSARTClockFreq>
       - prescaler value is required
#endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8009cbc:	b370      	cbz	r0, 8009d1c <LL_USART_Init+0x18c>
        && (USART_InitStruct->BaudRate != 0U))
 8009cbe:	6823      	ldr	r3, [r4, #0]
 8009cc0:	b373      	cbz	r3, 8009d20 <LL_USART_Init+0x190>
    {
      status = SUCCESS;
      LL_USART_SetBaudRate(USARTx,
 8009cc2:	69a2      	ldr	r2, [r4, #24]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8009cc4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009cc8:	d012      	beq.n	8009cf0 <LL_USART_Init+0x160>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8009cca:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8009cce:	fbb0 f3f3 	udiv	r3, r0, r3
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	60eb      	str	r3, [r5, #12]
#endif /* USART_PRESC_PRESCALER */
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);

      /* Check BRR is greater than or equal to 16d */
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
 8009cd6:	68eb      	ldr	r3, [r5, #12]
 8009cd8:	2b0f      	cmp	r3, #15
 8009cda:	d916      	bls.n	8009d0a <LL_USART_Init+0x17a>
      status = SUCCESS;
 8009cdc:	2000      	movs	r0, #0
 8009cde:	e01c      	b.n	8009d1a <LL_USART_Init+0x18a>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8009ce0:	200c      	movs	r0, #12
 8009ce2:	f7ff feab 	bl	8009a3c <LL_RCC_GetUSARTClockFreq>
 8009ce6:	e7e9      	b.n	8009cbc <LL_USART_Init+0x12c>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8009ce8:	2030      	movs	r0, #48	; 0x30
 8009cea:	f7ff fea7 	bl	8009a3c <LL_RCC_GetUSARTClockFreq>
 8009cee:	e7e5      	b.n	8009cbc <LL_USART_Init+0x12c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8009cf0:	085a      	lsrs	r2, r3, #1
 8009cf2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8009cf6:	fbb0 f3f3 	udiv	r3, r0, r3
    brrtemp = usartdiv & 0xFFF0U;
 8009cfa:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8009cfe:	401a      	ands	r2, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d00:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8009d04:	4313      	orrs	r3, r2
    USARTx->BRR = brrtemp;
 8009d06:	60eb      	str	r3, [r5, #12]
 8009d08:	e7e5      	b.n	8009cd6 <LL_USART_Init+0x146>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
 8009d0a:	f44f 719c 	mov.w	r1, #312	; 0x138
 8009d0e:	4806      	ldr	r0, [pc, #24]	; (8009d28 <LL_USART_Init+0x198>)
 8009d10:	f7f8 fd24 	bl	800275c <assert_failed>
      status = SUCCESS;
 8009d14:	2000      	movs	r0, #0
 8009d16:	e000      	b.n	8009d1a <LL_USART_Init+0x18a>
  ErrorStatus status = ERROR;
 8009d18:	2001      	movs	r0, #1
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8009d1a:	bd38      	pop	{r3, r4, r5, pc}
  ErrorStatus status = ERROR;
 8009d1c:	2001      	movs	r0, #1
 8009d1e:	e7fc      	b.n	8009d1a <LL_USART_Init+0x18a>
 8009d20:	2001      	movs	r0, #1
 8009d22:	e7fa      	b.n	8009d1a <LL_USART_Init+0x18a>
 8009d24:	40013800 	.word	0x40013800
 8009d28:	0800bc68 	.word	0x0800bc68
 8009d2c:	00989680 	.word	0x00989680
 8009d30:	efff69f3 	.word	0xefff69f3
 8009d34:	40004400 	.word	0x40004400
 8009d38:	40004800 	.word	0x40004800

08009d3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8009d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009d74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8009d40:	f7f9 fe4a 	bl	80039d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8009d44:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8009d46:	e003      	b.n	8009d50 <LoopCopyDataInit>

08009d48 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8009d48:	4b0b      	ldr	r3, [pc, #44]	; (8009d78 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8009d4a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8009d4c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8009d4e:	3104      	adds	r1, #4

08009d50 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8009d50:	480a      	ldr	r0, [pc, #40]	; (8009d7c <LoopForever+0xa>)
	ldr	r3, =_edata
 8009d52:	4b0b      	ldr	r3, [pc, #44]	; (8009d80 <LoopForever+0xe>)
	adds	r2, r0, r1
 8009d54:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8009d56:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8009d58:	d3f6      	bcc.n	8009d48 <CopyDataInit>
	ldr	r2, =_sbss
 8009d5a:	4a0a      	ldr	r2, [pc, #40]	; (8009d84 <LoopForever+0x12>)
	b	LoopFillZerobss
 8009d5c:	e002      	b.n	8009d64 <LoopFillZerobss>

08009d5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8009d5e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8009d60:	f842 3b04 	str.w	r3, [r2], #4

08009d64 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8009d64:	4b08      	ldr	r3, [pc, #32]	; (8009d88 <LoopForever+0x16>)
	cmp	r2, r3
 8009d66:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8009d68:	d3f9      	bcc.n	8009d5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009d6a:	f000 f81b 	bl	8009da4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009d6e:	f7f8 fc53 	bl	8002618 <main>

08009d72 <LoopForever>:

LoopForever:
    b LoopForever
 8009d72:	e7fe      	b.n	8009d72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8009d74:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8009d78:	0800bf28 	.word	0x0800bf28
	ldr	r0, =_sdata
 8009d7c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8009d80:	20001ac8 	.word	0x20001ac8
	ldr	r2, =_sbss
 8009d84:	20001ac8 	.word	0x20001ac8
	ldr	r3, = _ebss
 8009d88:	20004c14 	.word	0x20004c14

08009d8c <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009d8c:	e7fe      	b.n	8009d8c <COMP_IRQHandler>

08009d8e <atoi>:
 8009d8e:	220a      	movs	r2, #10
 8009d90:	2100      	movs	r1, #0
 8009d92:	f000 ba61 	b.w	800a258 <strtol>
	...

08009d98 <__errno>:
 8009d98:	4b01      	ldr	r3, [pc, #4]	; (8009da0 <__errno+0x8>)
 8009d9a:	6818      	ldr	r0, [r3, #0]
 8009d9c:	4770      	bx	lr
 8009d9e:	bf00      	nop
 8009da0:	20001a60 	.word	0x20001a60

08009da4 <__libc_init_array>:
 8009da4:	b570      	push	{r4, r5, r6, lr}
 8009da6:	4d0d      	ldr	r5, [pc, #52]	; (8009ddc <__libc_init_array+0x38>)
 8009da8:	4c0d      	ldr	r4, [pc, #52]	; (8009de0 <__libc_init_array+0x3c>)
 8009daa:	1b64      	subs	r4, r4, r5
 8009dac:	10a4      	asrs	r4, r4, #2
 8009dae:	2600      	movs	r6, #0
 8009db0:	42a6      	cmp	r6, r4
 8009db2:	d109      	bne.n	8009dc8 <__libc_init_array+0x24>
 8009db4:	4d0b      	ldr	r5, [pc, #44]	; (8009de4 <__libc_init_array+0x40>)
 8009db6:	4c0c      	ldr	r4, [pc, #48]	; (8009de8 <__libc_init_array+0x44>)
 8009db8:	f001 fb3e 	bl	800b438 <_init>
 8009dbc:	1b64      	subs	r4, r4, r5
 8009dbe:	10a4      	asrs	r4, r4, #2
 8009dc0:	2600      	movs	r6, #0
 8009dc2:	42a6      	cmp	r6, r4
 8009dc4:	d105      	bne.n	8009dd2 <__libc_init_array+0x2e>
 8009dc6:	bd70      	pop	{r4, r5, r6, pc}
 8009dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dcc:	4798      	blx	r3
 8009dce:	3601      	adds	r6, #1
 8009dd0:	e7ee      	b.n	8009db0 <__libc_init_array+0xc>
 8009dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dd6:	4798      	blx	r3
 8009dd8:	3601      	adds	r6, #1
 8009dda:	e7f2      	b.n	8009dc2 <__libc_init_array+0x1e>
 8009ddc:	0800bf18 	.word	0x0800bf18
 8009de0:	0800bf18 	.word	0x0800bf18
 8009de4:	0800bf18 	.word	0x0800bf18
 8009de8:	0800bf1c 	.word	0x0800bf1c

08009dec <__itoa>:
 8009dec:	1e93      	subs	r3, r2, #2
 8009dee:	2b22      	cmp	r3, #34	; 0x22
 8009df0:	b510      	push	{r4, lr}
 8009df2:	460c      	mov	r4, r1
 8009df4:	d904      	bls.n	8009e00 <__itoa+0x14>
 8009df6:	2300      	movs	r3, #0
 8009df8:	700b      	strb	r3, [r1, #0]
 8009dfa:	461c      	mov	r4, r3
 8009dfc:	4620      	mov	r0, r4
 8009dfe:	bd10      	pop	{r4, pc}
 8009e00:	2a0a      	cmp	r2, #10
 8009e02:	d109      	bne.n	8009e18 <__itoa+0x2c>
 8009e04:	2800      	cmp	r0, #0
 8009e06:	da07      	bge.n	8009e18 <__itoa+0x2c>
 8009e08:	232d      	movs	r3, #45	; 0x2d
 8009e0a:	700b      	strb	r3, [r1, #0]
 8009e0c:	4240      	negs	r0, r0
 8009e0e:	2101      	movs	r1, #1
 8009e10:	4421      	add	r1, r4
 8009e12:	f000 fa2b 	bl	800a26c <__utoa>
 8009e16:	e7f1      	b.n	8009dfc <__itoa+0x10>
 8009e18:	2100      	movs	r1, #0
 8009e1a:	e7f9      	b.n	8009e10 <__itoa+0x24>

08009e1c <itoa>:
 8009e1c:	f7ff bfe6 	b.w	8009dec <__itoa>

08009e20 <malloc>:
 8009e20:	4b02      	ldr	r3, [pc, #8]	; (8009e2c <malloc+0xc>)
 8009e22:	4601      	mov	r1, r0
 8009e24:	6818      	ldr	r0, [r3, #0]
 8009e26:	f000 b871 	b.w	8009f0c <_malloc_r>
 8009e2a:	bf00      	nop
 8009e2c:	20001a60 	.word	0x20001a60

08009e30 <free>:
 8009e30:	4b02      	ldr	r3, [pc, #8]	; (8009e3c <free+0xc>)
 8009e32:	4601      	mov	r1, r0
 8009e34:	6818      	ldr	r0, [r3, #0]
 8009e36:	f000 b819 	b.w	8009e6c <_free_r>
 8009e3a:	bf00      	nop
 8009e3c:	20001a60 	.word	0x20001a60

08009e40 <memcpy>:
 8009e40:	440a      	add	r2, r1
 8009e42:	4291      	cmp	r1, r2
 8009e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e48:	d100      	bne.n	8009e4c <memcpy+0xc>
 8009e4a:	4770      	bx	lr
 8009e4c:	b510      	push	{r4, lr}
 8009e4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e56:	4291      	cmp	r1, r2
 8009e58:	d1f9      	bne.n	8009e4e <memcpy+0xe>
 8009e5a:	bd10      	pop	{r4, pc}

08009e5c <memset>:
 8009e5c:	4402      	add	r2, r0
 8009e5e:	4603      	mov	r3, r0
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d100      	bne.n	8009e66 <memset+0xa>
 8009e64:	4770      	bx	lr
 8009e66:	f803 1b01 	strb.w	r1, [r3], #1
 8009e6a:	e7f9      	b.n	8009e60 <memset+0x4>

08009e6c <_free_r>:
 8009e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e6e:	2900      	cmp	r1, #0
 8009e70:	d048      	beq.n	8009f04 <_free_r+0x98>
 8009e72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e76:	9001      	str	r0, [sp, #4]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f1a1 0404 	sub.w	r4, r1, #4
 8009e7e:	bfb8      	it	lt
 8009e80:	18e4      	addlt	r4, r4, r3
 8009e82:	f000 fa65 	bl	800a350 <__malloc_lock>
 8009e86:	4a20      	ldr	r2, [pc, #128]	; (8009f08 <_free_r+0x9c>)
 8009e88:	9801      	ldr	r0, [sp, #4]
 8009e8a:	6813      	ldr	r3, [r2, #0]
 8009e8c:	4615      	mov	r5, r2
 8009e8e:	b933      	cbnz	r3, 8009e9e <_free_r+0x32>
 8009e90:	6063      	str	r3, [r4, #4]
 8009e92:	6014      	str	r4, [r2, #0]
 8009e94:	b003      	add	sp, #12
 8009e96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e9a:	f000 ba5f 	b.w	800a35c <__malloc_unlock>
 8009e9e:	42a3      	cmp	r3, r4
 8009ea0:	d90b      	bls.n	8009eba <_free_r+0x4e>
 8009ea2:	6821      	ldr	r1, [r4, #0]
 8009ea4:	1862      	adds	r2, r4, r1
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	bf04      	itt	eq
 8009eaa:	681a      	ldreq	r2, [r3, #0]
 8009eac:	685b      	ldreq	r3, [r3, #4]
 8009eae:	6063      	str	r3, [r4, #4]
 8009eb0:	bf04      	itt	eq
 8009eb2:	1852      	addeq	r2, r2, r1
 8009eb4:	6022      	streq	r2, [r4, #0]
 8009eb6:	602c      	str	r4, [r5, #0]
 8009eb8:	e7ec      	b.n	8009e94 <_free_r+0x28>
 8009eba:	461a      	mov	r2, r3
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	b10b      	cbz	r3, 8009ec4 <_free_r+0x58>
 8009ec0:	42a3      	cmp	r3, r4
 8009ec2:	d9fa      	bls.n	8009eba <_free_r+0x4e>
 8009ec4:	6811      	ldr	r1, [r2, #0]
 8009ec6:	1855      	adds	r5, r2, r1
 8009ec8:	42a5      	cmp	r5, r4
 8009eca:	d10b      	bne.n	8009ee4 <_free_r+0x78>
 8009ecc:	6824      	ldr	r4, [r4, #0]
 8009ece:	4421      	add	r1, r4
 8009ed0:	1854      	adds	r4, r2, r1
 8009ed2:	42a3      	cmp	r3, r4
 8009ed4:	6011      	str	r1, [r2, #0]
 8009ed6:	d1dd      	bne.n	8009e94 <_free_r+0x28>
 8009ed8:	681c      	ldr	r4, [r3, #0]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	6053      	str	r3, [r2, #4]
 8009ede:	4421      	add	r1, r4
 8009ee0:	6011      	str	r1, [r2, #0]
 8009ee2:	e7d7      	b.n	8009e94 <_free_r+0x28>
 8009ee4:	d902      	bls.n	8009eec <_free_r+0x80>
 8009ee6:	230c      	movs	r3, #12
 8009ee8:	6003      	str	r3, [r0, #0]
 8009eea:	e7d3      	b.n	8009e94 <_free_r+0x28>
 8009eec:	6825      	ldr	r5, [r4, #0]
 8009eee:	1961      	adds	r1, r4, r5
 8009ef0:	428b      	cmp	r3, r1
 8009ef2:	bf04      	itt	eq
 8009ef4:	6819      	ldreq	r1, [r3, #0]
 8009ef6:	685b      	ldreq	r3, [r3, #4]
 8009ef8:	6063      	str	r3, [r4, #4]
 8009efa:	bf04      	itt	eq
 8009efc:	1949      	addeq	r1, r1, r5
 8009efe:	6021      	streq	r1, [r4, #0]
 8009f00:	6054      	str	r4, [r2, #4]
 8009f02:	e7c7      	b.n	8009e94 <_free_r+0x28>
 8009f04:	b003      	add	sp, #12
 8009f06:	bd30      	pop	{r4, r5, pc}
 8009f08:	20003024 	.word	0x20003024

08009f0c <_malloc_r>:
 8009f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f0e:	1ccd      	adds	r5, r1, #3
 8009f10:	f025 0503 	bic.w	r5, r5, #3
 8009f14:	3508      	adds	r5, #8
 8009f16:	2d0c      	cmp	r5, #12
 8009f18:	bf38      	it	cc
 8009f1a:	250c      	movcc	r5, #12
 8009f1c:	2d00      	cmp	r5, #0
 8009f1e:	4606      	mov	r6, r0
 8009f20:	db01      	blt.n	8009f26 <_malloc_r+0x1a>
 8009f22:	42a9      	cmp	r1, r5
 8009f24:	d903      	bls.n	8009f2e <_malloc_r+0x22>
 8009f26:	230c      	movs	r3, #12
 8009f28:	6033      	str	r3, [r6, #0]
 8009f2a:	2000      	movs	r0, #0
 8009f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f2e:	f000 fa0f 	bl	800a350 <__malloc_lock>
 8009f32:	4921      	ldr	r1, [pc, #132]	; (8009fb8 <_malloc_r+0xac>)
 8009f34:	680a      	ldr	r2, [r1, #0]
 8009f36:	4614      	mov	r4, r2
 8009f38:	b99c      	cbnz	r4, 8009f62 <_malloc_r+0x56>
 8009f3a:	4f20      	ldr	r7, [pc, #128]	; (8009fbc <_malloc_r+0xb0>)
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	b923      	cbnz	r3, 8009f4a <_malloc_r+0x3e>
 8009f40:	4621      	mov	r1, r4
 8009f42:	4630      	mov	r0, r6
 8009f44:	f000 f83c 	bl	8009fc0 <_sbrk_r>
 8009f48:	6038      	str	r0, [r7, #0]
 8009f4a:	4629      	mov	r1, r5
 8009f4c:	4630      	mov	r0, r6
 8009f4e:	f000 f837 	bl	8009fc0 <_sbrk_r>
 8009f52:	1c43      	adds	r3, r0, #1
 8009f54:	d123      	bne.n	8009f9e <_malloc_r+0x92>
 8009f56:	230c      	movs	r3, #12
 8009f58:	6033      	str	r3, [r6, #0]
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	f000 f9fe 	bl	800a35c <__malloc_unlock>
 8009f60:	e7e3      	b.n	8009f2a <_malloc_r+0x1e>
 8009f62:	6823      	ldr	r3, [r4, #0]
 8009f64:	1b5b      	subs	r3, r3, r5
 8009f66:	d417      	bmi.n	8009f98 <_malloc_r+0x8c>
 8009f68:	2b0b      	cmp	r3, #11
 8009f6a:	d903      	bls.n	8009f74 <_malloc_r+0x68>
 8009f6c:	6023      	str	r3, [r4, #0]
 8009f6e:	441c      	add	r4, r3
 8009f70:	6025      	str	r5, [r4, #0]
 8009f72:	e004      	b.n	8009f7e <_malloc_r+0x72>
 8009f74:	6863      	ldr	r3, [r4, #4]
 8009f76:	42a2      	cmp	r2, r4
 8009f78:	bf0c      	ite	eq
 8009f7a:	600b      	streq	r3, [r1, #0]
 8009f7c:	6053      	strne	r3, [r2, #4]
 8009f7e:	4630      	mov	r0, r6
 8009f80:	f000 f9ec 	bl	800a35c <__malloc_unlock>
 8009f84:	f104 000b 	add.w	r0, r4, #11
 8009f88:	1d23      	adds	r3, r4, #4
 8009f8a:	f020 0007 	bic.w	r0, r0, #7
 8009f8e:	1ac2      	subs	r2, r0, r3
 8009f90:	d0cc      	beq.n	8009f2c <_malloc_r+0x20>
 8009f92:	1a1b      	subs	r3, r3, r0
 8009f94:	50a3      	str	r3, [r4, r2]
 8009f96:	e7c9      	b.n	8009f2c <_malloc_r+0x20>
 8009f98:	4622      	mov	r2, r4
 8009f9a:	6864      	ldr	r4, [r4, #4]
 8009f9c:	e7cc      	b.n	8009f38 <_malloc_r+0x2c>
 8009f9e:	1cc4      	adds	r4, r0, #3
 8009fa0:	f024 0403 	bic.w	r4, r4, #3
 8009fa4:	42a0      	cmp	r0, r4
 8009fa6:	d0e3      	beq.n	8009f70 <_malloc_r+0x64>
 8009fa8:	1a21      	subs	r1, r4, r0
 8009faa:	4630      	mov	r0, r6
 8009fac:	f000 f808 	bl	8009fc0 <_sbrk_r>
 8009fb0:	3001      	adds	r0, #1
 8009fb2:	d1dd      	bne.n	8009f70 <_malloc_r+0x64>
 8009fb4:	e7cf      	b.n	8009f56 <_malloc_r+0x4a>
 8009fb6:	bf00      	nop
 8009fb8:	20003024 	.word	0x20003024
 8009fbc:	20003028 	.word	0x20003028

08009fc0 <_sbrk_r>:
 8009fc0:	b538      	push	{r3, r4, r5, lr}
 8009fc2:	4d06      	ldr	r5, [pc, #24]	; (8009fdc <_sbrk_r+0x1c>)
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	4604      	mov	r4, r0
 8009fc8:	4608      	mov	r0, r1
 8009fca:	602b      	str	r3, [r5, #0]
 8009fcc:	f7f9 fcda 	bl	8003984 <_sbrk>
 8009fd0:	1c43      	adds	r3, r0, #1
 8009fd2:	d102      	bne.n	8009fda <_sbrk_r+0x1a>
 8009fd4:	682b      	ldr	r3, [r5, #0]
 8009fd6:	b103      	cbz	r3, 8009fda <_sbrk_r+0x1a>
 8009fd8:	6023      	str	r3, [r4, #0]
 8009fda:	bd38      	pop	{r3, r4, r5, pc}
 8009fdc:	20004c04 	.word	0x20004c04

08009fe0 <siprintf>:
 8009fe0:	b40e      	push	{r1, r2, r3}
 8009fe2:	b500      	push	{lr}
 8009fe4:	b09c      	sub	sp, #112	; 0x70
 8009fe6:	ab1d      	add	r3, sp, #116	; 0x74
 8009fe8:	9002      	str	r0, [sp, #8]
 8009fea:	9006      	str	r0, [sp, #24]
 8009fec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ff0:	4809      	ldr	r0, [pc, #36]	; (800a018 <siprintf+0x38>)
 8009ff2:	9107      	str	r1, [sp, #28]
 8009ff4:	9104      	str	r1, [sp, #16]
 8009ff6:	4909      	ldr	r1, [pc, #36]	; (800a01c <siprintf+0x3c>)
 8009ff8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ffc:	9105      	str	r1, [sp, #20]
 8009ffe:	6800      	ldr	r0, [r0, #0]
 800a000:	9301      	str	r3, [sp, #4]
 800a002:	a902      	add	r1, sp, #8
 800a004:	f000 fa0c 	bl	800a420 <_svfiprintf_r>
 800a008:	9b02      	ldr	r3, [sp, #8]
 800a00a:	2200      	movs	r2, #0
 800a00c:	701a      	strb	r2, [r3, #0]
 800a00e:	b01c      	add	sp, #112	; 0x70
 800a010:	f85d eb04 	ldr.w	lr, [sp], #4
 800a014:	b003      	add	sp, #12
 800a016:	4770      	bx	lr
 800a018:	20001a60 	.word	0x20001a60
 800a01c:	ffff0208 	.word	0xffff0208

0800a020 <strcat>:
 800a020:	b510      	push	{r4, lr}
 800a022:	4602      	mov	r2, r0
 800a024:	7814      	ldrb	r4, [r2, #0]
 800a026:	4613      	mov	r3, r2
 800a028:	3201      	adds	r2, #1
 800a02a:	2c00      	cmp	r4, #0
 800a02c:	d1fa      	bne.n	800a024 <strcat+0x4>
 800a02e:	3b01      	subs	r3, #1
 800a030:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a034:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a038:	2a00      	cmp	r2, #0
 800a03a:	d1f9      	bne.n	800a030 <strcat+0x10>
 800a03c:	bd10      	pop	{r4, pc}

0800a03e <strchr>:
 800a03e:	b2c9      	uxtb	r1, r1
 800a040:	4603      	mov	r3, r0
 800a042:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a046:	b11a      	cbz	r2, 800a050 <strchr+0x12>
 800a048:	428a      	cmp	r2, r1
 800a04a:	d1f9      	bne.n	800a040 <strchr+0x2>
 800a04c:	4618      	mov	r0, r3
 800a04e:	4770      	bx	lr
 800a050:	2900      	cmp	r1, #0
 800a052:	bf18      	it	ne
 800a054:	2300      	movne	r3, #0
 800a056:	e7f9      	b.n	800a04c <strchr+0xe>

0800a058 <strcpy>:
 800a058:	4603      	mov	r3, r0
 800a05a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a05e:	f803 2b01 	strb.w	r2, [r3], #1
 800a062:	2a00      	cmp	r2, #0
 800a064:	d1f9      	bne.n	800a05a <strcpy+0x2>
 800a066:	4770      	bx	lr

0800a068 <strstr>:
 800a068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a06a:	780c      	ldrb	r4, [r1, #0]
 800a06c:	b164      	cbz	r4, 800a088 <strstr+0x20>
 800a06e:	4603      	mov	r3, r0
 800a070:	781a      	ldrb	r2, [r3, #0]
 800a072:	4618      	mov	r0, r3
 800a074:	1c5e      	adds	r6, r3, #1
 800a076:	b90a      	cbnz	r2, 800a07c <strstr+0x14>
 800a078:	4610      	mov	r0, r2
 800a07a:	e005      	b.n	800a088 <strstr+0x20>
 800a07c:	4294      	cmp	r4, r2
 800a07e:	d108      	bne.n	800a092 <strstr+0x2a>
 800a080:	460d      	mov	r5, r1
 800a082:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800a086:	b902      	cbnz	r2, 800a08a <strstr+0x22>
 800a088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a08a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800a08e:	4297      	cmp	r7, r2
 800a090:	d0f7      	beq.n	800a082 <strstr+0x1a>
 800a092:	4633      	mov	r3, r6
 800a094:	e7ec      	b.n	800a070 <strstr+0x8>
	...

0800a098 <strtok>:
 800a098:	4b16      	ldr	r3, [pc, #88]	; (800a0f4 <strtok+0x5c>)
 800a09a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a09c:	681e      	ldr	r6, [r3, #0]
 800a09e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800a0a0:	4605      	mov	r5, r0
 800a0a2:	b9fc      	cbnz	r4, 800a0e4 <strtok+0x4c>
 800a0a4:	2050      	movs	r0, #80	; 0x50
 800a0a6:	9101      	str	r1, [sp, #4]
 800a0a8:	f7ff feba 	bl	8009e20 <malloc>
 800a0ac:	9901      	ldr	r1, [sp, #4]
 800a0ae:	65b0      	str	r0, [r6, #88]	; 0x58
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	b920      	cbnz	r0, 800a0be <strtok+0x26>
 800a0b4:	4b10      	ldr	r3, [pc, #64]	; (800a0f8 <strtok+0x60>)
 800a0b6:	4811      	ldr	r0, [pc, #68]	; (800a0fc <strtok+0x64>)
 800a0b8:	2157      	movs	r1, #87	; 0x57
 800a0ba:	f000 f919 	bl	800a2f0 <__assert_func>
 800a0be:	e9c0 4400 	strd	r4, r4, [r0]
 800a0c2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a0c6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a0ca:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a0ce:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a0d2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a0d6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a0da:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a0de:	6184      	str	r4, [r0, #24]
 800a0e0:	7704      	strb	r4, [r0, #28]
 800a0e2:	6244      	str	r4, [r0, #36]	; 0x24
 800a0e4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	b002      	add	sp, #8
 800a0ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a0f0:	f000 b806 	b.w	800a100 <__strtok_r>
 800a0f4:	20001a60 	.word	0x20001a60
 800a0f8:	0800bca8 	.word	0x0800bca8
 800a0fc:	0800bcbf 	.word	0x0800bcbf

0800a100 <__strtok_r>:
 800a100:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a102:	b908      	cbnz	r0, 800a108 <__strtok_r+0x8>
 800a104:	6810      	ldr	r0, [r2, #0]
 800a106:	b188      	cbz	r0, 800a12c <__strtok_r+0x2c>
 800a108:	4604      	mov	r4, r0
 800a10a:	4620      	mov	r0, r4
 800a10c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a110:	460f      	mov	r7, r1
 800a112:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a116:	b91e      	cbnz	r6, 800a120 <__strtok_r+0x20>
 800a118:	b965      	cbnz	r5, 800a134 <__strtok_r+0x34>
 800a11a:	6015      	str	r5, [r2, #0]
 800a11c:	4628      	mov	r0, r5
 800a11e:	e005      	b.n	800a12c <__strtok_r+0x2c>
 800a120:	42b5      	cmp	r5, r6
 800a122:	d1f6      	bne.n	800a112 <__strtok_r+0x12>
 800a124:	2b00      	cmp	r3, #0
 800a126:	d1f0      	bne.n	800a10a <__strtok_r+0xa>
 800a128:	6014      	str	r4, [r2, #0]
 800a12a:	7003      	strb	r3, [r0, #0]
 800a12c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a12e:	461c      	mov	r4, r3
 800a130:	e00c      	b.n	800a14c <__strtok_r+0x4c>
 800a132:	b915      	cbnz	r5, 800a13a <__strtok_r+0x3a>
 800a134:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a138:	460e      	mov	r6, r1
 800a13a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a13e:	42ab      	cmp	r3, r5
 800a140:	d1f7      	bne.n	800a132 <__strtok_r+0x32>
 800a142:	2b00      	cmp	r3, #0
 800a144:	d0f3      	beq.n	800a12e <__strtok_r+0x2e>
 800a146:	2300      	movs	r3, #0
 800a148:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a14c:	6014      	str	r4, [r2, #0]
 800a14e:	e7ed      	b.n	800a12c <__strtok_r+0x2c>

0800a150 <_strtol_l.isra.0>:
 800a150:	2b01      	cmp	r3, #1
 800a152:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a156:	d001      	beq.n	800a15c <_strtol_l.isra.0+0xc>
 800a158:	2b24      	cmp	r3, #36	; 0x24
 800a15a:	d906      	bls.n	800a16a <_strtol_l.isra.0+0x1a>
 800a15c:	f7ff fe1c 	bl	8009d98 <__errno>
 800a160:	2316      	movs	r3, #22
 800a162:	6003      	str	r3, [r0, #0]
 800a164:	2000      	movs	r0, #0
 800a166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a16a:	4f3a      	ldr	r7, [pc, #232]	; (800a254 <_strtol_l.isra.0+0x104>)
 800a16c:	468e      	mov	lr, r1
 800a16e:	4676      	mov	r6, lr
 800a170:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a174:	5de5      	ldrb	r5, [r4, r7]
 800a176:	f015 0508 	ands.w	r5, r5, #8
 800a17a:	d1f8      	bne.n	800a16e <_strtol_l.isra.0+0x1e>
 800a17c:	2c2d      	cmp	r4, #45	; 0x2d
 800a17e:	d134      	bne.n	800a1ea <_strtol_l.isra.0+0x9a>
 800a180:	f89e 4000 	ldrb.w	r4, [lr]
 800a184:	f04f 0801 	mov.w	r8, #1
 800a188:	f106 0e02 	add.w	lr, r6, #2
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d05c      	beq.n	800a24a <_strtol_l.isra.0+0xfa>
 800a190:	2b10      	cmp	r3, #16
 800a192:	d10c      	bne.n	800a1ae <_strtol_l.isra.0+0x5e>
 800a194:	2c30      	cmp	r4, #48	; 0x30
 800a196:	d10a      	bne.n	800a1ae <_strtol_l.isra.0+0x5e>
 800a198:	f89e 4000 	ldrb.w	r4, [lr]
 800a19c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a1a0:	2c58      	cmp	r4, #88	; 0x58
 800a1a2:	d14d      	bne.n	800a240 <_strtol_l.isra.0+0xf0>
 800a1a4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a1a8:	2310      	movs	r3, #16
 800a1aa:	f10e 0e02 	add.w	lr, lr, #2
 800a1ae:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a1b2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a1b6:	2600      	movs	r6, #0
 800a1b8:	fbbc f9f3 	udiv	r9, ip, r3
 800a1bc:	4635      	mov	r5, r6
 800a1be:	fb03 ca19 	mls	sl, r3, r9, ip
 800a1c2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a1c6:	2f09      	cmp	r7, #9
 800a1c8:	d818      	bhi.n	800a1fc <_strtol_l.isra.0+0xac>
 800a1ca:	463c      	mov	r4, r7
 800a1cc:	42a3      	cmp	r3, r4
 800a1ce:	dd24      	ble.n	800a21a <_strtol_l.isra.0+0xca>
 800a1d0:	2e00      	cmp	r6, #0
 800a1d2:	db1f      	blt.n	800a214 <_strtol_l.isra.0+0xc4>
 800a1d4:	45a9      	cmp	r9, r5
 800a1d6:	d31d      	bcc.n	800a214 <_strtol_l.isra.0+0xc4>
 800a1d8:	d101      	bne.n	800a1de <_strtol_l.isra.0+0x8e>
 800a1da:	45a2      	cmp	sl, r4
 800a1dc:	db1a      	blt.n	800a214 <_strtol_l.isra.0+0xc4>
 800a1de:	fb05 4503 	mla	r5, r5, r3, r4
 800a1e2:	2601      	movs	r6, #1
 800a1e4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a1e8:	e7eb      	b.n	800a1c2 <_strtol_l.isra.0+0x72>
 800a1ea:	2c2b      	cmp	r4, #43	; 0x2b
 800a1ec:	bf08      	it	eq
 800a1ee:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a1f2:	46a8      	mov	r8, r5
 800a1f4:	bf08      	it	eq
 800a1f6:	f106 0e02 	addeq.w	lr, r6, #2
 800a1fa:	e7c7      	b.n	800a18c <_strtol_l.isra.0+0x3c>
 800a1fc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a200:	2f19      	cmp	r7, #25
 800a202:	d801      	bhi.n	800a208 <_strtol_l.isra.0+0xb8>
 800a204:	3c37      	subs	r4, #55	; 0x37
 800a206:	e7e1      	b.n	800a1cc <_strtol_l.isra.0+0x7c>
 800a208:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a20c:	2f19      	cmp	r7, #25
 800a20e:	d804      	bhi.n	800a21a <_strtol_l.isra.0+0xca>
 800a210:	3c57      	subs	r4, #87	; 0x57
 800a212:	e7db      	b.n	800a1cc <_strtol_l.isra.0+0x7c>
 800a214:	f04f 36ff 	mov.w	r6, #4294967295
 800a218:	e7e4      	b.n	800a1e4 <_strtol_l.isra.0+0x94>
 800a21a:	2e00      	cmp	r6, #0
 800a21c:	da05      	bge.n	800a22a <_strtol_l.isra.0+0xda>
 800a21e:	2322      	movs	r3, #34	; 0x22
 800a220:	6003      	str	r3, [r0, #0]
 800a222:	4665      	mov	r5, ip
 800a224:	b942      	cbnz	r2, 800a238 <_strtol_l.isra.0+0xe8>
 800a226:	4628      	mov	r0, r5
 800a228:	e79d      	b.n	800a166 <_strtol_l.isra.0+0x16>
 800a22a:	f1b8 0f00 	cmp.w	r8, #0
 800a22e:	d000      	beq.n	800a232 <_strtol_l.isra.0+0xe2>
 800a230:	426d      	negs	r5, r5
 800a232:	2a00      	cmp	r2, #0
 800a234:	d0f7      	beq.n	800a226 <_strtol_l.isra.0+0xd6>
 800a236:	b10e      	cbz	r6, 800a23c <_strtol_l.isra.0+0xec>
 800a238:	f10e 31ff 	add.w	r1, lr, #4294967295
 800a23c:	6011      	str	r1, [r2, #0]
 800a23e:	e7f2      	b.n	800a226 <_strtol_l.isra.0+0xd6>
 800a240:	2430      	movs	r4, #48	; 0x30
 800a242:	2b00      	cmp	r3, #0
 800a244:	d1b3      	bne.n	800a1ae <_strtol_l.isra.0+0x5e>
 800a246:	2308      	movs	r3, #8
 800a248:	e7b1      	b.n	800a1ae <_strtol_l.isra.0+0x5e>
 800a24a:	2c30      	cmp	r4, #48	; 0x30
 800a24c:	d0a4      	beq.n	800a198 <_strtol_l.isra.0+0x48>
 800a24e:	230a      	movs	r3, #10
 800a250:	e7ad      	b.n	800a1ae <_strtol_l.isra.0+0x5e>
 800a252:	bf00      	nop
 800a254:	0800bd82 	.word	0x0800bd82

0800a258 <strtol>:
 800a258:	4613      	mov	r3, r2
 800a25a:	460a      	mov	r2, r1
 800a25c:	4601      	mov	r1, r0
 800a25e:	4802      	ldr	r0, [pc, #8]	; (800a268 <strtol+0x10>)
 800a260:	6800      	ldr	r0, [r0, #0]
 800a262:	f7ff bf75 	b.w	800a150 <_strtol_l.isra.0>
 800a266:	bf00      	nop
 800a268:	20001a60 	.word	0x20001a60

0800a26c <__utoa>:
 800a26c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a26e:	4c1f      	ldr	r4, [pc, #124]	; (800a2ec <__utoa+0x80>)
 800a270:	b08b      	sub	sp, #44	; 0x2c
 800a272:	4605      	mov	r5, r0
 800a274:	460b      	mov	r3, r1
 800a276:	466e      	mov	r6, sp
 800a278:	f104 0c20 	add.w	ip, r4, #32
 800a27c:	6820      	ldr	r0, [r4, #0]
 800a27e:	6861      	ldr	r1, [r4, #4]
 800a280:	4637      	mov	r7, r6
 800a282:	c703      	stmia	r7!, {r0, r1}
 800a284:	3408      	adds	r4, #8
 800a286:	4564      	cmp	r4, ip
 800a288:	463e      	mov	r6, r7
 800a28a:	d1f7      	bne.n	800a27c <__utoa+0x10>
 800a28c:	7921      	ldrb	r1, [r4, #4]
 800a28e:	7139      	strb	r1, [r7, #4]
 800a290:	1e91      	subs	r1, r2, #2
 800a292:	6820      	ldr	r0, [r4, #0]
 800a294:	6038      	str	r0, [r7, #0]
 800a296:	2922      	cmp	r1, #34	; 0x22
 800a298:	f04f 0100 	mov.w	r1, #0
 800a29c:	d904      	bls.n	800a2a8 <__utoa+0x3c>
 800a29e:	7019      	strb	r1, [r3, #0]
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	b00b      	add	sp, #44	; 0x2c
 800a2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2a8:	1e58      	subs	r0, r3, #1
 800a2aa:	4684      	mov	ip, r0
 800a2ac:	fbb5 f7f2 	udiv	r7, r5, r2
 800a2b0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800a2b4:	fb02 5617 	mls	r6, r2, r7, r5
 800a2b8:	4476      	add	r6, lr
 800a2ba:	460c      	mov	r4, r1
 800a2bc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800a2c0:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800a2c4:	462e      	mov	r6, r5
 800a2c6:	42b2      	cmp	r2, r6
 800a2c8:	f101 0101 	add.w	r1, r1, #1
 800a2cc:	463d      	mov	r5, r7
 800a2ce:	d9ed      	bls.n	800a2ac <__utoa+0x40>
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	545a      	strb	r2, [r3, r1]
 800a2d4:	1919      	adds	r1, r3, r4
 800a2d6:	1aa5      	subs	r5, r4, r2
 800a2d8:	42aa      	cmp	r2, r5
 800a2da:	dae2      	bge.n	800a2a2 <__utoa+0x36>
 800a2dc:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800a2e0:	780e      	ldrb	r6, [r1, #0]
 800a2e2:	7006      	strb	r6, [r0, #0]
 800a2e4:	3201      	adds	r2, #1
 800a2e6:	f801 5901 	strb.w	r5, [r1], #-1
 800a2ea:	e7f4      	b.n	800a2d6 <__utoa+0x6a>
 800a2ec:	0800bd20 	.word	0x0800bd20

0800a2f0 <__assert_func>:
 800a2f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2f2:	4614      	mov	r4, r2
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	4b09      	ldr	r3, [pc, #36]	; (800a31c <__assert_func+0x2c>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4605      	mov	r5, r0
 800a2fc:	68d8      	ldr	r0, [r3, #12]
 800a2fe:	b14c      	cbz	r4, 800a314 <__assert_func+0x24>
 800a300:	4b07      	ldr	r3, [pc, #28]	; (800a320 <__assert_func+0x30>)
 800a302:	9100      	str	r1, [sp, #0]
 800a304:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a308:	4906      	ldr	r1, [pc, #24]	; (800a324 <__assert_func+0x34>)
 800a30a:	462b      	mov	r3, r5
 800a30c:	f000 f80e 	bl	800a32c <fiprintf>
 800a310:	f000 fd34 	bl	800ad7c <abort>
 800a314:	4b04      	ldr	r3, [pc, #16]	; (800a328 <__assert_func+0x38>)
 800a316:	461c      	mov	r4, r3
 800a318:	e7f3      	b.n	800a302 <__assert_func+0x12>
 800a31a:	bf00      	nop
 800a31c:	20001a60 	.word	0x20001a60
 800a320:	0800bd45 	.word	0x0800bd45
 800a324:	0800bd52 	.word	0x0800bd52
 800a328:	0800bd80 	.word	0x0800bd80

0800a32c <fiprintf>:
 800a32c:	b40e      	push	{r1, r2, r3}
 800a32e:	b503      	push	{r0, r1, lr}
 800a330:	4601      	mov	r1, r0
 800a332:	ab03      	add	r3, sp, #12
 800a334:	4805      	ldr	r0, [pc, #20]	; (800a34c <fiprintf+0x20>)
 800a336:	f853 2b04 	ldr.w	r2, [r3], #4
 800a33a:	6800      	ldr	r0, [r0, #0]
 800a33c:	9301      	str	r3, [sp, #4]
 800a33e:	f000 f999 	bl	800a674 <_vfiprintf_r>
 800a342:	b002      	add	sp, #8
 800a344:	f85d eb04 	ldr.w	lr, [sp], #4
 800a348:	b003      	add	sp, #12
 800a34a:	4770      	bx	lr
 800a34c:	20001a60 	.word	0x20001a60

0800a350 <__malloc_lock>:
 800a350:	4801      	ldr	r0, [pc, #4]	; (800a358 <__malloc_lock+0x8>)
 800a352:	f000 bed3 	b.w	800b0fc <__retarget_lock_acquire_recursive>
 800a356:	bf00      	nop
 800a358:	20004c0c 	.word	0x20004c0c

0800a35c <__malloc_unlock>:
 800a35c:	4801      	ldr	r0, [pc, #4]	; (800a364 <__malloc_unlock+0x8>)
 800a35e:	f000 bece 	b.w	800b0fe <__retarget_lock_release_recursive>
 800a362:	bf00      	nop
 800a364:	20004c0c 	.word	0x20004c0c

0800a368 <__ssputs_r>:
 800a368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a36c:	688e      	ldr	r6, [r1, #8]
 800a36e:	429e      	cmp	r6, r3
 800a370:	4682      	mov	sl, r0
 800a372:	460c      	mov	r4, r1
 800a374:	4690      	mov	r8, r2
 800a376:	461f      	mov	r7, r3
 800a378:	d838      	bhi.n	800a3ec <__ssputs_r+0x84>
 800a37a:	898a      	ldrh	r2, [r1, #12]
 800a37c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a380:	d032      	beq.n	800a3e8 <__ssputs_r+0x80>
 800a382:	6825      	ldr	r5, [r4, #0]
 800a384:	6909      	ldr	r1, [r1, #16]
 800a386:	eba5 0901 	sub.w	r9, r5, r1
 800a38a:	6965      	ldr	r5, [r4, #20]
 800a38c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a390:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a394:	3301      	adds	r3, #1
 800a396:	444b      	add	r3, r9
 800a398:	106d      	asrs	r5, r5, #1
 800a39a:	429d      	cmp	r5, r3
 800a39c:	bf38      	it	cc
 800a39e:	461d      	movcc	r5, r3
 800a3a0:	0553      	lsls	r3, r2, #21
 800a3a2:	d531      	bpl.n	800a408 <__ssputs_r+0xa0>
 800a3a4:	4629      	mov	r1, r5
 800a3a6:	f7ff fdb1 	bl	8009f0c <_malloc_r>
 800a3aa:	4606      	mov	r6, r0
 800a3ac:	b950      	cbnz	r0, 800a3c4 <__ssputs_r+0x5c>
 800a3ae:	230c      	movs	r3, #12
 800a3b0:	f8ca 3000 	str.w	r3, [sl]
 800a3b4:	89a3      	ldrh	r3, [r4, #12]
 800a3b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3ba:	81a3      	strh	r3, [r4, #12]
 800a3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3c4:	6921      	ldr	r1, [r4, #16]
 800a3c6:	464a      	mov	r2, r9
 800a3c8:	f7ff fd3a 	bl	8009e40 <memcpy>
 800a3cc:	89a3      	ldrh	r3, [r4, #12]
 800a3ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3d6:	81a3      	strh	r3, [r4, #12]
 800a3d8:	6126      	str	r6, [r4, #16]
 800a3da:	6165      	str	r5, [r4, #20]
 800a3dc:	444e      	add	r6, r9
 800a3de:	eba5 0509 	sub.w	r5, r5, r9
 800a3e2:	6026      	str	r6, [r4, #0]
 800a3e4:	60a5      	str	r5, [r4, #8]
 800a3e6:	463e      	mov	r6, r7
 800a3e8:	42be      	cmp	r6, r7
 800a3ea:	d900      	bls.n	800a3ee <__ssputs_r+0x86>
 800a3ec:	463e      	mov	r6, r7
 800a3ee:	4632      	mov	r2, r6
 800a3f0:	6820      	ldr	r0, [r4, #0]
 800a3f2:	4641      	mov	r1, r8
 800a3f4:	f000 fee8 	bl	800b1c8 <memmove>
 800a3f8:	68a3      	ldr	r3, [r4, #8]
 800a3fa:	6822      	ldr	r2, [r4, #0]
 800a3fc:	1b9b      	subs	r3, r3, r6
 800a3fe:	4432      	add	r2, r6
 800a400:	60a3      	str	r3, [r4, #8]
 800a402:	6022      	str	r2, [r4, #0]
 800a404:	2000      	movs	r0, #0
 800a406:	e7db      	b.n	800a3c0 <__ssputs_r+0x58>
 800a408:	462a      	mov	r2, r5
 800a40a:	f000 fef7 	bl	800b1fc <_realloc_r>
 800a40e:	4606      	mov	r6, r0
 800a410:	2800      	cmp	r0, #0
 800a412:	d1e1      	bne.n	800a3d8 <__ssputs_r+0x70>
 800a414:	6921      	ldr	r1, [r4, #16]
 800a416:	4650      	mov	r0, sl
 800a418:	f7ff fd28 	bl	8009e6c <_free_r>
 800a41c:	e7c7      	b.n	800a3ae <__ssputs_r+0x46>
	...

0800a420 <_svfiprintf_r>:
 800a420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a424:	4698      	mov	r8, r3
 800a426:	898b      	ldrh	r3, [r1, #12]
 800a428:	061b      	lsls	r3, r3, #24
 800a42a:	b09d      	sub	sp, #116	; 0x74
 800a42c:	4607      	mov	r7, r0
 800a42e:	460d      	mov	r5, r1
 800a430:	4614      	mov	r4, r2
 800a432:	d50e      	bpl.n	800a452 <_svfiprintf_r+0x32>
 800a434:	690b      	ldr	r3, [r1, #16]
 800a436:	b963      	cbnz	r3, 800a452 <_svfiprintf_r+0x32>
 800a438:	2140      	movs	r1, #64	; 0x40
 800a43a:	f7ff fd67 	bl	8009f0c <_malloc_r>
 800a43e:	6028      	str	r0, [r5, #0]
 800a440:	6128      	str	r0, [r5, #16]
 800a442:	b920      	cbnz	r0, 800a44e <_svfiprintf_r+0x2e>
 800a444:	230c      	movs	r3, #12
 800a446:	603b      	str	r3, [r7, #0]
 800a448:	f04f 30ff 	mov.w	r0, #4294967295
 800a44c:	e0d1      	b.n	800a5f2 <_svfiprintf_r+0x1d2>
 800a44e:	2340      	movs	r3, #64	; 0x40
 800a450:	616b      	str	r3, [r5, #20]
 800a452:	2300      	movs	r3, #0
 800a454:	9309      	str	r3, [sp, #36]	; 0x24
 800a456:	2320      	movs	r3, #32
 800a458:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a45c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a460:	2330      	movs	r3, #48	; 0x30
 800a462:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a60c <_svfiprintf_r+0x1ec>
 800a466:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a46a:	f04f 0901 	mov.w	r9, #1
 800a46e:	4623      	mov	r3, r4
 800a470:	469a      	mov	sl, r3
 800a472:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a476:	b10a      	cbz	r2, 800a47c <_svfiprintf_r+0x5c>
 800a478:	2a25      	cmp	r2, #37	; 0x25
 800a47a:	d1f9      	bne.n	800a470 <_svfiprintf_r+0x50>
 800a47c:	ebba 0b04 	subs.w	fp, sl, r4
 800a480:	d00b      	beq.n	800a49a <_svfiprintf_r+0x7a>
 800a482:	465b      	mov	r3, fp
 800a484:	4622      	mov	r2, r4
 800a486:	4629      	mov	r1, r5
 800a488:	4638      	mov	r0, r7
 800a48a:	f7ff ff6d 	bl	800a368 <__ssputs_r>
 800a48e:	3001      	adds	r0, #1
 800a490:	f000 80aa 	beq.w	800a5e8 <_svfiprintf_r+0x1c8>
 800a494:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a496:	445a      	add	r2, fp
 800a498:	9209      	str	r2, [sp, #36]	; 0x24
 800a49a:	f89a 3000 	ldrb.w	r3, [sl]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	f000 80a2 	beq.w	800a5e8 <_svfiprintf_r+0x1c8>
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4ae:	f10a 0a01 	add.w	sl, sl, #1
 800a4b2:	9304      	str	r3, [sp, #16]
 800a4b4:	9307      	str	r3, [sp, #28]
 800a4b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4ba:	931a      	str	r3, [sp, #104]	; 0x68
 800a4bc:	4654      	mov	r4, sl
 800a4be:	2205      	movs	r2, #5
 800a4c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4c4:	4851      	ldr	r0, [pc, #324]	; (800a60c <_svfiprintf_r+0x1ec>)
 800a4c6:	f7f6 fa8b 	bl	80009e0 <memchr>
 800a4ca:	9a04      	ldr	r2, [sp, #16]
 800a4cc:	b9d8      	cbnz	r0, 800a506 <_svfiprintf_r+0xe6>
 800a4ce:	06d0      	lsls	r0, r2, #27
 800a4d0:	bf44      	itt	mi
 800a4d2:	2320      	movmi	r3, #32
 800a4d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4d8:	0711      	lsls	r1, r2, #28
 800a4da:	bf44      	itt	mi
 800a4dc:	232b      	movmi	r3, #43	; 0x2b
 800a4de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4e2:	f89a 3000 	ldrb.w	r3, [sl]
 800a4e6:	2b2a      	cmp	r3, #42	; 0x2a
 800a4e8:	d015      	beq.n	800a516 <_svfiprintf_r+0xf6>
 800a4ea:	9a07      	ldr	r2, [sp, #28]
 800a4ec:	4654      	mov	r4, sl
 800a4ee:	2000      	movs	r0, #0
 800a4f0:	f04f 0c0a 	mov.w	ip, #10
 800a4f4:	4621      	mov	r1, r4
 800a4f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4fa:	3b30      	subs	r3, #48	; 0x30
 800a4fc:	2b09      	cmp	r3, #9
 800a4fe:	d94e      	bls.n	800a59e <_svfiprintf_r+0x17e>
 800a500:	b1b0      	cbz	r0, 800a530 <_svfiprintf_r+0x110>
 800a502:	9207      	str	r2, [sp, #28]
 800a504:	e014      	b.n	800a530 <_svfiprintf_r+0x110>
 800a506:	eba0 0308 	sub.w	r3, r0, r8
 800a50a:	fa09 f303 	lsl.w	r3, r9, r3
 800a50e:	4313      	orrs	r3, r2
 800a510:	9304      	str	r3, [sp, #16]
 800a512:	46a2      	mov	sl, r4
 800a514:	e7d2      	b.n	800a4bc <_svfiprintf_r+0x9c>
 800a516:	9b03      	ldr	r3, [sp, #12]
 800a518:	1d19      	adds	r1, r3, #4
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	9103      	str	r1, [sp, #12]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	bfbb      	ittet	lt
 800a522:	425b      	neglt	r3, r3
 800a524:	f042 0202 	orrlt.w	r2, r2, #2
 800a528:	9307      	strge	r3, [sp, #28]
 800a52a:	9307      	strlt	r3, [sp, #28]
 800a52c:	bfb8      	it	lt
 800a52e:	9204      	strlt	r2, [sp, #16]
 800a530:	7823      	ldrb	r3, [r4, #0]
 800a532:	2b2e      	cmp	r3, #46	; 0x2e
 800a534:	d10c      	bne.n	800a550 <_svfiprintf_r+0x130>
 800a536:	7863      	ldrb	r3, [r4, #1]
 800a538:	2b2a      	cmp	r3, #42	; 0x2a
 800a53a:	d135      	bne.n	800a5a8 <_svfiprintf_r+0x188>
 800a53c:	9b03      	ldr	r3, [sp, #12]
 800a53e:	1d1a      	adds	r2, r3, #4
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	9203      	str	r2, [sp, #12]
 800a544:	2b00      	cmp	r3, #0
 800a546:	bfb8      	it	lt
 800a548:	f04f 33ff 	movlt.w	r3, #4294967295
 800a54c:	3402      	adds	r4, #2
 800a54e:	9305      	str	r3, [sp, #20]
 800a550:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a61c <_svfiprintf_r+0x1fc>
 800a554:	7821      	ldrb	r1, [r4, #0]
 800a556:	2203      	movs	r2, #3
 800a558:	4650      	mov	r0, sl
 800a55a:	f7f6 fa41 	bl	80009e0 <memchr>
 800a55e:	b140      	cbz	r0, 800a572 <_svfiprintf_r+0x152>
 800a560:	2340      	movs	r3, #64	; 0x40
 800a562:	eba0 000a 	sub.w	r0, r0, sl
 800a566:	fa03 f000 	lsl.w	r0, r3, r0
 800a56a:	9b04      	ldr	r3, [sp, #16]
 800a56c:	4303      	orrs	r3, r0
 800a56e:	3401      	adds	r4, #1
 800a570:	9304      	str	r3, [sp, #16]
 800a572:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a576:	4826      	ldr	r0, [pc, #152]	; (800a610 <_svfiprintf_r+0x1f0>)
 800a578:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a57c:	2206      	movs	r2, #6
 800a57e:	f7f6 fa2f 	bl	80009e0 <memchr>
 800a582:	2800      	cmp	r0, #0
 800a584:	d038      	beq.n	800a5f8 <_svfiprintf_r+0x1d8>
 800a586:	4b23      	ldr	r3, [pc, #140]	; (800a614 <_svfiprintf_r+0x1f4>)
 800a588:	bb1b      	cbnz	r3, 800a5d2 <_svfiprintf_r+0x1b2>
 800a58a:	9b03      	ldr	r3, [sp, #12]
 800a58c:	3307      	adds	r3, #7
 800a58e:	f023 0307 	bic.w	r3, r3, #7
 800a592:	3308      	adds	r3, #8
 800a594:	9303      	str	r3, [sp, #12]
 800a596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a598:	4433      	add	r3, r6
 800a59a:	9309      	str	r3, [sp, #36]	; 0x24
 800a59c:	e767      	b.n	800a46e <_svfiprintf_r+0x4e>
 800a59e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5a2:	460c      	mov	r4, r1
 800a5a4:	2001      	movs	r0, #1
 800a5a6:	e7a5      	b.n	800a4f4 <_svfiprintf_r+0xd4>
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	3401      	adds	r4, #1
 800a5ac:	9305      	str	r3, [sp, #20]
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	f04f 0c0a 	mov.w	ip, #10
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5ba:	3a30      	subs	r2, #48	; 0x30
 800a5bc:	2a09      	cmp	r2, #9
 800a5be:	d903      	bls.n	800a5c8 <_svfiprintf_r+0x1a8>
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d0c5      	beq.n	800a550 <_svfiprintf_r+0x130>
 800a5c4:	9105      	str	r1, [sp, #20]
 800a5c6:	e7c3      	b.n	800a550 <_svfiprintf_r+0x130>
 800a5c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e7f0      	b.n	800a5b4 <_svfiprintf_r+0x194>
 800a5d2:	ab03      	add	r3, sp, #12
 800a5d4:	9300      	str	r3, [sp, #0]
 800a5d6:	462a      	mov	r2, r5
 800a5d8:	4b0f      	ldr	r3, [pc, #60]	; (800a618 <_svfiprintf_r+0x1f8>)
 800a5da:	a904      	add	r1, sp, #16
 800a5dc:	4638      	mov	r0, r7
 800a5de:	f3af 8000 	nop.w
 800a5e2:	1c42      	adds	r2, r0, #1
 800a5e4:	4606      	mov	r6, r0
 800a5e6:	d1d6      	bne.n	800a596 <_svfiprintf_r+0x176>
 800a5e8:	89ab      	ldrh	r3, [r5, #12]
 800a5ea:	065b      	lsls	r3, r3, #25
 800a5ec:	f53f af2c 	bmi.w	800a448 <_svfiprintf_r+0x28>
 800a5f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5f2:	b01d      	add	sp, #116	; 0x74
 800a5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5f8:	ab03      	add	r3, sp, #12
 800a5fa:	9300      	str	r3, [sp, #0]
 800a5fc:	462a      	mov	r2, r5
 800a5fe:	4b06      	ldr	r3, [pc, #24]	; (800a618 <_svfiprintf_r+0x1f8>)
 800a600:	a904      	add	r1, sp, #16
 800a602:	4638      	mov	r0, r7
 800a604:	f000 f9d4 	bl	800a9b0 <_printf_i>
 800a608:	e7eb      	b.n	800a5e2 <_svfiprintf_r+0x1c2>
 800a60a:	bf00      	nop
 800a60c:	0800be82 	.word	0x0800be82
 800a610:	0800be8c 	.word	0x0800be8c
 800a614:	00000000 	.word	0x00000000
 800a618:	0800a369 	.word	0x0800a369
 800a61c:	0800be88 	.word	0x0800be88

0800a620 <__sfputc_r>:
 800a620:	6893      	ldr	r3, [r2, #8]
 800a622:	3b01      	subs	r3, #1
 800a624:	2b00      	cmp	r3, #0
 800a626:	b410      	push	{r4}
 800a628:	6093      	str	r3, [r2, #8]
 800a62a:	da08      	bge.n	800a63e <__sfputc_r+0x1e>
 800a62c:	6994      	ldr	r4, [r2, #24]
 800a62e:	42a3      	cmp	r3, r4
 800a630:	db01      	blt.n	800a636 <__sfputc_r+0x16>
 800a632:	290a      	cmp	r1, #10
 800a634:	d103      	bne.n	800a63e <__sfputc_r+0x1e>
 800a636:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a63a:	f000 badf 	b.w	800abfc <__swbuf_r>
 800a63e:	6813      	ldr	r3, [r2, #0]
 800a640:	1c58      	adds	r0, r3, #1
 800a642:	6010      	str	r0, [r2, #0]
 800a644:	7019      	strb	r1, [r3, #0]
 800a646:	4608      	mov	r0, r1
 800a648:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a64c:	4770      	bx	lr

0800a64e <__sfputs_r>:
 800a64e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a650:	4606      	mov	r6, r0
 800a652:	460f      	mov	r7, r1
 800a654:	4614      	mov	r4, r2
 800a656:	18d5      	adds	r5, r2, r3
 800a658:	42ac      	cmp	r4, r5
 800a65a:	d101      	bne.n	800a660 <__sfputs_r+0x12>
 800a65c:	2000      	movs	r0, #0
 800a65e:	e007      	b.n	800a670 <__sfputs_r+0x22>
 800a660:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a664:	463a      	mov	r2, r7
 800a666:	4630      	mov	r0, r6
 800a668:	f7ff ffda 	bl	800a620 <__sfputc_r>
 800a66c:	1c43      	adds	r3, r0, #1
 800a66e:	d1f3      	bne.n	800a658 <__sfputs_r+0xa>
 800a670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a674 <_vfiprintf_r>:
 800a674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a678:	460d      	mov	r5, r1
 800a67a:	b09d      	sub	sp, #116	; 0x74
 800a67c:	4614      	mov	r4, r2
 800a67e:	4698      	mov	r8, r3
 800a680:	4606      	mov	r6, r0
 800a682:	b118      	cbz	r0, 800a68c <_vfiprintf_r+0x18>
 800a684:	6983      	ldr	r3, [r0, #24]
 800a686:	b90b      	cbnz	r3, 800a68c <_vfiprintf_r+0x18>
 800a688:	f000 fc9a 	bl	800afc0 <__sinit>
 800a68c:	4b89      	ldr	r3, [pc, #548]	; (800a8b4 <_vfiprintf_r+0x240>)
 800a68e:	429d      	cmp	r5, r3
 800a690:	d11b      	bne.n	800a6ca <_vfiprintf_r+0x56>
 800a692:	6875      	ldr	r5, [r6, #4]
 800a694:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a696:	07d9      	lsls	r1, r3, #31
 800a698:	d405      	bmi.n	800a6a6 <_vfiprintf_r+0x32>
 800a69a:	89ab      	ldrh	r3, [r5, #12]
 800a69c:	059a      	lsls	r2, r3, #22
 800a69e:	d402      	bmi.n	800a6a6 <_vfiprintf_r+0x32>
 800a6a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6a2:	f000 fd2b 	bl	800b0fc <__retarget_lock_acquire_recursive>
 800a6a6:	89ab      	ldrh	r3, [r5, #12]
 800a6a8:	071b      	lsls	r3, r3, #28
 800a6aa:	d501      	bpl.n	800a6b0 <_vfiprintf_r+0x3c>
 800a6ac:	692b      	ldr	r3, [r5, #16]
 800a6ae:	b9eb      	cbnz	r3, 800a6ec <_vfiprintf_r+0x78>
 800a6b0:	4629      	mov	r1, r5
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	f000 faf4 	bl	800aca0 <__swsetup_r>
 800a6b8:	b1c0      	cbz	r0, 800a6ec <_vfiprintf_r+0x78>
 800a6ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6bc:	07dc      	lsls	r4, r3, #31
 800a6be:	d50e      	bpl.n	800a6de <_vfiprintf_r+0x6a>
 800a6c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6c4:	b01d      	add	sp, #116	; 0x74
 800a6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ca:	4b7b      	ldr	r3, [pc, #492]	; (800a8b8 <_vfiprintf_r+0x244>)
 800a6cc:	429d      	cmp	r5, r3
 800a6ce:	d101      	bne.n	800a6d4 <_vfiprintf_r+0x60>
 800a6d0:	68b5      	ldr	r5, [r6, #8]
 800a6d2:	e7df      	b.n	800a694 <_vfiprintf_r+0x20>
 800a6d4:	4b79      	ldr	r3, [pc, #484]	; (800a8bc <_vfiprintf_r+0x248>)
 800a6d6:	429d      	cmp	r5, r3
 800a6d8:	bf08      	it	eq
 800a6da:	68f5      	ldreq	r5, [r6, #12]
 800a6dc:	e7da      	b.n	800a694 <_vfiprintf_r+0x20>
 800a6de:	89ab      	ldrh	r3, [r5, #12]
 800a6e0:	0598      	lsls	r0, r3, #22
 800a6e2:	d4ed      	bmi.n	800a6c0 <_vfiprintf_r+0x4c>
 800a6e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6e6:	f000 fd0a 	bl	800b0fe <__retarget_lock_release_recursive>
 800a6ea:	e7e9      	b.n	800a6c0 <_vfiprintf_r+0x4c>
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a6f0:	2320      	movs	r3, #32
 800a6f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6fa:	2330      	movs	r3, #48	; 0x30
 800a6fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a8c0 <_vfiprintf_r+0x24c>
 800a700:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a704:	f04f 0901 	mov.w	r9, #1
 800a708:	4623      	mov	r3, r4
 800a70a:	469a      	mov	sl, r3
 800a70c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a710:	b10a      	cbz	r2, 800a716 <_vfiprintf_r+0xa2>
 800a712:	2a25      	cmp	r2, #37	; 0x25
 800a714:	d1f9      	bne.n	800a70a <_vfiprintf_r+0x96>
 800a716:	ebba 0b04 	subs.w	fp, sl, r4
 800a71a:	d00b      	beq.n	800a734 <_vfiprintf_r+0xc0>
 800a71c:	465b      	mov	r3, fp
 800a71e:	4622      	mov	r2, r4
 800a720:	4629      	mov	r1, r5
 800a722:	4630      	mov	r0, r6
 800a724:	f7ff ff93 	bl	800a64e <__sfputs_r>
 800a728:	3001      	adds	r0, #1
 800a72a:	f000 80aa 	beq.w	800a882 <_vfiprintf_r+0x20e>
 800a72e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a730:	445a      	add	r2, fp
 800a732:	9209      	str	r2, [sp, #36]	; 0x24
 800a734:	f89a 3000 	ldrb.w	r3, [sl]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	f000 80a2 	beq.w	800a882 <_vfiprintf_r+0x20e>
 800a73e:	2300      	movs	r3, #0
 800a740:	f04f 32ff 	mov.w	r2, #4294967295
 800a744:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a748:	f10a 0a01 	add.w	sl, sl, #1
 800a74c:	9304      	str	r3, [sp, #16]
 800a74e:	9307      	str	r3, [sp, #28]
 800a750:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a754:	931a      	str	r3, [sp, #104]	; 0x68
 800a756:	4654      	mov	r4, sl
 800a758:	2205      	movs	r2, #5
 800a75a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a75e:	4858      	ldr	r0, [pc, #352]	; (800a8c0 <_vfiprintf_r+0x24c>)
 800a760:	f7f6 f93e 	bl	80009e0 <memchr>
 800a764:	9a04      	ldr	r2, [sp, #16]
 800a766:	b9d8      	cbnz	r0, 800a7a0 <_vfiprintf_r+0x12c>
 800a768:	06d1      	lsls	r1, r2, #27
 800a76a:	bf44      	itt	mi
 800a76c:	2320      	movmi	r3, #32
 800a76e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a772:	0713      	lsls	r3, r2, #28
 800a774:	bf44      	itt	mi
 800a776:	232b      	movmi	r3, #43	; 0x2b
 800a778:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a77c:	f89a 3000 	ldrb.w	r3, [sl]
 800a780:	2b2a      	cmp	r3, #42	; 0x2a
 800a782:	d015      	beq.n	800a7b0 <_vfiprintf_r+0x13c>
 800a784:	9a07      	ldr	r2, [sp, #28]
 800a786:	4654      	mov	r4, sl
 800a788:	2000      	movs	r0, #0
 800a78a:	f04f 0c0a 	mov.w	ip, #10
 800a78e:	4621      	mov	r1, r4
 800a790:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a794:	3b30      	subs	r3, #48	; 0x30
 800a796:	2b09      	cmp	r3, #9
 800a798:	d94e      	bls.n	800a838 <_vfiprintf_r+0x1c4>
 800a79a:	b1b0      	cbz	r0, 800a7ca <_vfiprintf_r+0x156>
 800a79c:	9207      	str	r2, [sp, #28]
 800a79e:	e014      	b.n	800a7ca <_vfiprintf_r+0x156>
 800a7a0:	eba0 0308 	sub.w	r3, r0, r8
 800a7a4:	fa09 f303 	lsl.w	r3, r9, r3
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	9304      	str	r3, [sp, #16]
 800a7ac:	46a2      	mov	sl, r4
 800a7ae:	e7d2      	b.n	800a756 <_vfiprintf_r+0xe2>
 800a7b0:	9b03      	ldr	r3, [sp, #12]
 800a7b2:	1d19      	adds	r1, r3, #4
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	9103      	str	r1, [sp, #12]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	bfbb      	ittet	lt
 800a7bc:	425b      	neglt	r3, r3
 800a7be:	f042 0202 	orrlt.w	r2, r2, #2
 800a7c2:	9307      	strge	r3, [sp, #28]
 800a7c4:	9307      	strlt	r3, [sp, #28]
 800a7c6:	bfb8      	it	lt
 800a7c8:	9204      	strlt	r2, [sp, #16]
 800a7ca:	7823      	ldrb	r3, [r4, #0]
 800a7cc:	2b2e      	cmp	r3, #46	; 0x2e
 800a7ce:	d10c      	bne.n	800a7ea <_vfiprintf_r+0x176>
 800a7d0:	7863      	ldrb	r3, [r4, #1]
 800a7d2:	2b2a      	cmp	r3, #42	; 0x2a
 800a7d4:	d135      	bne.n	800a842 <_vfiprintf_r+0x1ce>
 800a7d6:	9b03      	ldr	r3, [sp, #12]
 800a7d8:	1d1a      	adds	r2, r3, #4
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	9203      	str	r2, [sp, #12]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	bfb8      	it	lt
 800a7e2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7e6:	3402      	adds	r4, #2
 800a7e8:	9305      	str	r3, [sp, #20]
 800a7ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a8d0 <_vfiprintf_r+0x25c>
 800a7ee:	7821      	ldrb	r1, [r4, #0]
 800a7f0:	2203      	movs	r2, #3
 800a7f2:	4650      	mov	r0, sl
 800a7f4:	f7f6 f8f4 	bl	80009e0 <memchr>
 800a7f8:	b140      	cbz	r0, 800a80c <_vfiprintf_r+0x198>
 800a7fa:	2340      	movs	r3, #64	; 0x40
 800a7fc:	eba0 000a 	sub.w	r0, r0, sl
 800a800:	fa03 f000 	lsl.w	r0, r3, r0
 800a804:	9b04      	ldr	r3, [sp, #16]
 800a806:	4303      	orrs	r3, r0
 800a808:	3401      	adds	r4, #1
 800a80a:	9304      	str	r3, [sp, #16]
 800a80c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a810:	482c      	ldr	r0, [pc, #176]	; (800a8c4 <_vfiprintf_r+0x250>)
 800a812:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a816:	2206      	movs	r2, #6
 800a818:	f7f6 f8e2 	bl	80009e0 <memchr>
 800a81c:	2800      	cmp	r0, #0
 800a81e:	d03f      	beq.n	800a8a0 <_vfiprintf_r+0x22c>
 800a820:	4b29      	ldr	r3, [pc, #164]	; (800a8c8 <_vfiprintf_r+0x254>)
 800a822:	bb1b      	cbnz	r3, 800a86c <_vfiprintf_r+0x1f8>
 800a824:	9b03      	ldr	r3, [sp, #12]
 800a826:	3307      	adds	r3, #7
 800a828:	f023 0307 	bic.w	r3, r3, #7
 800a82c:	3308      	adds	r3, #8
 800a82e:	9303      	str	r3, [sp, #12]
 800a830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a832:	443b      	add	r3, r7
 800a834:	9309      	str	r3, [sp, #36]	; 0x24
 800a836:	e767      	b.n	800a708 <_vfiprintf_r+0x94>
 800a838:	fb0c 3202 	mla	r2, ip, r2, r3
 800a83c:	460c      	mov	r4, r1
 800a83e:	2001      	movs	r0, #1
 800a840:	e7a5      	b.n	800a78e <_vfiprintf_r+0x11a>
 800a842:	2300      	movs	r3, #0
 800a844:	3401      	adds	r4, #1
 800a846:	9305      	str	r3, [sp, #20]
 800a848:	4619      	mov	r1, r3
 800a84a:	f04f 0c0a 	mov.w	ip, #10
 800a84e:	4620      	mov	r0, r4
 800a850:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a854:	3a30      	subs	r2, #48	; 0x30
 800a856:	2a09      	cmp	r2, #9
 800a858:	d903      	bls.n	800a862 <_vfiprintf_r+0x1ee>
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d0c5      	beq.n	800a7ea <_vfiprintf_r+0x176>
 800a85e:	9105      	str	r1, [sp, #20]
 800a860:	e7c3      	b.n	800a7ea <_vfiprintf_r+0x176>
 800a862:	fb0c 2101 	mla	r1, ip, r1, r2
 800a866:	4604      	mov	r4, r0
 800a868:	2301      	movs	r3, #1
 800a86a:	e7f0      	b.n	800a84e <_vfiprintf_r+0x1da>
 800a86c:	ab03      	add	r3, sp, #12
 800a86e:	9300      	str	r3, [sp, #0]
 800a870:	462a      	mov	r2, r5
 800a872:	4b16      	ldr	r3, [pc, #88]	; (800a8cc <_vfiprintf_r+0x258>)
 800a874:	a904      	add	r1, sp, #16
 800a876:	4630      	mov	r0, r6
 800a878:	f3af 8000 	nop.w
 800a87c:	4607      	mov	r7, r0
 800a87e:	1c78      	adds	r0, r7, #1
 800a880:	d1d6      	bne.n	800a830 <_vfiprintf_r+0x1bc>
 800a882:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a884:	07d9      	lsls	r1, r3, #31
 800a886:	d405      	bmi.n	800a894 <_vfiprintf_r+0x220>
 800a888:	89ab      	ldrh	r3, [r5, #12]
 800a88a:	059a      	lsls	r2, r3, #22
 800a88c:	d402      	bmi.n	800a894 <_vfiprintf_r+0x220>
 800a88e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a890:	f000 fc35 	bl	800b0fe <__retarget_lock_release_recursive>
 800a894:	89ab      	ldrh	r3, [r5, #12]
 800a896:	065b      	lsls	r3, r3, #25
 800a898:	f53f af12 	bmi.w	800a6c0 <_vfiprintf_r+0x4c>
 800a89c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a89e:	e711      	b.n	800a6c4 <_vfiprintf_r+0x50>
 800a8a0:	ab03      	add	r3, sp, #12
 800a8a2:	9300      	str	r3, [sp, #0]
 800a8a4:	462a      	mov	r2, r5
 800a8a6:	4b09      	ldr	r3, [pc, #36]	; (800a8cc <_vfiprintf_r+0x258>)
 800a8a8:	a904      	add	r1, sp, #16
 800a8aa:	4630      	mov	r0, r6
 800a8ac:	f000 f880 	bl	800a9b0 <_printf_i>
 800a8b0:	e7e4      	b.n	800a87c <_vfiprintf_r+0x208>
 800a8b2:	bf00      	nop
 800a8b4:	0800bed8 	.word	0x0800bed8
 800a8b8:	0800bef8 	.word	0x0800bef8
 800a8bc:	0800beb8 	.word	0x0800beb8
 800a8c0:	0800be82 	.word	0x0800be82
 800a8c4:	0800be8c 	.word	0x0800be8c
 800a8c8:	00000000 	.word	0x00000000
 800a8cc:	0800a64f 	.word	0x0800a64f
 800a8d0:	0800be88 	.word	0x0800be88

0800a8d4 <_printf_common>:
 800a8d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8d8:	4616      	mov	r6, r2
 800a8da:	4699      	mov	r9, r3
 800a8dc:	688a      	ldr	r2, [r1, #8]
 800a8de:	690b      	ldr	r3, [r1, #16]
 800a8e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	bfb8      	it	lt
 800a8e8:	4613      	movlt	r3, r2
 800a8ea:	6033      	str	r3, [r6, #0]
 800a8ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a8f0:	4607      	mov	r7, r0
 800a8f2:	460c      	mov	r4, r1
 800a8f4:	b10a      	cbz	r2, 800a8fa <_printf_common+0x26>
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	6033      	str	r3, [r6, #0]
 800a8fa:	6823      	ldr	r3, [r4, #0]
 800a8fc:	0699      	lsls	r1, r3, #26
 800a8fe:	bf42      	ittt	mi
 800a900:	6833      	ldrmi	r3, [r6, #0]
 800a902:	3302      	addmi	r3, #2
 800a904:	6033      	strmi	r3, [r6, #0]
 800a906:	6825      	ldr	r5, [r4, #0]
 800a908:	f015 0506 	ands.w	r5, r5, #6
 800a90c:	d106      	bne.n	800a91c <_printf_common+0x48>
 800a90e:	f104 0a19 	add.w	sl, r4, #25
 800a912:	68e3      	ldr	r3, [r4, #12]
 800a914:	6832      	ldr	r2, [r6, #0]
 800a916:	1a9b      	subs	r3, r3, r2
 800a918:	42ab      	cmp	r3, r5
 800a91a:	dc26      	bgt.n	800a96a <_printf_common+0x96>
 800a91c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a920:	1e13      	subs	r3, r2, #0
 800a922:	6822      	ldr	r2, [r4, #0]
 800a924:	bf18      	it	ne
 800a926:	2301      	movne	r3, #1
 800a928:	0692      	lsls	r2, r2, #26
 800a92a:	d42b      	bmi.n	800a984 <_printf_common+0xb0>
 800a92c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a930:	4649      	mov	r1, r9
 800a932:	4638      	mov	r0, r7
 800a934:	47c0      	blx	r8
 800a936:	3001      	adds	r0, #1
 800a938:	d01e      	beq.n	800a978 <_printf_common+0xa4>
 800a93a:	6823      	ldr	r3, [r4, #0]
 800a93c:	68e5      	ldr	r5, [r4, #12]
 800a93e:	6832      	ldr	r2, [r6, #0]
 800a940:	f003 0306 	and.w	r3, r3, #6
 800a944:	2b04      	cmp	r3, #4
 800a946:	bf08      	it	eq
 800a948:	1aad      	subeq	r5, r5, r2
 800a94a:	68a3      	ldr	r3, [r4, #8]
 800a94c:	6922      	ldr	r2, [r4, #16]
 800a94e:	bf0c      	ite	eq
 800a950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a954:	2500      	movne	r5, #0
 800a956:	4293      	cmp	r3, r2
 800a958:	bfc4      	itt	gt
 800a95a:	1a9b      	subgt	r3, r3, r2
 800a95c:	18ed      	addgt	r5, r5, r3
 800a95e:	2600      	movs	r6, #0
 800a960:	341a      	adds	r4, #26
 800a962:	42b5      	cmp	r5, r6
 800a964:	d11a      	bne.n	800a99c <_printf_common+0xc8>
 800a966:	2000      	movs	r0, #0
 800a968:	e008      	b.n	800a97c <_printf_common+0xa8>
 800a96a:	2301      	movs	r3, #1
 800a96c:	4652      	mov	r2, sl
 800a96e:	4649      	mov	r1, r9
 800a970:	4638      	mov	r0, r7
 800a972:	47c0      	blx	r8
 800a974:	3001      	adds	r0, #1
 800a976:	d103      	bne.n	800a980 <_printf_common+0xac>
 800a978:	f04f 30ff 	mov.w	r0, #4294967295
 800a97c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a980:	3501      	adds	r5, #1
 800a982:	e7c6      	b.n	800a912 <_printf_common+0x3e>
 800a984:	18e1      	adds	r1, r4, r3
 800a986:	1c5a      	adds	r2, r3, #1
 800a988:	2030      	movs	r0, #48	; 0x30
 800a98a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a98e:	4422      	add	r2, r4
 800a990:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a994:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a998:	3302      	adds	r3, #2
 800a99a:	e7c7      	b.n	800a92c <_printf_common+0x58>
 800a99c:	2301      	movs	r3, #1
 800a99e:	4622      	mov	r2, r4
 800a9a0:	4649      	mov	r1, r9
 800a9a2:	4638      	mov	r0, r7
 800a9a4:	47c0      	blx	r8
 800a9a6:	3001      	adds	r0, #1
 800a9a8:	d0e6      	beq.n	800a978 <_printf_common+0xa4>
 800a9aa:	3601      	adds	r6, #1
 800a9ac:	e7d9      	b.n	800a962 <_printf_common+0x8e>
	...

0800a9b0 <_printf_i>:
 800a9b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9b4:	460c      	mov	r4, r1
 800a9b6:	4691      	mov	r9, r2
 800a9b8:	7e27      	ldrb	r7, [r4, #24]
 800a9ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a9bc:	2f78      	cmp	r7, #120	; 0x78
 800a9be:	4680      	mov	r8, r0
 800a9c0:	469a      	mov	sl, r3
 800a9c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a9c6:	d807      	bhi.n	800a9d8 <_printf_i+0x28>
 800a9c8:	2f62      	cmp	r7, #98	; 0x62
 800a9ca:	d80a      	bhi.n	800a9e2 <_printf_i+0x32>
 800a9cc:	2f00      	cmp	r7, #0
 800a9ce:	f000 80d8 	beq.w	800ab82 <_printf_i+0x1d2>
 800a9d2:	2f58      	cmp	r7, #88	; 0x58
 800a9d4:	f000 80a3 	beq.w	800ab1e <_printf_i+0x16e>
 800a9d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a9dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a9e0:	e03a      	b.n	800aa58 <_printf_i+0xa8>
 800a9e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a9e6:	2b15      	cmp	r3, #21
 800a9e8:	d8f6      	bhi.n	800a9d8 <_printf_i+0x28>
 800a9ea:	a001      	add	r0, pc, #4	; (adr r0, 800a9f0 <_printf_i+0x40>)
 800a9ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a9f0:	0800aa49 	.word	0x0800aa49
 800a9f4:	0800aa5d 	.word	0x0800aa5d
 800a9f8:	0800a9d9 	.word	0x0800a9d9
 800a9fc:	0800a9d9 	.word	0x0800a9d9
 800aa00:	0800a9d9 	.word	0x0800a9d9
 800aa04:	0800a9d9 	.word	0x0800a9d9
 800aa08:	0800aa5d 	.word	0x0800aa5d
 800aa0c:	0800a9d9 	.word	0x0800a9d9
 800aa10:	0800a9d9 	.word	0x0800a9d9
 800aa14:	0800a9d9 	.word	0x0800a9d9
 800aa18:	0800a9d9 	.word	0x0800a9d9
 800aa1c:	0800ab69 	.word	0x0800ab69
 800aa20:	0800aa8d 	.word	0x0800aa8d
 800aa24:	0800ab4b 	.word	0x0800ab4b
 800aa28:	0800a9d9 	.word	0x0800a9d9
 800aa2c:	0800a9d9 	.word	0x0800a9d9
 800aa30:	0800ab8b 	.word	0x0800ab8b
 800aa34:	0800a9d9 	.word	0x0800a9d9
 800aa38:	0800aa8d 	.word	0x0800aa8d
 800aa3c:	0800a9d9 	.word	0x0800a9d9
 800aa40:	0800a9d9 	.word	0x0800a9d9
 800aa44:	0800ab53 	.word	0x0800ab53
 800aa48:	680b      	ldr	r3, [r1, #0]
 800aa4a:	1d1a      	adds	r2, r3, #4
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	600a      	str	r2, [r1, #0]
 800aa50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aa54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa58:	2301      	movs	r3, #1
 800aa5a:	e0a3      	b.n	800aba4 <_printf_i+0x1f4>
 800aa5c:	6825      	ldr	r5, [r4, #0]
 800aa5e:	6808      	ldr	r0, [r1, #0]
 800aa60:	062e      	lsls	r6, r5, #24
 800aa62:	f100 0304 	add.w	r3, r0, #4
 800aa66:	d50a      	bpl.n	800aa7e <_printf_i+0xce>
 800aa68:	6805      	ldr	r5, [r0, #0]
 800aa6a:	600b      	str	r3, [r1, #0]
 800aa6c:	2d00      	cmp	r5, #0
 800aa6e:	da03      	bge.n	800aa78 <_printf_i+0xc8>
 800aa70:	232d      	movs	r3, #45	; 0x2d
 800aa72:	426d      	negs	r5, r5
 800aa74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa78:	485e      	ldr	r0, [pc, #376]	; (800abf4 <_printf_i+0x244>)
 800aa7a:	230a      	movs	r3, #10
 800aa7c:	e019      	b.n	800aab2 <_printf_i+0x102>
 800aa7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800aa82:	6805      	ldr	r5, [r0, #0]
 800aa84:	600b      	str	r3, [r1, #0]
 800aa86:	bf18      	it	ne
 800aa88:	b22d      	sxthne	r5, r5
 800aa8a:	e7ef      	b.n	800aa6c <_printf_i+0xbc>
 800aa8c:	680b      	ldr	r3, [r1, #0]
 800aa8e:	6825      	ldr	r5, [r4, #0]
 800aa90:	1d18      	adds	r0, r3, #4
 800aa92:	6008      	str	r0, [r1, #0]
 800aa94:	0628      	lsls	r0, r5, #24
 800aa96:	d501      	bpl.n	800aa9c <_printf_i+0xec>
 800aa98:	681d      	ldr	r5, [r3, #0]
 800aa9a:	e002      	b.n	800aaa2 <_printf_i+0xf2>
 800aa9c:	0669      	lsls	r1, r5, #25
 800aa9e:	d5fb      	bpl.n	800aa98 <_printf_i+0xe8>
 800aaa0:	881d      	ldrh	r5, [r3, #0]
 800aaa2:	4854      	ldr	r0, [pc, #336]	; (800abf4 <_printf_i+0x244>)
 800aaa4:	2f6f      	cmp	r7, #111	; 0x6f
 800aaa6:	bf0c      	ite	eq
 800aaa8:	2308      	moveq	r3, #8
 800aaaa:	230a      	movne	r3, #10
 800aaac:	2100      	movs	r1, #0
 800aaae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aab2:	6866      	ldr	r6, [r4, #4]
 800aab4:	60a6      	str	r6, [r4, #8]
 800aab6:	2e00      	cmp	r6, #0
 800aab8:	bfa2      	ittt	ge
 800aaba:	6821      	ldrge	r1, [r4, #0]
 800aabc:	f021 0104 	bicge.w	r1, r1, #4
 800aac0:	6021      	strge	r1, [r4, #0]
 800aac2:	b90d      	cbnz	r5, 800aac8 <_printf_i+0x118>
 800aac4:	2e00      	cmp	r6, #0
 800aac6:	d04d      	beq.n	800ab64 <_printf_i+0x1b4>
 800aac8:	4616      	mov	r6, r2
 800aaca:	fbb5 f1f3 	udiv	r1, r5, r3
 800aace:	fb03 5711 	mls	r7, r3, r1, r5
 800aad2:	5dc7      	ldrb	r7, [r0, r7]
 800aad4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aad8:	462f      	mov	r7, r5
 800aada:	42bb      	cmp	r3, r7
 800aadc:	460d      	mov	r5, r1
 800aade:	d9f4      	bls.n	800aaca <_printf_i+0x11a>
 800aae0:	2b08      	cmp	r3, #8
 800aae2:	d10b      	bne.n	800aafc <_printf_i+0x14c>
 800aae4:	6823      	ldr	r3, [r4, #0]
 800aae6:	07df      	lsls	r7, r3, #31
 800aae8:	d508      	bpl.n	800aafc <_printf_i+0x14c>
 800aaea:	6923      	ldr	r3, [r4, #16]
 800aaec:	6861      	ldr	r1, [r4, #4]
 800aaee:	4299      	cmp	r1, r3
 800aaf0:	bfde      	ittt	le
 800aaf2:	2330      	movle	r3, #48	; 0x30
 800aaf4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aaf8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aafc:	1b92      	subs	r2, r2, r6
 800aafe:	6122      	str	r2, [r4, #16]
 800ab00:	f8cd a000 	str.w	sl, [sp]
 800ab04:	464b      	mov	r3, r9
 800ab06:	aa03      	add	r2, sp, #12
 800ab08:	4621      	mov	r1, r4
 800ab0a:	4640      	mov	r0, r8
 800ab0c:	f7ff fee2 	bl	800a8d4 <_printf_common>
 800ab10:	3001      	adds	r0, #1
 800ab12:	d14c      	bne.n	800abae <_printf_i+0x1fe>
 800ab14:	f04f 30ff 	mov.w	r0, #4294967295
 800ab18:	b004      	add	sp, #16
 800ab1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab1e:	4835      	ldr	r0, [pc, #212]	; (800abf4 <_printf_i+0x244>)
 800ab20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ab24:	6823      	ldr	r3, [r4, #0]
 800ab26:	680e      	ldr	r6, [r1, #0]
 800ab28:	061f      	lsls	r7, r3, #24
 800ab2a:	f856 5b04 	ldr.w	r5, [r6], #4
 800ab2e:	600e      	str	r6, [r1, #0]
 800ab30:	d514      	bpl.n	800ab5c <_printf_i+0x1ac>
 800ab32:	07d9      	lsls	r1, r3, #31
 800ab34:	bf44      	itt	mi
 800ab36:	f043 0320 	orrmi.w	r3, r3, #32
 800ab3a:	6023      	strmi	r3, [r4, #0]
 800ab3c:	b91d      	cbnz	r5, 800ab46 <_printf_i+0x196>
 800ab3e:	6823      	ldr	r3, [r4, #0]
 800ab40:	f023 0320 	bic.w	r3, r3, #32
 800ab44:	6023      	str	r3, [r4, #0]
 800ab46:	2310      	movs	r3, #16
 800ab48:	e7b0      	b.n	800aaac <_printf_i+0xfc>
 800ab4a:	6823      	ldr	r3, [r4, #0]
 800ab4c:	f043 0320 	orr.w	r3, r3, #32
 800ab50:	6023      	str	r3, [r4, #0]
 800ab52:	2378      	movs	r3, #120	; 0x78
 800ab54:	4828      	ldr	r0, [pc, #160]	; (800abf8 <_printf_i+0x248>)
 800ab56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ab5a:	e7e3      	b.n	800ab24 <_printf_i+0x174>
 800ab5c:	065e      	lsls	r6, r3, #25
 800ab5e:	bf48      	it	mi
 800ab60:	b2ad      	uxthmi	r5, r5
 800ab62:	e7e6      	b.n	800ab32 <_printf_i+0x182>
 800ab64:	4616      	mov	r6, r2
 800ab66:	e7bb      	b.n	800aae0 <_printf_i+0x130>
 800ab68:	680b      	ldr	r3, [r1, #0]
 800ab6a:	6826      	ldr	r6, [r4, #0]
 800ab6c:	6960      	ldr	r0, [r4, #20]
 800ab6e:	1d1d      	adds	r5, r3, #4
 800ab70:	600d      	str	r5, [r1, #0]
 800ab72:	0635      	lsls	r5, r6, #24
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	d501      	bpl.n	800ab7c <_printf_i+0x1cc>
 800ab78:	6018      	str	r0, [r3, #0]
 800ab7a:	e002      	b.n	800ab82 <_printf_i+0x1d2>
 800ab7c:	0671      	lsls	r1, r6, #25
 800ab7e:	d5fb      	bpl.n	800ab78 <_printf_i+0x1c8>
 800ab80:	8018      	strh	r0, [r3, #0]
 800ab82:	2300      	movs	r3, #0
 800ab84:	6123      	str	r3, [r4, #16]
 800ab86:	4616      	mov	r6, r2
 800ab88:	e7ba      	b.n	800ab00 <_printf_i+0x150>
 800ab8a:	680b      	ldr	r3, [r1, #0]
 800ab8c:	1d1a      	adds	r2, r3, #4
 800ab8e:	600a      	str	r2, [r1, #0]
 800ab90:	681e      	ldr	r6, [r3, #0]
 800ab92:	6862      	ldr	r2, [r4, #4]
 800ab94:	2100      	movs	r1, #0
 800ab96:	4630      	mov	r0, r6
 800ab98:	f7f5 ff22 	bl	80009e0 <memchr>
 800ab9c:	b108      	cbz	r0, 800aba2 <_printf_i+0x1f2>
 800ab9e:	1b80      	subs	r0, r0, r6
 800aba0:	6060      	str	r0, [r4, #4]
 800aba2:	6863      	ldr	r3, [r4, #4]
 800aba4:	6123      	str	r3, [r4, #16]
 800aba6:	2300      	movs	r3, #0
 800aba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abac:	e7a8      	b.n	800ab00 <_printf_i+0x150>
 800abae:	6923      	ldr	r3, [r4, #16]
 800abb0:	4632      	mov	r2, r6
 800abb2:	4649      	mov	r1, r9
 800abb4:	4640      	mov	r0, r8
 800abb6:	47d0      	blx	sl
 800abb8:	3001      	adds	r0, #1
 800abba:	d0ab      	beq.n	800ab14 <_printf_i+0x164>
 800abbc:	6823      	ldr	r3, [r4, #0]
 800abbe:	079b      	lsls	r3, r3, #30
 800abc0:	d413      	bmi.n	800abea <_printf_i+0x23a>
 800abc2:	68e0      	ldr	r0, [r4, #12]
 800abc4:	9b03      	ldr	r3, [sp, #12]
 800abc6:	4298      	cmp	r0, r3
 800abc8:	bfb8      	it	lt
 800abca:	4618      	movlt	r0, r3
 800abcc:	e7a4      	b.n	800ab18 <_printf_i+0x168>
 800abce:	2301      	movs	r3, #1
 800abd0:	4632      	mov	r2, r6
 800abd2:	4649      	mov	r1, r9
 800abd4:	4640      	mov	r0, r8
 800abd6:	47d0      	blx	sl
 800abd8:	3001      	adds	r0, #1
 800abda:	d09b      	beq.n	800ab14 <_printf_i+0x164>
 800abdc:	3501      	adds	r5, #1
 800abde:	68e3      	ldr	r3, [r4, #12]
 800abe0:	9903      	ldr	r1, [sp, #12]
 800abe2:	1a5b      	subs	r3, r3, r1
 800abe4:	42ab      	cmp	r3, r5
 800abe6:	dcf2      	bgt.n	800abce <_printf_i+0x21e>
 800abe8:	e7eb      	b.n	800abc2 <_printf_i+0x212>
 800abea:	2500      	movs	r5, #0
 800abec:	f104 0619 	add.w	r6, r4, #25
 800abf0:	e7f5      	b.n	800abde <_printf_i+0x22e>
 800abf2:	bf00      	nop
 800abf4:	0800be93 	.word	0x0800be93
 800abf8:	0800bea4 	.word	0x0800bea4

0800abfc <__swbuf_r>:
 800abfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abfe:	460e      	mov	r6, r1
 800ac00:	4614      	mov	r4, r2
 800ac02:	4605      	mov	r5, r0
 800ac04:	b118      	cbz	r0, 800ac0e <__swbuf_r+0x12>
 800ac06:	6983      	ldr	r3, [r0, #24]
 800ac08:	b90b      	cbnz	r3, 800ac0e <__swbuf_r+0x12>
 800ac0a:	f000 f9d9 	bl	800afc0 <__sinit>
 800ac0e:	4b21      	ldr	r3, [pc, #132]	; (800ac94 <__swbuf_r+0x98>)
 800ac10:	429c      	cmp	r4, r3
 800ac12:	d12b      	bne.n	800ac6c <__swbuf_r+0x70>
 800ac14:	686c      	ldr	r4, [r5, #4]
 800ac16:	69a3      	ldr	r3, [r4, #24]
 800ac18:	60a3      	str	r3, [r4, #8]
 800ac1a:	89a3      	ldrh	r3, [r4, #12]
 800ac1c:	071a      	lsls	r2, r3, #28
 800ac1e:	d52f      	bpl.n	800ac80 <__swbuf_r+0x84>
 800ac20:	6923      	ldr	r3, [r4, #16]
 800ac22:	b36b      	cbz	r3, 800ac80 <__swbuf_r+0x84>
 800ac24:	6923      	ldr	r3, [r4, #16]
 800ac26:	6820      	ldr	r0, [r4, #0]
 800ac28:	1ac0      	subs	r0, r0, r3
 800ac2a:	6963      	ldr	r3, [r4, #20]
 800ac2c:	b2f6      	uxtb	r6, r6
 800ac2e:	4283      	cmp	r3, r0
 800ac30:	4637      	mov	r7, r6
 800ac32:	dc04      	bgt.n	800ac3e <__swbuf_r+0x42>
 800ac34:	4621      	mov	r1, r4
 800ac36:	4628      	mov	r0, r5
 800ac38:	f000 f92e 	bl	800ae98 <_fflush_r>
 800ac3c:	bb30      	cbnz	r0, 800ac8c <__swbuf_r+0x90>
 800ac3e:	68a3      	ldr	r3, [r4, #8]
 800ac40:	3b01      	subs	r3, #1
 800ac42:	60a3      	str	r3, [r4, #8]
 800ac44:	6823      	ldr	r3, [r4, #0]
 800ac46:	1c5a      	adds	r2, r3, #1
 800ac48:	6022      	str	r2, [r4, #0]
 800ac4a:	701e      	strb	r6, [r3, #0]
 800ac4c:	6963      	ldr	r3, [r4, #20]
 800ac4e:	3001      	adds	r0, #1
 800ac50:	4283      	cmp	r3, r0
 800ac52:	d004      	beq.n	800ac5e <__swbuf_r+0x62>
 800ac54:	89a3      	ldrh	r3, [r4, #12]
 800ac56:	07db      	lsls	r3, r3, #31
 800ac58:	d506      	bpl.n	800ac68 <__swbuf_r+0x6c>
 800ac5a:	2e0a      	cmp	r6, #10
 800ac5c:	d104      	bne.n	800ac68 <__swbuf_r+0x6c>
 800ac5e:	4621      	mov	r1, r4
 800ac60:	4628      	mov	r0, r5
 800ac62:	f000 f919 	bl	800ae98 <_fflush_r>
 800ac66:	b988      	cbnz	r0, 800ac8c <__swbuf_r+0x90>
 800ac68:	4638      	mov	r0, r7
 800ac6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac6c:	4b0a      	ldr	r3, [pc, #40]	; (800ac98 <__swbuf_r+0x9c>)
 800ac6e:	429c      	cmp	r4, r3
 800ac70:	d101      	bne.n	800ac76 <__swbuf_r+0x7a>
 800ac72:	68ac      	ldr	r4, [r5, #8]
 800ac74:	e7cf      	b.n	800ac16 <__swbuf_r+0x1a>
 800ac76:	4b09      	ldr	r3, [pc, #36]	; (800ac9c <__swbuf_r+0xa0>)
 800ac78:	429c      	cmp	r4, r3
 800ac7a:	bf08      	it	eq
 800ac7c:	68ec      	ldreq	r4, [r5, #12]
 800ac7e:	e7ca      	b.n	800ac16 <__swbuf_r+0x1a>
 800ac80:	4621      	mov	r1, r4
 800ac82:	4628      	mov	r0, r5
 800ac84:	f000 f80c 	bl	800aca0 <__swsetup_r>
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	d0cb      	beq.n	800ac24 <__swbuf_r+0x28>
 800ac8c:	f04f 37ff 	mov.w	r7, #4294967295
 800ac90:	e7ea      	b.n	800ac68 <__swbuf_r+0x6c>
 800ac92:	bf00      	nop
 800ac94:	0800bed8 	.word	0x0800bed8
 800ac98:	0800bef8 	.word	0x0800bef8
 800ac9c:	0800beb8 	.word	0x0800beb8

0800aca0 <__swsetup_r>:
 800aca0:	4b32      	ldr	r3, [pc, #200]	; (800ad6c <__swsetup_r+0xcc>)
 800aca2:	b570      	push	{r4, r5, r6, lr}
 800aca4:	681d      	ldr	r5, [r3, #0]
 800aca6:	4606      	mov	r6, r0
 800aca8:	460c      	mov	r4, r1
 800acaa:	b125      	cbz	r5, 800acb6 <__swsetup_r+0x16>
 800acac:	69ab      	ldr	r3, [r5, #24]
 800acae:	b913      	cbnz	r3, 800acb6 <__swsetup_r+0x16>
 800acb0:	4628      	mov	r0, r5
 800acb2:	f000 f985 	bl	800afc0 <__sinit>
 800acb6:	4b2e      	ldr	r3, [pc, #184]	; (800ad70 <__swsetup_r+0xd0>)
 800acb8:	429c      	cmp	r4, r3
 800acba:	d10f      	bne.n	800acdc <__swsetup_r+0x3c>
 800acbc:	686c      	ldr	r4, [r5, #4]
 800acbe:	89a3      	ldrh	r3, [r4, #12]
 800acc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800acc4:	0719      	lsls	r1, r3, #28
 800acc6:	d42c      	bmi.n	800ad22 <__swsetup_r+0x82>
 800acc8:	06dd      	lsls	r5, r3, #27
 800acca:	d411      	bmi.n	800acf0 <__swsetup_r+0x50>
 800accc:	2309      	movs	r3, #9
 800acce:	6033      	str	r3, [r6, #0]
 800acd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800acd4:	81a3      	strh	r3, [r4, #12]
 800acd6:	f04f 30ff 	mov.w	r0, #4294967295
 800acda:	e03e      	b.n	800ad5a <__swsetup_r+0xba>
 800acdc:	4b25      	ldr	r3, [pc, #148]	; (800ad74 <__swsetup_r+0xd4>)
 800acde:	429c      	cmp	r4, r3
 800ace0:	d101      	bne.n	800ace6 <__swsetup_r+0x46>
 800ace2:	68ac      	ldr	r4, [r5, #8]
 800ace4:	e7eb      	b.n	800acbe <__swsetup_r+0x1e>
 800ace6:	4b24      	ldr	r3, [pc, #144]	; (800ad78 <__swsetup_r+0xd8>)
 800ace8:	429c      	cmp	r4, r3
 800acea:	bf08      	it	eq
 800acec:	68ec      	ldreq	r4, [r5, #12]
 800acee:	e7e6      	b.n	800acbe <__swsetup_r+0x1e>
 800acf0:	0758      	lsls	r0, r3, #29
 800acf2:	d512      	bpl.n	800ad1a <__swsetup_r+0x7a>
 800acf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acf6:	b141      	cbz	r1, 800ad0a <__swsetup_r+0x6a>
 800acf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acfc:	4299      	cmp	r1, r3
 800acfe:	d002      	beq.n	800ad06 <__swsetup_r+0x66>
 800ad00:	4630      	mov	r0, r6
 800ad02:	f7ff f8b3 	bl	8009e6c <_free_r>
 800ad06:	2300      	movs	r3, #0
 800ad08:	6363      	str	r3, [r4, #52]	; 0x34
 800ad0a:	89a3      	ldrh	r3, [r4, #12]
 800ad0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ad10:	81a3      	strh	r3, [r4, #12]
 800ad12:	2300      	movs	r3, #0
 800ad14:	6063      	str	r3, [r4, #4]
 800ad16:	6923      	ldr	r3, [r4, #16]
 800ad18:	6023      	str	r3, [r4, #0]
 800ad1a:	89a3      	ldrh	r3, [r4, #12]
 800ad1c:	f043 0308 	orr.w	r3, r3, #8
 800ad20:	81a3      	strh	r3, [r4, #12]
 800ad22:	6923      	ldr	r3, [r4, #16]
 800ad24:	b94b      	cbnz	r3, 800ad3a <__swsetup_r+0x9a>
 800ad26:	89a3      	ldrh	r3, [r4, #12]
 800ad28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad30:	d003      	beq.n	800ad3a <__swsetup_r+0x9a>
 800ad32:	4621      	mov	r1, r4
 800ad34:	4630      	mov	r0, r6
 800ad36:	f000 fa07 	bl	800b148 <__smakebuf_r>
 800ad3a:	89a0      	ldrh	r0, [r4, #12]
 800ad3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad40:	f010 0301 	ands.w	r3, r0, #1
 800ad44:	d00a      	beq.n	800ad5c <__swsetup_r+0xbc>
 800ad46:	2300      	movs	r3, #0
 800ad48:	60a3      	str	r3, [r4, #8]
 800ad4a:	6963      	ldr	r3, [r4, #20]
 800ad4c:	425b      	negs	r3, r3
 800ad4e:	61a3      	str	r3, [r4, #24]
 800ad50:	6923      	ldr	r3, [r4, #16]
 800ad52:	b943      	cbnz	r3, 800ad66 <__swsetup_r+0xc6>
 800ad54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad58:	d1ba      	bne.n	800acd0 <__swsetup_r+0x30>
 800ad5a:	bd70      	pop	{r4, r5, r6, pc}
 800ad5c:	0781      	lsls	r1, r0, #30
 800ad5e:	bf58      	it	pl
 800ad60:	6963      	ldrpl	r3, [r4, #20]
 800ad62:	60a3      	str	r3, [r4, #8]
 800ad64:	e7f4      	b.n	800ad50 <__swsetup_r+0xb0>
 800ad66:	2000      	movs	r0, #0
 800ad68:	e7f7      	b.n	800ad5a <__swsetup_r+0xba>
 800ad6a:	bf00      	nop
 800ad6c:	20001a60 	.word	0x20001a60
 800ad70:	0800bed8 	.word	0x0800bed8
 800ad74:	0800bef8 	.word	0x0800bef8
 800ad78:	0800beb8 	.word	0x0800beb8

0800ad7c <abort>:
 800ad7c:	b508      	push	{r3, lr}
 800ad7e:	2006      	movs	r0, #6
 800ad80:	f000 fa8a 	bl	800b298 <raise>
 800ad84:	2001      	movs	r0, #1
 800ad86:	f7f8 fdd9 	bl	800393c <_exit>
	...

0800ad8c <__sflush_r>:
 800ad8c:	898a      	ldrh	r2, [r1, #12]
 800ad8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad92:	4605      	mov	r5, r0
 800ad94:	0710      	lsls	r0, r2, #28
 800ad96:	460c      	mov	r4, r1
 800ad98:	d458      	bmi.n	800ae4c <__sflush_r+0xc0>
 800ad9a:	684b      	ldr	r3, [r1, #4]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	dc05      	bgt.n	800adac <__sflush_r+0x20>
 800ada0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	dc02      	bgt.n	800adac <__sflush_r+0x20>
 800ada6:	2000      	movs	r0, #0
 800ada8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adae:	2e00      	cmp	r6, #0
 800adb0:	d0f9      	beq.n	800ada6 <__sflush_r+0x1a>
 800adb2:	2300      	movs	r3, #0
 800adb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800adb8:	682f      	ldr	r7, [r5, #0]
 800adba:	602b      	str	r3, [r5, #0]
 800adbc:	d032      	beq.n	800ae24 <__sflush_r+0x98>
 800adbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800adc0:	89a3      	ldrh	r3, [r4, #12]
 800adc2:	075a      	lsls	r2, r3, #29
 800adc4:	d505      	bpl.n	800add2 <__sflush_r+0x46>
 800adc6:	6863      	ldr	r3, [r4, #4]
 800adc8:	1ac0      	subs	r0, r0, r3
 800adca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800adcc:	b10b      	cbz	r3, 800add2 <__sflush_r+0x46>
 800adce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800add0:	1ac0      	subs	r0, r0, r3
 800add2:	2300      	movs	r3, #0
 800add4:	4602      	mov	r2, r0
 800add6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800add8:	6a21      	ldr	r1, [r4, #32]
 800adda:	4628      	mov	r0, r5
 800addc:	47b0      	blx	r6
 800adde:	1c43      	adds	r3, r0, #1
 800ade0:	89a3      	ldrh	r3, [r4, #12]
 800ade2:	d106      	bne.n	800adf2 <__sflush_r+0x66>
 800ade4:	6829      	ldr	r1, [r5, #0]
 800ade6:	291d      	cmp	r1, #29
 800ade8:	d82c      	bhi.n	800ae44 <__sflush_r+0xb8>
 800adea:	4a2a      	ldr	r2, [pc, #168]	; (800ae94 <__sflush_r+0x108>)
 800adec:	40ca      	lsrs	r2, r1
 800adee:	07d6      	lsls	r6, r2, #31
 800adf0:	d528      	bpl.n	800ae44 <__sflush_r+0xb8>
 800adf2:	2200      	movs	r2, #0
 800adf4:	6062      	str	r2, [r4, #4]
 800adf6:	04d9      	lsls	r1, r3, #19
 800adf8:	6922      	ldr	r2, [r4, #16]
 800adfa:	6022      	str	r2, [r4, #0]
 800adfc:	d504      	bpl.n	800ae08 <__sflush_r+0x7c>
 800adfe:	1c42      	adds	r2, r0, #1
 800ae00:	d101      	bne.n	800ae06 <__sflush_r+0x7a>
 800ae02:	682b      	ldr	r3, [r5, #0]
 800ae04:	b903      	cbnz	r3, 800ae08 <__sflush_r+0x7c>
 800ae06:	6560      	str	r0, [r4, #84]	; 0x54
 800ae08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae0a:	602f      	str	r7, [r5, #0]
 800ae0c:	2900      	cmp	r1, #0
 800ae0e:	d0ca      	beq.n	800ada6 <__sflush_r+0x1a>
 800ae10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae14:	4299      	cmp	r1, r3
 800ae16:	d002      	beq.n	800ae1e <__sflush_r+0x92>
 800ae18:	4628      	mov	r0, r5
 800ae1a:	f7ff f827 	bl	8009e6c <_free_r>
 800ae1e:	2000      	movs	r0, #0
 800ae20:	6360      	str	r0, [r4, #52]	; 0x34
 800ae22:	e7c1      	b.n	800ada8 <__sflush_r+0x1c>
 800ae24:	6a21      	ldr	r1, [r4, #32]
 800ae26:	2301      	movs	r3, #1
 800ae28:	4628      	mov	r0, r5
 800ae2a:	47b0      	blx	r6
 800ae2c:	1c41      	adds	r1, r0, #1
 800ae2e:	d1c7      	bne.n	800adc0 <__sflush_r+0x34>
 800ae30:	682b      	ldr	r3, [r5, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d0c4      	beq.n	800adc0 <__sflush_r+0x34>
 800ae36:	2b1d      	cmp	r3, #29
 800ae38:	d001      	beq.n	800ae3e <__sflush_r+0xb2>
 800ae3a:	2b16      	cmp	r3, #22
 800ae3c:	d101      	bne.n	800ae42 <__sflush_r+0xb6>
 800ae3e:	602f      	str	r7, [r5, #0]
 800ae40:	e7b1      	b.n	800ada6 <__sflush_r+0x1a>
 800ae42:	89a3      	ldrh	r3, [r4, #12]
 800ae44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae48:	81a3      	strh	r3, [r4, #12]
 800ae4a:	e7ad      	b.n	800ada8 <__sflush_r+0x1c>
 800ae4c:	690f      	ldr	r7, [r1, #16]
 800ae4e:	2f00      	cmp	r7, #0
 800ae50:	d0a9      	beq.n	800ada6 <__sflush_r+0x1a>
 800ae52:	0793      	lsls	r3, r2, #30
 800ae54:	680e      	ldr	r6, [r1, #0]
 800ae56:	bf08      	it	eq
 800ae58:	694b      	ldreq	r3, [r1, #20]
 800ae5a:	600f      	str	r7, [r1, #0]
 800ae5c:	bf18      	it	ne
 800ae5e:	2300      	movne	r3, #0
 800ae60:	eba6 0807 	sub.w	r8, r6, r7
 800ae64:	608b      	str	r3, [r1, #8]
 800ae66:	f1b8 0f00 	cmp.w	r8, #0
 800ae6a:	dd9c      	ble.n	800ada6 <__sflush_r+0x1a>
 800ae6c:	6a21      	ldr	r1, [r4, #32]
 800ae6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae70:	4643      	mov	r3, r8
 800ae72:	463a      	mov	r2, r7
 800ae74:	4628      	mov	r0, r5
 800ae76:	47b0      	blx	r6
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	dc06      	bgt.n	800ae8a <__sflush_r+0xfe>
 800ae7c:	89a3      	ldrh	r3, [r4, #12]
 800ae7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae82:	81a3      	strh	r3, [r4, #12]
 800ae84:	f04f 30ff 	mov.w	r0, #4294967295
 800ae88:	e78e      	b.n	800ada8 <__sflush_r+0x1c>
 800ae8a:	4407      	add	r7, r0
 800ae8c:	eba8 0800 	sub.w	r8, r8, r0
 800ae90:	e7e9      	b.n	800ae66 <__sflush_r+0xda>
 800ae92:	bf00      	nop
 800ae94:	20400001 	.word	0x20400001

0800ae98 <_fflush_r>:
 800ae98:	b538      	push	{r3, r4, r5, lr}
 800ae9a:	690b      	ldr	r3, [r1, #16]
 800ae9c:	4605      	mov	r5, r0
 800ae9e:	460c      	mov	r4, r1
 800aea0:	b913      	cbnz	r3, 800aea8 <_fflush_r+0x10>
 800aea2:	2500      	movs	r5, #0
 800aea4:	4628      	mov	r0, r5
 800aea6:	bd38      	pop	{r3, r4, r5, pc}
 800aea8:	b118      	cbz	r0, 800aeb2 <_fflush_r+0x1a>
 800aeaa:	6983      	ldr	r3, [r0, #24]
 800aeac:	b90b      	cbnz	r3, 800aeb2 <_fflush_r+0x1a>
 800aeae:	f000 f887 	bl	800afc0 <__sinit>
 800aeb2:	4b14      	ldr	r3, [pc, #80]	; (800af04 <_fflush_r+0x6c>)
 800aeb4:	429c      	cmp	r4, r3
 800aeb6:	d11b      	bne.n	800aef0 <_fflush_r+0x58>
 800aeb8:	686c      	ldr	r4, [r5, #4]
 800aeba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d0ef      	beq.n	800aea2 <_fflush_r+0xa>
 800aec2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aec4:	07d0      	lsls	r0, r2, #31
 800aec6:	d404      	bmi.n	800aed2 <_fflush_r+0x3a>
 800aec8:	0599      	lsls	r1, r3, #22
 800aeca:	d402      	bmi.n	800aed2 <_fflush_r+0x3a>
 800aecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aece:	f000 f915 	bl	800b0fc <__retarget_lock_acquire_recursive>
 800aed2:	4628      	mov	r0, r5
 800aed4:	4621      	mov	r1, r4
 800aed6:	f7ff ff59 	bl	800ad8c <__sflush_r>
 800aeda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aedc:	07da      	lsls	r2, r3, #31
 800aede:	4605      	mov	r5, r0
 800aee0:	d4e0      	bmi.n	800aea4 <_fflush_r+0xc>
 800aee2:	89a3      	ldrh	r3, [r4, #12]
 800aee4:	059b      	lsls	r3, r3, #22
 800aee6:	d4dd      	bmi.n	800aea4 <_fflush_r+0xc>
 800aee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeea:	f000 f908 	bl	800b0fe <__retarget_lock_release_recursive>
 800aeee:	e7d9      	b.n	800aea4 <_fflush_r+0xc>
 800aef0:	4b05      	ldr	r3, [pc, #20]	; (800af08 <_fflush_r+0x70>)
 800aef2:	429c      	cmp	r4, r3
 800aef4:	d101      	bne.n	800aefa <_fflush_r+0x62>
 800aef6:	68ac      	ldr	r4, [r5, #8]
 800aef8:	e7df      	b.n	800aeba <_fflush_r+0x22>
 800aefa:	4b04      	ldr	r3, [pc, #16]	; (800af0c <_fflush_r+0x74>)
 800aefc:	429c      	cmp	r4, r3
 800aefe:	bf08      	it	eq
 800af00:	68ec      	ldreq	r4, [r5, #12]
 800af02:	e7da      	b.n	800aeba <_fflush_r+0x22>
 800af04:	0800bed8 	.word	0x0800bed8
 800af08:	0800bef8 	.word	0x0800bef8
 800af0c:	0800beb8 	.word	0x0800beb8

0800af10 <std>:
 800af10:	2300      	movs	r3, #0
 800af12:	b510      	push	{r4, lr}
 800af14:	4604      	mov	r4, r0
 800af16:	e9c0 3300 	strd	r3, r3, [r0]
 800af1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af1e:	6083      	str	r3, [r0, #8]
 800af20:	8181      	strh	r1, [r0, #12]
 800af22:	6643      	str	r3, [r0, #100]	; 0x64
 800af24:	81c2      	strh	r2, [r0, #14]
 800af26:	6183      	str	r3, [r0, #24]
 800af28:	4619      	mov	r1, r3
 800af2a:	2208      	movs	r2, #8
 800af2c:	305c      	adds	r0, #92	; 0x5c
 800af2e:	f7fe ff95 	bl	8009e5c <memset>
 800af32:	4b05      	ldr	r3, [pc, #20]	; (800af48 <std+0x38>)
 800af34:	6263      	str	r3, [r4, #36]	; 0x24
 800af36:	4b05      	ldr	r3, [pc, #20]	; (800af4c <std+0x3c>)
 800af38:	62a3      	str	r3, [r4, #40]	; 0x28
 800af3a:	4b05      	ldr	r3, [pc, #20]	; (800af50 <std+0x40>)
 800af3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af3e:	4b05      	ldr	r3, [pc, #20]	; (800af54 <std+0x44>)
 800af40:	6224      	str	r4, [r4, #32]
 800af42:	6323      	str	r3, [r4, #48]	; 0x30
 800af44:	bd10      	pop	{r4, pc}
 800af46:	bf00      	nop
 800af48:	0800b2d1 	.word	0x0800b2d1
 800af4c:	0800b2f3 	.word	0x0800b2f3
 800af50:	0800b32b 	.word	0x0800b32b
 800af54:	0800b34f 	.word	0x0800b34f

0800af58 <_cleanup_r>:
 800af58:	4901      	ldr	r1, [pc, #4]	; (800af60 <_cleanup_r+0x8>)
 800af5a:	f000 b8af 	b.w	800b0bc <_fwalk_reent>
 800af5e:	bf00      	nop
 800af60:	0800ae99 	.word	0x0800ae99

0800af64 <__sfmoreglue>:
 800af64:	b570      	push	{r4, r5, r6, lr}
 800af66:	1e4a      	subs	r2, r1, #1
 800af68:	2568      	movs	r5, #104	; 0x68
 800af6a:	4355      	muls	r5, r2
 800af6c:	460e      	mov	r6, r1
 800af6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af72:	f7fe ffcb 	bl	8009f0c <_malloc_r>
 800af76:	4604      	mov	r4, r0
 800af78:	b140      	cbz	r0, 800af8c <__sfmoreglue+0x28>
 800af7a:	2100      	movs	r1, #0
 800af7c:	e9c0 1600 	strd	r1, r6, [r0]
 800af80:	300c      	adds	r0, #12
 800af82:	60a0      	str	r0, [r4, #8]
 800af84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af88:	f7fe ff68 	bl	8009e5c <memset>
 800af8c:	4620      	mov	r0, r4
 800af8e:	bd70      	pop	{r4, r5, r6, pc}

0800af90 <__sfp_lock_acquire>:
 800af90:	4801      	ldr	r0, [pc, #4]	; (800af98 <__sfp_lock_acquire+0x8>)
 800af92:	f000 b8b3 	b.w	800b0fc <__retarget_lock_acquire_recursive>
 800af96:	bf00      	nop
 800af98:	20004c10 	.word	0x20004c10

0800af9c <__sfp_lock_release>:
 800af9c:	4801      	ldr	r0, [pc, #4]	; (800afa4 <__sfp_lock_release+0x8>)
 800af9e:	f000 b8ae 	b.w	800b0fe <__retarget_lock_release_recursive>
 800afa2:	bf00      	nop
 800afa4:	20004c10 	.word	0x20004c10

0800afa8 <__sinit_lock_acquire>:
 800afa8:	4801      	ldr	r0, [pc, #4]	; (800afb0 <__sinit_lock_acquire+0x8>)
 800afaa:	f000 b8a7 	b.w	800b0fc <__retarget_lock_acquire_recursive>
 800afae:	bf00      	nop
 800afb0:	20004c0b 	.word	0x20004c0b

0800afb4 <__sinit_lock_release>:
 800afb4:	4801      	ldr	r0, [pc, #4]	; (800afbc <__sinit_lock_release+0x8>)
 800afb6:	f000 b8a2 	b.w	800b0fe <__retarget_lock_release_recursive>
 800afba:	bf00      	nop
 800afbc:	20004c0b 	.word	0x20004c0b

0800afc0 <__sinit>:
 800afc0:	b510      	push	{r4, lr}
 800afc2:	4604      	mov	r4, r0
 800afc4:	f7ff fff0 	bl	800afa8 <__sinit_lock_acquire>
 800afc8:	69a3      	ldr	r3, [r4, #24]
 800afca:	b11b      	cbz	r3, 800afd4 <__sinit+0x14>
 800afcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afd0:	f7ff bff0 	b.w	800afb4 <__sinit_lock_release>
 800afd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800afd8:	6523      	str	r3, [r4, #80]	; 0x50
 800afda:	4b13      	ldr	r3, [pc, #76]	; (800b028 <__sinit+0x68>)
 800afdc:	4a13      	ldr	r2, [pc, #76]	; (800b02c <__sinit+0x6c>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	62a2      	str	r2, [r4, #40]	; 0x28
 800afe2:	42a3      	cmp	r3, r4
 800afe4:	bf04      	itt	eq
 800afe6:	2301      	moveq	r3, #1
 800afe8:	61a3      	streq	r3, [r4, #24]
 800afea:	4620      	mov	r0, r4
 800afec:	f000 f820 	bl	800b030 <__sfp>
 800aff0:	6060      	str	r0, [r4, #4]
 800aff2:	4620      	mov	r0, r4
 800aff4:	f000 f81c 	bl	800b030 <__sfp>
 800aff8:	60a0      	str	r0, [r4, #8]
 800affa:	4620      	mov	r0, r4
 800affc:	f000 f818 	bl	800b030 <__sfp>
 800b000:	2200      	movs	r2, #0
 800b002:	60e0      	str	r0, [r4, #12]
 800b004:	2104      	movs	r1, #4
 800b006:	6860      	ldr	r0, [r4, #4]
 800b008:	f7ff ff82 	bl	800af10 <std>
 800b00c:	68a0      	ldr	r0, [r4, #8]
 800b00e:	2201      	movs	r2, #1
 800b010:	2109      	movs	r1, #9
 800b012:	f7ff ff7d 	bl	800af10 <std>
 800b016:	68e0      	ldr	r0, [r4, #12]
 800b018:	2202      	movs	r2, #2
 800b01a:	2112      	movs	r1, #18
 800b01c:	f7ff ff78 	bl	800af10 <std>
 800b020:	2301      	movs	r3, #1
 800b022:	61a3      	str	r3, [r4, #24]
 800b024:	e7d2      	b.n	800afcc <__sinit+0xc>
 800b026:	bf00      	nop
 800b028:	0800bca4 	.word	0x0800bca4
 800b02c:	0800af59 	.word	0x0800af59

0800b030 <__sfp>:
 800b030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b032:	4607      	mov	r7, r0
 800b034:	f7ff ffac 	bl	800af90 <__sfp_lock_acquire>
 800b038:	4b1e      	ldr	r3, [pc, #120]	; (800b0b4 <__sfp+0x84>)
 800b03a:	681e      	ldr	r6, [r3, #0]
 800b03c:	69b3      	ldr	r3, [r6, #24]
 800b03e:	b913      	cbnz	r3, 800b046 <__sfp+0x16>
 800b040:	4630      	mov	r0, r6
 800b042:	f7ff ffbd 	bl	800afc0 <__sinit>
 800b046:	3648      	adds	r6, #72	; 0x48
 800b048:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b04c:	3b01      	subs	r3, #1
 800b04e:	d503      	bpl.n	800b058 <__sfp+0x28>
 800b050:	6833      	ldr	r3, [r6, #0]
 800b052:	b30b      	cbz	r3, 800b098 <__sfp+0x68>
 800b054:	6836      	ldr	r6, [r6, #0]
 800b056:	e7f7      	b.n	800b048 <__sfp+0x18>
 800b058:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b05c:	b9d5      	cbnz	r5, 800b094 <__sfp+0x64>
 800b05e:	4b16      	ldr	r3, [pc, #88]	; (800b0b8 <__sfp+0x88>)
 800b060:	60e3      	str	r3, [r4, #12]
 800b062:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b066:	6665      	str	r5, [r4, #100]	; 0x64
 800b068:	f000 f847 	bl	800b0fa <__retarget_lock_init_recursive>
 800b06c:	f7ff ff96 	bl	800af9c <__sfp_lock_release>
 800b070:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b074:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b078:	6025      	str	r5, [r4, #0]
 800b07a:	61a5      	str	r5, [r4, #24]
 800b07c:	2208      	movs	r2, #8
 800b07e:	4629      	mov	r1, r5
 800b080:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b084:	f7fe feea 	bl	8009e5c <memset>
 800b088:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b08c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b090:	4620      	mov	r0, r4
 800b092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b094:	3468      	adds	r4, #104	; 0x68
 800b096:	e7d9      	b.n	800b04c <__sfp+0x1c>
 800b098:	2104      	movs	r1, #4
 800b09a:	4638      	mov	r0, r7
 800b09c:	f7ff ff62 	bl	800af64 <__sfmoreglue>
 800b0a0:	4604      	mov	r4, r0
 800b0a2:	6030      	str	r0, [r6, #0]
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	d1d5      	bne.n	800b054 <__sfp+0x24>
 800b0a8:	f7ff ff78 	bl	800af9c <__sfp_lock_release>
 800b0ac:	230c      	movs	r3, #12
 800b0ae:	603b      	str	r3, [r7, #0]
 800b0b0:	e7ee      	b.n	800b090 <__sfp+0x60>
 800b0b2:	bf00      	nop
 800b0b4:	0800bca4 	.word	0x0800bca4
 800b0b8:	ffff0001 	.word	0xffff0001

0800b0bc <_fwalk_reent>:
 800b0bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0c0:	4606      	mov	r6, r0
 800b0c2:	4688      	mov	r8, r1
 800b0c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b0c8:	2700      	movs	r7, #0
 800b0ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0ce:	f1b9 0901 	subs.w	r9, r9, #1
 800b0d2:	d505      	bpl.n	800b0e0 <_fwalk_reent+0x24>
 800b0d4:	6824      	ldr	r4, [r4, #0]
 800b0d6:	2c00      	cmp	r4, #0
 800b0d8:	d1f7      	bne.n	800b0ca <_fwalk_reent+0xe>
 800b0da:	4638      	mov	r0, r7
 800b0dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0e0:	89ab      	ldrh	r3, [r5, #12]
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d907      	bls.n	800b0f6 <_fwalk_reent+0x3a>
 800b0e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	d003      	beq.n	800b0f6 <_fwalk_reent+0x3a>
 800b0ee:	4629      	mov	r1, r5
 800b0f0:	4630      	mov	r0, r6
 800b0f2:	47c0      	blx	r8
 800b0f4:	4307      	orrs	r7, r0
 800b0f6:	3568      	adds	r5, #104	; 0x68
 800b0f8:	e7e9      	b.n	800b0ce <_fwalk_reent+0x12>

0800b0fa <__retarget_lock_init_recursive>:
 800b0fa:	4770      	bx	lr

0800b0fc <__retarget_lock_acquire_recursive>:
 800b0fc:	4770      	bx	lr

0800b0fe <__retarget_lock_release_recursive>:
 800b0fe:	4770      	bx	lr

0800b100 <__swhatbuf_r>:
 800b100:	b570      	push	{r4, r5, r6, lr}
 800b102:	460e      	mov	r6, r1
 800b104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b108:	2900      	cmp	r1, #0
 800b10a:	b096      	sub	sp, #88	; 0x58
 800b10c:	4614      	mov	r4, r2
 800b10e:	461d      	mov	r5, r3
 800b110:	da07      	bge.n	800b122 <__swhatbuf_r+0x22>
 800b112:	2300      	movs	r3, #0
 800b114:	602b      	str	r3, [r5, #0]
 800b116:	89b3      	ldrh	r3, [r6, #12]
 800b118:	061a      	lsls	r2, r3, #24
 800b11a:	d410      	bmi.n	800b13e <__swhatbuf_r+0x3e>
 800b11c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b120:	e00e      	b.n	800b140 <__swhatbuf_r+0x40>
 800b122:	466a      	mov	r2, sp
 800b124:	f000 f93a 	bl	800b39c <_fstat_r>
 800b128:	2800      	cmp	r0, #0
 800b12a:	dbf2      	blt.n	800b112 <__swhatbuf_r+0x12>
 800b12c:	9a01      	ldr	r2, [sp, #4]
 800b12e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b132:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b136:	425a      	negs	r2, r3
 800b138:	415a      	adcs	r2, r3
 800b13a:	602a      	str	r2, [r5, #0]
 800b13c:	e7ee      	b.n	800b11c <__swhatbuf_r+0x1c>
 800b13e:	2340      	movs	r3, #64	; 0x40
 800b140:	2000      	movs	r0, #0
 800b142:	6023      	str	r3, [r4, #0]
 800b144:	b016      	add	sp, #88	; 0x58
 800b146:	bd70      	pop	{r4, r5, r6, pc}

0800b148 <__smakebuf_r>:
 800b148:	898b      	ldrh	r3, [r1, #12]
 800b14a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b14c:	079d      	lsls	r5, r3, #30
 800b14e:	4606      	mov	r6, r0
 800b150:	460c      	mov	r4, r1
 800b152:	d507      	bpl.n	800b164 <__smakebuf_r+0x1c>
 800b154:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b158:	6023      	str	r3, [r4, #0]
 800b15a:	6123      	str	r3, [r4, #16]
 800b15c:	2301      	movs	r3, #1
 800b15e:	6163      	str	r3, [r4, #20]
 800b160:	b002      	add	sp, #8
 800b162:	bd70      	pop	{r4, r5, r6, pc}
 800b164:	ab01      	add	r3, sp, #4
 800b166:	466a      	mov	r2, sp
 800b168:	f7ff ffca 	bl	800b100 <__swhatbuf_r>
 800b16c:	9900      	ldr	r1, [sp, #0]
 800b16e:	4605      	mov	r5, r0
 800b170:	4630      	mov	r0, r6
 800b172:	f7fe fecb 	bl	8009f0c <_malloc_r>
 800b176:	b948      	cbnz	r0, 800b18c <__smakebuf_r+0x44>
 800b178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b17c:	059a      	lsls	r2, r3, #22
 800b17e:	d4ef      	bmi.n	800b160 <__smakebuf_r+0x18>
 800b180:	f023 0303 	bic.w	r3, r3, #3
 800b184:	f043 0302 	orr.w	r3, r3, #2
 800b188:	81a3      	strh	r3, [r4, #12]
 800b18a:	e7e3      	b.n	800b154 <__smakebuf_r+0xc>
 800b18c:	4b0d      	ldr	r3, [pc, #52]	; (800b1c4 <__smakebuf_r+0x7c>)
 800b18e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b190:	89a3      	ldrh	r3, [r4, #12]
 800b192:	6020      	str	r0, [r4, #0]
 800b194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b198:	81a3      	strh	r3, [r4, #12]
 800b19a:	9b00      	ldr	r3, [sp, #0]
 800b19c:	6163      	str	r3, [r4, #20]
 800b19e:	9b01      	ldr	r3, [sp, #4]
 800b1a0:	6120      	str	r0, [r4, #16]
 800b1a2:	b15b      	cbz	r3, 800b1bc <__smakebuf_r+0x74>
 800b1a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1a8:	4630      	mov	r0, r6
 800b1aa:	f000 f909 	bl	800b3c0 <_isatty_r>
 800b1ae:	b128      	cbz	r0, 800b1bc <__smakebuf_r+0x74>
 800b1b0:	89a3      	ldrh	r3, [r4, #12]
 800b1b2:	f023 0303 	bic.w	r3, r3, #3
 800b1b6:	f043 0301 	orr.w	r3, r3, #1
 800b1ba:	81a3      	strh	r3, [r4, #12]
 800b1bc:	89a0      	ldrh	r0, [r4, #12]
 800b1be:	4305      	orrs	r5, r0
 800b1c0:	81a5      	strh	r5, [r4, #12]
 800b1c2:	e7cd      	b.n	800b160 <__smakebuf_r+0x18>
 800b1c4:	0800af59 	.word	0x0800af59

0800b1c8 <memmove>:
 800b1c8:	4288      	cmp	r0, r1
 800b1ca:	b510      	push	{r4, lr}
 800b1cc:	eb01 0402 	add.w	r4, r1, r2
 800b1d0:	d902      	bls.n	800b1d8 <memmove+0x10>
 800b1d2:	4284      	cmp	r4, r0
 800b1d4:	4623      	mov	r3, r4
 800b1d6:	d807      	bhi.n	800b1e8 <memmove+0x20>
 800b1d8:	1e43      	subs	r3, r0, #1
 800b1da:	42a1      	cmp	r1, r4
 800b1dc:	d008      	beq.n	800b1f0 <memmove+0x28>
 800b1de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1e6:	e7f8      	b.n	800b1da <memmove+0x12>
 800b1e8:	4402      	add	r2, r0
 800b1ea:	4601      	mov	r1, r0
 800b1ec:	428a      	cmp	r2, r1
 800b1ee:	d100      	bne.n	800b1f2 <memmove+0x2a>
 800b1f0:	bd10      	pop	{r4, pc}
 800b1f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1fa:	e7f7      	b.n	800b1ec <memmove+0x24>

0800b1fc <_realloc_r>:
 800b1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1fe:	4607      	mov	r7, r0
 800b200:	4614      	mov	r4, r2
 800b202:	460e      	mov	r6, r1
 800b204:	b921      	cbnz	r1, 800b210 <_realloc_r+0x14>
 800b206:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b20a:	4611      	mov	r1, r2
 800b20c:	f7fe be7e 	b.w	8009f0c <_malloc_r>
 800b210:	b922      	cbnz	r2, 800b21c <_realloc_r+0x20>
 800b212:	f7fe fe2b 	bl	8009e6c <_free_r>
 800b216:	4625      	mov	r5, r4
 800b218:	4628      	mov	r0, r5
 800b21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b21c:	f000 f8f2 	bl	800b404 <_malloc_usable_size_r>
 800b220:	42a0      	cmp	r0, r4
 800b222:	d20f      	bcs.n	800b244 <_realloc_r+0x48>
 800b224:	4621      	mov	r1, r4
 800b226:	4638      	mov	r0, r7
 800b228:	f7fe fe70 	bl	8009f0c <_malloc_r>
 800b22c:	4605      	mov	r5, r0
 800b22e:	2800      	cmp	r0, #0
 800b230:	d0f2      	beq.n	800b218 <_realloc_r+0x1c>
 800b232:	4631      	mov	r1, r6
 800b234:	4622      	mov	r2, r4
 800b236:	f7fe fe03 	bl	8009e40 <memcpy>
 800b23a:	4631      	mov	r1, r6
 800b23c:	4638      	mov	r0, r7
 800b23e:	f7fe fe15 	bl	8009e6c <_free_r>
 800b242:	e7e9      	b.n	800b218 <_realloc_r+0x1c>
 800b244:	4635      	mov	r5, r6
 800b246:	e7e7      	b.n	800b218 <_realloc_r+0x1c>

0800b248 <_raise_r>:
 800b248:	291f      	cmp	r1, #31
 800b24a:	b538      	push	{r3, r4, r5, lr}
 800b24c:	4604      	mov	r4, r0
 800b24e:	460d      	mov	r5, r1
 800b250:	d904      	bls.n	800b25c <_raise_r+0x14>
 800b252:	2316      	movs	r3, #22
 800b254:	6003      	str	r3, [r0, #0]
 800b256:	f04f 30ff 	mov.w	r0, #4294967295
 800b25a:	bd38      	pop	{r3, r4, r5, pc}
 800b25c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b25e:	b112      	cbz	r2, 800b266 <_raise_r+0x1e>
 800b260:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b264:	b94b      	cbnz	r3, 800b27a <_raise_r+0x32>
 800b266:	4620      	mov	r0, r4
 800b268:	f000 f830 	bl	800b2cc <_getpid_r>
 800b26c:	462a      	mov	r2, r5
 800b26e:	4601      	mov	r1, r0
 800b270:	4620      	mov	r0, r4
 800b272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b276:	f000 b817 	b.w	800b2a8 <_kill_r>
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d00a      	beq.n	800b294 <_raise_r+0x4c>
 800b27e:	1c59      	adds	r1, r3, #1
 800b280:	d103      	bne.n	800b28a <_raise_r+0x42>
 800b282:	2316      	movs	r3, #22
 800b284:	6003      	str	r3, [r0, #0]
 800b286:	2001      	movs	r0, #1
 800b288:	e7e7      	b.n	800b25a <_raise_r+0x12>
 800b28a:	2400      	movs	r4, #0
 800b28c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b290:	4628      	mov	r0, r5
 800b292:	4798      	blx	r3
 800b294:	2000      	movs	r0, #0
 800b296:	e7e0      	b.n	800b25a <_raise_r+0x12>

0800b298 <raise>:
 800b298:	4b02      	ldr	r3, [pc, #8]	; (800b2a4 <raise+0xc>)
 800b29a:	4601      	mov	r1, r0
 800b29c:	6818      	ldr	r0, [r3, #0]
 800b29e:	f7ff bfd3 	b.w	800b248 <_raise_r>
 800b2a2:	bf00      	nop
 800b2a4:	20001a60 	.word	0x20001a60

0800b2a8 <_kill_r>:
 800b2a8:	b538      	push	{r3, r4, r5, lr}
 800b2aa:	4d07      	ldr	r5, [pc, #28]	; (800b2c8 <_kill_r+0x20>)
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	4604      	mov	r4, r0
 800b2b0:	4608      	mov	r0, r1
 800b2b2:	4611      	mov	r1, r2
 800b2b4:	602b      	str	r3, [r5, #0]
 800b2b6:	f7f8 fb39 	bl	800392c <_kill>
 800b2ba:	1c43      	adds	r3, r0, #1
 800b2bc:	d102      	bne.n	800b2c4 <_kill_r+0x1c>
 800b2be:	682b      	ldr	r3, [r5, #0]
 800b2c0:	b103      	cbz	r3, 800b2c4 <_kill_r+0x1c>
 800b2c2:	6023      	str	r3, [r4, #0]
 800b2c4:	bd38      	pop	{r3, r4, r5, pc}
 800b2c6:	bf00      	nop
 800b2c8:	20004c04 	.word	0x20004c04

0800b2cc <_getpid_r>:
 800b2cc:	f7f8 bb2c 	b.w	8003928 <_getpid>

0800b2d0 <__sread>:
 800b2d0:	b510      	push	{r4, lr}
 800b2d2:	460c      	mov	r4, r1
 800b2d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2d8:	f000 f89c 	bl	800b414 <_read_r>
 800b2dc:	2800      	cmp	r0, #0
 800b2de:	bfab      	itete	ge
 800b2e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b2e2:	89a3      	ldrhlt	r3, [r4, #12]
 800b2e4:	181b      	addge	r3, r3, r0
 800b2e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b2ea:	bfac      	ite	ge
 800b2ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800b2ee:	81a3      	strhlt	r3, [r4, #12]
 800b2f0:	bd10      	pop	{r4, pc}

0800b2f2 <__swrite>:
 800b2f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2f6:	461f      	mov	r7, r3
 800b2f8:	898b      	ldrh	r3, [r1, #12]
 800b2fa:	05db      	lsls	r3, r3, #23
 800b2fc:	4605      	mov	r5, r0
 800b2fe:	460c      	mov	r4, r1
 800b300:	4616      	mov	r6, r2
 800b302:	d505      	bpl.n	800b310 <__swrite+0x1e>
 800b304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b308:	2302      	movs	r3, #2
 800b30a:	2200      	movs	r2, #0
 800b30c:	f000 f868 	bl	800b3e0 <_lseek_r>
 800b310:	89a3      	ldrh	r3, [r4, #12]
 800b312:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b316:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b31a:	81a3      	strh	r3, [r4, #12]
 800b31c:	4632      	mov	r2, r6
 800b31e:	463b      	mov	r3, r7
 800b320:	4628      	mov	r0, r5
 800b322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b326:	f000 b817 	b.w	800b358 <_write_r>

0800b32a <__sseek>:
 800b32a:	b510      	push	{r4, lr}
 800b32c:	460c      	mov	r4, r1
 800b32e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b332:	f000 f855 	bl	800b3e0 <_lseek_r>
 800b336:	1c43      	adds	r3, r0, #1
 800b338:	89a3      	ldrh	r3, [r4, #12]
 800b33a:	bf15      	itete	ne
 800b33c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b33e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b342:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b346:	81a3      	strheq	r3, [r4, #12]
 800b348:	bf18      	it	ne
 800b34a:	81a3      	strhne	r3, [r4, #12]
 800b34c:	bd10      	pop	{r4, pc}

0800b34e <__sclose>:
 800b34e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b352:	f000 b813 	b.w	800b37c <_close_r>
	...

0800b358 <_write_r>:
 800b358:	b538      	push	{r3, r4, r5, lr}
 800b35a:	4d07      	ldr	r5, [pc, #28]	; (800b378 <_write_r+0x20>)
 800b35c:	4604      	mov	r4, r0
 800b35e:	4608      	mov	r0, r1
 800b360:	4611      	mov	r1, r2
 800b362:	2200      	movs	r2, #0
 800b364:	602a      	str	r2, [r5, #0]
 800b366:	461a      	mov	r2, r3
 800b368:	f7f8 fafe 	bl	8003968 <_write>
 800b36c:	1c43      	adds	r3, r0, #1
 800b36e:	d102      	bne.n	800b376 <_write_r+0x1e>
 800b370:	682b      	ldr	r3, [r5, #0]
 800b372:	b103      	cbz	r3, 800b376 <_write_r+0x1e>
 800b374:	6023      	str	r3, [r4, #0]
 800b376:	bd38      	pop	{r3, r4, r5, pc}
 800b378:	20004c04 	.word	0x20004c04

0800b37c <_close_r>:
 800b37c:	b538      	push	{r3, r4, r5, lr}
 800b37e:	4d06      	ldr	r5, [pc, #24]	; (800b398 <_close_r+0x1c>)
 800b380:	2300      	movs	r3, #0
 800b382:	4604      	mov	r4, r0
 800b384:	4608      	mov	r0, r1
 800b386:	602b      	str	r3, [r5, #0]
 800b388:	f7f8 fb1a 	bl	80039c0 <_close>
 800b38c:	1c43      	adds	r3, r0, #1
 800b38e:	d102      	bne.n	800b396 <_close_r+0x1a>
 800b390:	682b      	ldr	r3, [r5, #0]
 800b392:	b103      	cbz	r3, 800b396 <_close_r+0x1a>
 800b394:	6023      	str	r3, [r4, #0]
 800b396:	bd38      	pop	{r3, r4, r5, pc}
 800b398:	20004c04 	.word	0x20004c04

0800b39c <_fstat_r>:
 800b39c:	b538      	push	{r3, r4, r5, lr}
 800b39e:	4d07      	ldr	r5, [pc, #28]	; (800b3bc <_fstat_r+0x20>)
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	4604      	mov	r4, r0
 800b3a4:	4608      	mov	r0, r1
 800b3a6:	4611      	mov	r1, r2
 800b3a8:	602b      	str	r3, [r5, #0]
 800b3aa:	f7f8 fb0c 	bl	80039c6 <_fstat>
 800b3ae:	1c43      	adds	r3, r0, #1
 800b3b0:	d102      	bne.n	800b3b8 <_fstat_r+0x1c>
 800b3b2:	682b      	ldr	r3, [r5, #0]
 800b3b4:	b103      	cbz	r3, 800b3b8 <_fstat_r+0x1c>
 800b3b6:	6023      	str	r3, [r4, #0]
 800b3b8:	bd38      	pop	{r3, r4, r5, pc}
 800b3ba:	bf00      	nop
 800b3bc:	20004c04 	.word	0x20004c04

0800b3c0 <_isatty_r>:
 800b3c0:	b538      	push	{r3, r4, r5, lr}
 800b3c2:	4d06      	ldr	r5, [pc, #24]	; (800b3dc <_isatty_r+0x1c>)
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	4604      	mov	r4, r0
 800b3c8:	4608      	mov	r0, r1
 800b3ca:	602b      	str	r3, [r5, #0]
 800b3cc:	f7f8 fb00 	bl	80039d0 <_isatty>
 800b3d0:	1c43      	adds	r3, r0, #1
 800b3d2:	d102      	bne.n	800b3da <_isatty_r+0x1a>
 800b3d4:	682b      	ldr	r3, [r5, #0]
 800b3d6:	b103      	cbz	r3, 800b3da <_isatty_r+0x1a>
 800b3d8:	6023      	str	r3, [r4, #0]
 800b3da:	bd38      	pop	{r3, r4, r5, pc}
 800b3dc:	20004c04 	.word	0x20004c04

0800b3e0 <_lseek_r>:
 800b3e0:	b538      	push	{r3, r4, r5, lr}
 800b3e2:	4d07      	ldr	r5, [pc, #28]	; (800b400 <_lseek_r+0x20>)
 800b3e4:	4604      	mov	r4, r0
 800b3e6:	4608      	mov	r0, r1
 800b3e8:	4611      	mov	r1, r2
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	602a      	str	r2, [r5, #0]
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	f7f8 faf0 	bl	80039d4 <_lseek>
 800b3f4:	1c43      	adds	r3, r0, #1
 800b3f6:	d102      	bne.n	800b3fe <_lseek_r+0x1e>
 800b3f8:	682b      	ldr	r3, [r5, #0]
 800b3fa:	b103      	cbz	r3, 800b3fe <_lseek_r+0x1e>
 800b3fc:	6023      	str	r3, [r4, #0]
 800b3fe:	bd38      	pop	{r3, r4, r5, pc}
 800b400:	20004c04 	.word	0x20004c04

0800b404 <_malloc_usable_size_r>:
 800b404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b408:	1f18      	subs	r0, r3, #4
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	bfbc      	itt	lt
 800b40e:	580b      	ldrlt	r3, [r1, r0]
 800b410:	18c0      	addlt	r0, r0, r3
 800b412:	4770      	bx	lr

0800b414 <_read_r>:
 800b414:	b538      	push	{r3, r4, r5, lr}
 800b416:	4d07      	ldr	r5, [pc, #28]	; (800b434 <_read_r+0x20>)
 800b418:	4604      	mov	r4, r0
 800b41a:	4608      	mov	r0, r1
 800b41c:	4611      	mov	r1, r2
 800b41e:	2200      	movs	r2, #0
 800b420:	602a      	str	r2, [r5, #0]
 800b422:	461a      	mov	r2, r3
 800b424:	f7f8 fa90 	bl	8003948 <_read>
 800b428:	1c43      	adds	r3, r0, #1
 800b42a:	d102      	bne.n	800b432 <_read_r+0x1e>
 800b42c:	682b      	ldr	r3, [r5, #0]
 800b42e:	b103      	cbz	r3, 800b432 <_read_r+0x1e>
 800b430:	6023      	str	r3, [r4, #0]
 800b432:	bd38      	pop	{r3, r4, r5, pc}
 800b434:	20004c04 	.word	0x20004c04

0800b438 <_init>:
 800b438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b43a:	bf00      	nop
 800b43c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b43e:	bc08      	pop	{r3}
 800b440:	469e      	mov	lr, r3
 800b442:	4770      	bx	lr

0800b444 <_fini>:
 800b444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b446:	bf00      	nop
 800b448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b44a:	bc08      	pop	{r3}
 800b44c:	469e      	mov	lr, r3
 800b44e:	4770      	bx	lr
